{"version":3,"sources":["app/app.module.js","app/app.js","app/public/profesor/info/profesor.details.controller.js","app/components/form/buttoncreate/button-create.component.js","app/public/cuenta/miespacio/profesores/profesores.state.js","app/public/cuenta/miespacio/perfil/perfil.state.js","app/public/cuenta/miespacio/perfil/perfil.form.controller.js","app/public/cuenta/miespacio/paquetescreditos/paquetescreditos.state.js","app/public/cuenta/miespacio/miscompras/mis-compras.state.js","app/public/cuenta/miespacio/misalumnos/mis-alumnos.state.js","app/public/cuenta/miespacio/miagenda/mi-agenda.state.js","app/components/form/confirm/confirm.modal.controller.js","app/public/cuenta/validar/validar.state.js","app/public/cuenta/validar/validar.controller.js","app/public/cuenta/registro/registro.state.js","app/public/cuenta/registro/registro.controller.js","app/public/cuenta/recuperar/recuperar.state.js","app/public/cuenta/recuperar/recuperar.init.controller.js","app/public/cuenta/recuperar/recuperar.finish.controller.js","app/public/cuenta/miespacio/mi-espacio.state.js","app/public/cuenta/logout/logout.state.js","app/public/cuenta/logout/logout.controller.js","app/components/form/archivos/imagenperfilver/imagen-perfil-ver.component.js","app/components/form/archivos/imagenperfil/imagen-perfil.component.js","app/components/form/archivos/imagen/imagen.directive.js","app/components/form/archivos/imagen/imagen.controller.js","app/components/form/archivos/fileupload/file-upload.directive.js","app/components/form/archivos/fileupload/file-upload.controller.js","app/components/form/archivos/download/download.directive.js","app/components/form/archivos/download/download.controller.js","app/public/profesor/list/profesor.list.controller.js","app/components/form/buttons/buttons-form.component.js","app/public/components/usuarioreserva/usuario-reserva.component.js","app/public/components/profesor/profesor.component.js","app/public/components/password/password.component.js","app/public/components/paquetecreditos/paquetecreditos-list.component.js","app/public/components/paquetecreditos/paquetecreditos-comprar.component.js","app/public/components/misalumnos/mis-alumnos-list.component.js","app/public/components/miagenda/reserva.service.js","app/public/components/miagenda/reserva-count.component.js","app/public/components/miagenda/mi-agenda.list.component.js","app/public/components/miagenda/claselibre.service.js","app/public/components/login/login.component.js","app/public/components/compra/compra-list.component.js","app/components/form/validate/same-as.directive.js","app/components/form/tooltip/tooltip.directive.js","app/components/form/textarea/text-area.config.js","app/components/form/textarea/text-area.component.js","app/components/form/tesauro/tesauro.directive.js","app/components/form/select/select-form.component.js","app/components/form/password/password-strength-bar.directive.js","app/components/form/multiselect/multi-select.component.js","app/components/form/listform/list-form.component.js","app/components/form/label/label-form.component.js","app/components/form/filter/filter.input.component.js","app/components/form/fecha/fecha.component.js","app/components/form/enum/enum-select.component.js","app/components/form/enum/enum-select-boolean.component.js","app/components/form/delete/entity.delete.modal.controller.js","app/components/form/date/date-picker.component.js","app/components/enum/enumerado.component.js","app/admin/user/admin/admin.form.controller.js","app/admin/user/admin/admin.admin.state.js","app/admin/user/admin/admin.admin.controller.js","app/security/social/social.state.js","app/security/social/social.service.js","app/security/auth/principal.service.js","app/security/auth/auth.service.js","app/security/auth/auth.jwt.service.js","app/security/auth/account.service.js","app/public/profesor/profesor.state.js","app/public/home/home.state.js","app/public/home/home.controller.js","app/public/compra/compra.state.js","app/layouts/header/header.controller.js","app/layouts/error/error.state.js","app/entities/util/resource-helper.service.js","app/entities/util/descarga.util.service.js","app/config/interceptor/notification.interceptor.js","app/config/interceptor/errorhandler.interceptor.js","app/config/interceptor/auth.interceptor.js","app/config/interceptor/auth-expired.interceptor.js","app/components/util/parse-links.service.js","app/components/util/compile.directive.js","app/components/usuariogestion/usuario-gestion-eliminados.component.js","app/components/usuariogestion/usuario-gestion-columna.component.js","app/components/statics/static.state.js","app/components/statics/static.modal.service.js","app/components/statics/static.modal.controller.js","app/components/statics/static.component.js","app/components/social/social.directive.js","app/components/security/has-no-authority.directive.js","app/components/security/has-authority.directive.js","app/components/security/has-any-authority.directive.js","app/components/security/has-any-authority-or-state.directive.js","app/components/reserva/reserva.modal.controller.js","app/components/pagination/pagination.component.js","app/components/ngtable/ng-table-helper.service.js","app/components/modal/modal.service.js","app/components/modal/entity.modal.component.js","app/components/menu/submenu.directive.js","app/components/menu/menu.service.js","app/components/menu/menu.component.js","app/components/menu/menu-item.directive.js","app/components/loading/loading.component.js","app/components/idiomas/idiomas.component.js","app/components/form/show-validation.directive.js","app/components/form/radio-button.directive.js","app/components/filters/unique.filter.js","app/components/filters/num.filter.js","app/components/filters/minutos.filter.js","app/components/filters/capitalize.filter.js","app/components/date/date.component.js","app/components/buttontop/button-top.component.js","app/components/booleano/booleano.component.js","app/components/alert/alert.service.js","app/components/alert/alert.config.js","app/components/alert/alert.component.js","app/admin/user/password.admin.state.js","app/admin/reserva/reserva.admin.state.js","app/admin/reserva/reserva-list.component.js","app/admin/profesor/profesor.admin.state.js","app/admin/profesor/profesor-list.admin.component.js","app/admin/profesor/profesor-form.admin.config.js","app/admin/profesor/profesor-form.admin.component.js","app/admin/paquetecreditos/paquetecreditos.admin.state.js","app/admin/paquetecreditos/paquetecreditos-form.admin.config.js","app/admin/paquetecreditos/paquetecreditos-form.admin.component.js","app/admin/login/login.state.js","app/admin/login/login.controller.js","app/admin/estaticas/estaticas.admin.state.js","app/admin/estaticas/estatica.service.js","app/admin/estaticas/estatica-idioma.service.js","app/admin/estaticas/estatica-form.admin.component.js","app/admin/empresa/empresa.alumno.admin.state.js","app/admin/empresa/empresa.admin.state.js","app/admin/empresa/empresa-list.admin.component.js","app/admin/empresa/empresa-form.admin.config.js","app/admin/empresa/empresa-form.admin.component.js","app/admin/capacidad/capacidad.admin.state.js","app/admin/capacidad/capacidad-form.admin.config.js","app/admin/capacidad/capacidad-form.admin.component.js","app/admin/configuracion/configuracion.controller.js","app/admin/configuracion/configuracion.admin.state.js","app/admin/alumno/alumno.admin.state.js","app/admin/alumno/alumno-list.admin.component.js","app/admin/alumno/alumno-form.admin.config.js","app/admin/alumno/alumno-form.admin.component.js","app/admin/agenda/agenda.admin.state.js","app/services/rutas.service.js","app/services/language.service.js","app/services/enum.service.js","app/public/public.state.js","app/public/public.constants.js","app/entities/usuario.service.js","app/entities/user.service.js","app/entities/perfil.service.js","app/entities/paquetecreditos.service.js","app/entities/pais.service.js","app/entities/nivel.service.js","app/entities/idioma.service.js","app/entities/datosfacturacion.service.js","app/entities/configuracion.service.js","app/entities/compra.service.js","app/entities/capacidad.service.js","app/config/state.handler.js","app/config/ie-fix.config.js","app/config/http.config.js","app/config/app.config.js","app/admin/admin.state.js","app/admin/admin.state.constants.js","app/admin/admin.constants.js","app/app.state.js","app/app.constants.js"],"names":["angular","appRun","$rootScope","$translate","$localStorage","stateHandler","bootstrap3ElementModifier","validator","defaultErrorMessageResolver","initialize","changeLanguage","key","use","then","refresh","lang","enableValidationStateIcons","setValidElementStyling","defaultFormValidationOptions","validateOnFormSubmit","setI18nFileRootPath","setCulture","$inject","module","run","ProfesorDetailsController","profesor","vm","this","controller","component","template","controllerAs","bindings","click","params","stateConfig","$stateProvider","state","parent","url","data","pageTitle","views","contentEspacio","templateUrl","resolve","User","$stateParams","getProfesorById","id","$promise","config","authorities","itemData","Principal","identity","PerfilFormController","$timeout","$state","ModalService","Usuario","EnumService","Capacidad","Idioma","Pais","Nivel","initForm","item","copy","initImagen","imagen","foto","path","element","focus","mode","save","centro","type","isNumber","fechaNacimiento","edit","onRemoveImage","eliminar","findAll","sortProperty","capacidades","content","query","niveles","idiomaService","nivelService","paisService","zonasHorarias","confirmarBaja","open","title","body","tipo","Perfil","funcion","parametros","result","go","base","redirectTo","content@","rol","empresa","paqueteId","paqueteCreditos","Paquetecreditos","get","datosFacturacion","DatosFacturacion","getDatosFacturacionDeUsuario","usuario","AlertService","info","gmt","zonaHoraria","canceladasRechazadas","contentMiagenda","usuarioAutenticado","Controller","dismiss","confirm","close","ValidarController","Auth","validateAccount","error","success","RegistroController","confirmPassword","contrasenaClaro","acepto","$register","usuarioService","RecuperarInitController","recuperar","email","resetPasswordInit","RecuperarFinishController","newPassword","resetPasswordFinish","isAuthenticated","LogoutController","logout","mini","ImagenPerfil","Upload","activate","ngModel","rutaImagen","rutaCarpetaImagen","myCroppedImage","onUploaded","onUploadedImage","blobToFile","theBlob","fileName","lastModifiedDate","Date","name","dataURItoBlob","dataURI","byteString","atob","split","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","editPreview","myImage","isSubmitted","form","$submitted","$$parentForm","eliminarImagen","archivoTemporal","onImagenSelect","files","progresoImagen","$setValidity","upload","file","ext","method","response","msg","archivo","clickUpload","indice","document","getElementById","preview","imagenTemporal","rutaImagenDefault","restrict","scope","ngModelRadio","edicion","bindToController","directive","ImagenController","undefined","generateThumb","indexOf","fileReader","FileReader","readAsDataURL","onload","e","target","fileUpload","accept","onSelected","FileUploadController","setTimeout","trigger","onArchivoSelect","console","log","progresoArchivo","eliminarArchivo","download","showLabel","DownloadController","descargarArchivo","window","ProfesorListController","$scope","profesores","filter","activos","idioma","nivel","paises","horadia","dia","$watch","newValue","oldValue","size","page","findAllProfesor","abrir","loading","loaded","cargar","push","back","isOpen","canSave","UsuarioReservaController","cancelada","reserva","estado","evaluada","ProfesorController","d","minutos","getMinutes","now","getHours","parseInt","substring","getTimezoneOffset","PasswordController","newpassword","changePassword","password","$setPristine","NG_TABLE_DEFAULT_PARAMS","NgTableParams","NgTableHelper","pagina","elementosPorPagina","paquetecreditosId","tableParams","count","sorting","creditos","settings","showRemoveConfirmation","property","reload","comprarPaquetecreditos","authorize","comprar","solicitarFactura","NG_TABLE_DEFAULT_PARAMS_PUBLIC","nombre","Reserva","ResourceHelper","getResource","isArray","filterByAdmin","update","devolverCreditos","rechazarCreditos","factory","estados","MiAgendaController","$compile","uiCalendarConfig","ClaseLibre","cargarDatos","start","end","firstTiempoMinimo","firstTiempoMaximo","obtenerClasesLibres","actualizarEvento","evento","fullCalendar","actualizarRangosTiempo","actualizarAgenda","eventos","calendars","myCalendar","devolverColorEvento","ocupada","backgroundColor","COLOR_CLASE_OCUPADA","borderColor","COLOR_CLASE_LIBRE","clasesLibresToBloque","resultados","inicio","fin","fecha","tiempoMinimo","minutesOfDay","valueOf","TREINTA_MINUTOS_EN_MS","tiempoMaximo","className","today","events","reservasToBloque","countEstados","reservasAux","COLOR_RESERVA_SIN_CONTESTAR","COLOR_RESERVA_CONFIRMADA","COLOR_RESERVA_NO_CONTESTADA_RECHAZADA_CANCELADA_POR_ALUMNO_O_PROFESOR","COLOR_RESERVA_INCIDENCIA","COLOR_RESERVA_PENDIENTE","COLOR_RESERVA_REALIZADA","j","claseLibre","splice","titulo","persona","alumno","apellidos","motivoProfesor","motivoAlumno","apply","fechaInicio","toDate","fechaFin","usuarioObtenerClasesLibres","mensaje","usuarioLogueado","alumnoViendose","defaultView","admin","defaultDate","initMonth","setMonth","initYear","setFullYear","getMonth","getFullYear","deseleccionarEvento","isCollapsed","eventoSeleccionado","duplicarSemana","duplicarsemana","dayClick","date","allDay","jsEvent","view","clone","add","alertOnEventClick","clase","configuracion","_id","vistaInicio","vistaFin","anteriorEventoIdSeleccionado","rolbd","estadobd","fechaPrimeraClase","fechaUltimaClase","alumnoId","creditosDisponibles","usuarioModal","getProfesorPorClaseLibre","getUsuarioPorReserva","Configuracion","creditosConsumidos","eventRender","event","attr","uib-tooltip","tooltip","uib-tooltip-append-to-body","viewRender","intervalUnit","show","hide","eventAfterAllRender","uiConfig","calendar","height","editable","allDaySlot","timezone","minTime","maxTime","locale","firstDay","eventOverlap","eventStartEditable","header","left","center","right","timeFormat","slotLabelFormat","eventClick","eventDurationEditable","customButtons","recargar","icon","extend","text","instant","subtract","addlist","LoginController","ADMIN_PRINCIPAL","user","rememberMe","foco","login","username","authenticationError","Compra","require","link","elem","attrs","validate","value","isValid","$eval","sameAs","$parsers","unshift","$setViewValue","$viewValue","Tooltip","replace","label","position","textAngularConfig","$provide","decorator","taRegisterTool","taOptions","iconclass","buttontext","action","$editor","wrapSelection","toolbar","blur","classList","contains","addClass","removeClass","model","disabled","required","Tesauro","placeholder","resource","multiple","asList","display","parameters","restricted","minLength","queryParam","eliminable","clear","resetElement","setElement","loadTags","Array","change","format","options","empty","list","formatElement","formated","forEach","elementDisplay","index","baseText","trim","translated","passwordStrengthBar","linkFunc","iElement","strength","colors","mesureStrength","p","_force","_regex","_lowerLetters","test","_upperLetters","_numbers","_symbols","_flags","_passedMatches","$","grep","el","Math","min","getColor","s","idx","col","c","find","children","css","background-color","slice","passwordToCheck","extraSettings","smartButtonMaxItems","enableSearch","clearSearchOnClose","selectedToTop","showUncheckAll","showCheckAll","enumBase","merge","smartButtonTextProvider","selectionArray","displayProp","searchField","idProperty","extra","translations","buttonDefaultText","searchPlaceholder","selectionCount","onItemSelect","enum","initList","addElement","desplegado","removeElement","acordeon","labelForm","for","sufijo","prefijo","confirmRemove","$remove","init","opened","showBar","readonly","minDate","dateOptions","datepickerMode","formatYear","maxDate","startingDay","showWeeks","openDatePicker","datePicker","enumerado","AdminFormController","registerAccount","roles","register","createAccount","STATE_HELPER","baseUrl","templateUrlBase","controllerForm","translateBase","create","AdminAdminController","SocialService","loginWithToken","$http","$cookies","registro","token","remove","getProviderSetting","provider","getProviderURL","getCSRF","defaults","xsrfCookieName","socialService","$q","Account","authenticate","_identity","_authenticated","$broadcast","hasAnyAuthority","hasAuthority","authority","when","force","getAccountThen","account","deferred","getAccountCatch","defer","isDefined","promise","isIdentityResolved","service","$sessionStorage","AuthServerProvider","credentials","callback","cb","noop","jwt","err","reject","bind","authThen","toState","fromState","previousStateName","previousStateParams","toStateParams","startsWith","authReturn","keyAndPassword","getToken","authenticationToken","hasValidToken","expires","getTime","authenticateSuccess","headers","status","bearerToken","storeAuthenticationToken","post","$resource","interceptor","idiomas","getAllWithProfesores","horadias","dias","HomeController","compra","foo","$window","crear","iniciarPaypal","compraId","location","href","confirmarPaypal","paymentId","cancelar","warning","updateUser","$on","ncyBreadcrumb","skip","entidad","newFunctions","publico","functions","Service","descargar","responseType","contentDisposition","filename","saveAs","notificationInterceptor","alertKey","isString","param","errorHandlerInterceptor","responseError","$emit","authInterceptor","request","Authorization","authExpiredInterceptor","$injector","ParseLinks","parse","isUndefinedOrNull","Error","parts","links","section","queryString","RegExp","$0","$1","$2","$3","compile","html","contents","onChangeEliminados","eliminados","showDesactivarConfirmation","showBajaConfirmation","showRestaurarConfirmation","language","Language","getCurrent","StaticModal","StaticModalController","carpeta","bd","$element","$attrs","Estatica","getByNombreIdioma","estaticai18n","social","$filter","providerSetting","providerURL","csrf","hasNoAuthority","setVisible","setHidden","defineVisibility","reset","hasAnyAuthorityOrState","states","results","includes","ahora","comienzoMenosHoras","setHours","tiempoAntesInicioCancelar","tipos","SIN_CONTESTAR","CANCELAR_PROFESOR","CANCELAR_ALUMNO","RESPONDER_PROFESOR","RESPONDER_ALUMNO","RESPONDER_ALUMNO_PENDIENTE","mostrarFooter","profesorId","claseLibreId","currentPage","totalElements","NG_LIST_DEFAULT_PARAMS_PUBLIC","itemsPerPage","pageChanged","current","firstLoad","defaultSort","counts","getData","sortDir","orderBy","toUpperCase","sortDirection","genericFilter","notify","total","$uibModal","modal","modals","openComponent","configEntity","backdrop","closeComponent","subOpened","pop","submenuDirective","menu","Menu","getMenu","navCollapsed","lateral","checkActiveStates","activeStates","active","collapse","innerWidth","menuItemDirective","leaf","subtree","append","classFound","hasClass","isLoading","class","img","showValidation","each","$formGroup","$inputs","$input","isInvalid","toggleClass","radio","tElt","items","filterOn","filterOnSecondLevel","isUndefined","newItems","extractValueToCompare","isObject","isDuplicate","equals","input","calcular","time","floor","capitalize","capitalizeFilter","toLowerCase","hora","scrollFunction","scrollTop","documentElement","style","onscroll","topFunction","animate","buttonTop","mote","booleano","getService","$sce","isToast","toast","getTimeout","timeout","alerts","clearPermanent","alert","alertOptions","trustAsHtml","alertId","scoped","closeAlert","addAlert","extAlerts","that","thisAlerts","closeAlertByIndex","map","$get","showAsToast","alertServiceConfig","AlertServiceProvider","alertController","addErrorAlert","message","modalService","cleanHttpErrorListener","httpResponse","stopPropagation","errorHeader","entityKey","entityName","fieldErrors","fieldError","convertedField","field","fieldName","objectName","errors","code","templateList","revisadas","devolver","rechazar","PROFESOR_FORM_ADMIN","templateForm","getById","DescargaUtil","profesoresExcel","mes","ano","years","months","constant","CAPACIDAD_FORM_ADMIN","openCapacidadModal","previousParams","PAQUETECREDITOS_FORM_ADMIN","paquetecreditos","empresaId","estatica","getByNombre","EstaticaIdiomaService","estaticasI18n","hayPrimeraEstaticaSinTitulo","estaticaI18n","ALUMNO_FORM_ADMIN","getEmpresaDTO","EMPRESA_FORM_ADMIN","empresasExcel","$save","ConfiguracionController","estadoEditar","empresaAlumnosExcel","creditosIniciales","creditosMaximos","usuarioId","RutasService","$location","DEBUG_INFO_ENABLED","getBaseUrl","cacheUrl","protocol","host","port","getAgenteCvUrl","getAgenteImagenUrl","preferredLanguage","cache","defered","abstract","header@","navbar@","menuData","footer@","isAdmin","queryByEmail","queryByLogin","queryCentro","urlAdmin","urlPublic","transformResponse","fromJson","findProfesoresAdmin","findAlumnosByCentro","activar","restaurar","baja","findAllByUsuarioActivo","iniciarPaypalAlumno","_states","stateExists","deregistrationStateChangeStart","preventDefault","deregistrationStateChangeSuccess","toParams","fromParams","ga","titleKey","redirected","ieFix","String","prototype","search","pos","substr","endsWith","this_len","searchElement","O","Object","len","k","n","arguments","currentElement","httpConfig","$urlRouterProvider","$httpProvider","$locationProvider","httpRequestInterceptorCacheBusterProvider","setMatchlist","otherwise","interceptors","hashPrefix","html5Mode","appConfig","$translateProvider","cfpLoadingBarProvider","$compileProvider","$breadcrumbProvider","$qProvider","useSanitizeValueStrategy","useStaticFilesLoader","prefix","suffix","latencyThreshold","includeSpinner","setOptions","debugInfoEnabled","preAssignBindingsEnabled","errorOnUnhandledRejections","dynamic","onlyEdit","$templateCache","put"],"mappings":"CAAA,SAAAA,GACA,YA4BA,SAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAH,EAAAI,aAEAP,EAAAQ,eAAA,SAAAC,GACAR,EAAAS,QAAAD,IACAR,EAAAS,IAAAD,GAAAE,KAAA,WACAV,EAAAW,YAEAV,EAAAW,KAAAJ,IAKAL,EAAAU,4BAAA,GAEAT,EAAAU,wBAAA,GAEAV,EAAAW,6BAAAC,sBAAA,EAGAX,EAAAY,oBAAA,QACAZ,EAAAa,WAAA,MChDIpB,EAAOqB,SAAW,aAAc,aAAc,gBAAiB,eAAgB,4BAA6B,YAAa,+BDA7HtB,EAAAuB,OAAA,OACA,eACA,YACA,sBACA,iCACA,kBACA,mBACA,yBACA,YACA,gBACA,YACA,eACA,aACA,YACA,UACA,cACA,yBACA,cACA,eACA,8BACA,cACA,YACA,sBACAC,IAAAvB,IA4BAD,SEtDA,SAAAA,GACA,YAOA,SAAAyB,GAAAC,GACA,GAAAC,GAAAC,IACAD,GAAAD,SAAAA,EDkDID,EAA0BH,SAAW,YCzDzCtB,EACAuB,OAAA,OACAM,WAAA,4BAAAJ,IASAzB,SCdA,WACA,YASAA,SACAuB,OAAA,OACAO,UAAA,gBACAC,SAAA,yJAEAC,aAAA,OACAC,UACAC,MAAA,IACAC,OAAA,UClBA,WACA,YAOA,SAAAC,GAAAC,GACAA,EACAC,MAAA,2BACAC,OAAA,YACAC,IAAA,2BACAC,MACAC,UAAA,6BAEAC,OACAC,gBACAC,YAAA,iDACAhB,WAAA,4BACAG,aAAA,SAGAc,SAEApB,UAAA,OAAA,eAAA,SAAAqB,EAAAC,GACA,MAAAD,GAAAE,iBAAAC,GAAAF,EAAAE,KAAAC,cH2EIf,EAAYd,SAAW,kBGlG3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAOA,SAAAA,GAAAC,GACAA,EACAC,MAAA,oBACAC,OAAA,YACAC,IAAA,UACAC,MACAY,aAAA,sBACAX,UAAA,+BAEAC,OACAC,gBACAC,YAAA,sDACAhB,WAAA,uBACAG,aAAA,SAGAc,SAEAQ,UAAA,YAAA,SAAAC,GACA,MAAAA,GAAAC,WAAA3C,KAAA,SAAA4B,GACA,MAAAA,UAKAH,MAAA,+BACAC,OAAA,YACAC,IAAA,+BACAG,OACAC,gBACAb,SAAA,yGJiGIK,EAAYd,SAAW,kBIpI3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,SAAApC,GACA,YAOA,SAAAyD,GAAAC,EAAAC,EAAAL,EAAAM,EACAC,EAAAC,EAAAP,EAAAQ,EAAAC,EAAAC,EAAAC,EAAAnB,GASA,QAAAoB,KACAxC,EAAAyC,KAAApE,EAAAqE,KAAAf,GAEAgB,IAuBA,QAAAA,KACA3C,EAAAyC,KAAAG,SACA5C,EAAAyC,KAAAG,WAEA5C,EAAAyC,KAAAI,OACA7C,EAAAyC,KAAAG,OAAAE,KAAA9C,EAAAyC,KAAAI,MAvCA,GAAA7C,GAAAC,IAEA8B,GAAA,WACA1D,EAAA0E,QAAA,4BAAAC,UAGAhD,EAAAiD,KAAA,SAQAT,IAGAxC,EAAAkD,KAAA,WACAlD,EAAAyC,KAAAU,SACAnD,EAAAyC,KAAAU,OAAAC,KAAA,UAIA/E,EAAAgF,SAAArD,EAAAyC,KAAAa,mBACAtD,EAAAyC,KAAAa,gBAAAtD,EAAAyC,KAAAa,gBAAA,KAGApB,EAAAqB,KAAAvD,EAAAyC,MAAAjB,SAAAtC,KAAA,SAAA4B,GACAd,EAAAyC,KAAAa,gBAAA,IAAAxC,EAAAwC,gBACA1B,EAAAC,UAAA,MAcA7B,EAAAwD,cAAA,WACAxD,EAAAyC,KAAAG,QAAAa,UAAA,IAGArB,EAAAsB,SAAAC,aAAA,WAAAnC,SAAAtC,KAAA,SAAA4B,GACAd,EAAA4D,YAAA9C,EAAA+C,UAOAtB,EAAAuB,QAAAtC,SAAAtC,KAAA,SAAA4B,GACAd,EAAA+D,QAAAjD,IAGAd,EAAAgE,cAAA3B,EACArC,EAAAiE,aAAA1B,EACAvC,EAAAkE,YAAA5B,EAEAlB,EAAA+C,gBAAA3C,SAAAtC,KAAA,SAAA4B,GACAd,EAAAmE,cAAArD,IAIAd,EAAAoE,cAAA,WACAnC,EAAAoC,MACAnD,YAAA,iDACAhB,WAAA,yBACAG,aAAA,OACAc,SACAsB,KAAA,WACA,MAAAzC,GAAAyC,MAEAjC,OAAA,WACA,OACA8D,MAAA,iCACAC,KAAA,yCAIAC,MAAA,SAAA,SAAAC,GACA,MAAAA,KAEAC,QAAA,WACA,MAAA,QAEAC,WAAA,WACA,aAGAC,OAAA1F,KAAA,WACA8C,EAAA6C,GAAA,aL6EI/C,EAAqBnC,SAAW,WAAY,SAAU,WAAY,eAAgB,UAAW,cAAe,YAAa,YAAa,SAAU,OAAQ,QAAS,QKnLrKtB,EACAuB,OAAA,OACAM,WAAA,uBAAA4B,IAyGAzD,SC9GA,WACA,YAOA,SAAAoC,GAAAC,GACA,GAAAoE,GAAA,iBAEApE,GACAC,MAAAmE,GACAlE,OAAA,SACAC,IAAA,YACAkE,WAAAD,EAAA,QACAhE,MACAY,aAAA,iBAAA,eACAX,UAAA,6BAGAJ,MAAAmE,EAAA,SACAlE,OAAAkE,EACAjE,IAAA,UACAG,OACAgE,YACA3E,aAAA,OACAD,SAAA,gDACAF,YAAA,WAAA,SAAA,YAAA,SAAA6B,EAAAC,EAAAJ,GACAG,EAAA,WACAH,EAAAC,WAAA3C,KAAA,SAAA4B,GAEAA,GAAA,gBAAAA,EAAAmE,KAAA,MAAAnE,EAAAoE,SACAlD,EAAA6C,GAAA,kBAQAlE,MAAAmE,EAAA,YACAlE,OAAAkE,EACAjE,IAAA,sBACAG,OACAgE,YACA3E,aAAA,OACAD,SAAA,kJAIAe,SAEAgE,WAAA,eAAA,SAAA9D,GACA,MAAAA,GAAA8D,YAGAC,iBAAA,YAAA,kBAAA,SAAAD,EAAAE,GACA,MAAAA,GAAAC,KAAA/D,GAAA4D,IAAA3D,WAGA+D,kBAAA,mBAAA,SAAAC,GACA,MAAAA,GAAAC,+BAAAjE,cNyOIf,EAAYd,SAAW,kBMpS3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAOA,SAAAA,GAAAC,GACAA,EACAC,MAAA,wBACAC,OAAA,YACAC,IAAA,eACAC,MACAY,aAAA,eACAX,UAAA,+BAEAC,OACAC,gBACAb,SAAA,yDACAC,aAAA,OACAH,YAAA,WAAA,SAAA,YAAA,SAAA6B,EAAAC,EAAAJ,GACAG,EAAA,WACAH,EAAAC,WAAA3C,KAAA,SAAA4B,GAEAA,GAAA,gBAAAA,EAAAmE,KAAA,MAAAnE,EAAAoE,SACAlD,EAAA6C,GAAA,gBAOA1D,SAEAuE,SAAA,YAAA,SAAA9D,GACA,MAAAA,GAAAC,WAAA3C,KAAA,SAAA4B,GACA,MAAAA,UPwUIL,EAAYd,SAAW,kBO1W3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAOA,SAAAA,GAAAC,GACAA,EACAC,MAAA,wBACAC,OAAA,YACAC,IAAA,eACAC,MACAY,aAAA,gBACAX,UAAA,+BAEAC,OACAC,gBACAC,YAAA,0DACAb,aAAA,OAEAH,YAAA,YAAA,SAAA0B,GACA,GAAA5B,GAAAC,IACA2B,GAAAC,WAAA3C,KAAA,SAAA4B,GACAd,EAAA0F,QAAA5E,QAKAK,aR6XIV,EAAYd,SAAW,kBQxZ3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAOA,SAAAA,GAAAC,GACAA,EACAC,MAAA,sBACAC,OAAA,YACAC,IAAA,aACAkE,WAAA,4BACAjE,MAEAY,aAAA,cAAA,iBACAX,UAAA,+BAEAC,OACAC,gBACAC,YAAA,sDAEAhB,YAAA,eAAA,YAAA,SAAAyF,EAAA/D,GACAA,EAAAC,WAAA3C,KAAA,SAAA4B,GACA6E,EAAAC,KAAA,wBAAAC,IAAA/E,EAAAgF,YAAAD,UAGAxF,aAAA,WAIAM,MAAA,6BACAC,OAAA,qBACAC,IAAA,iDACAL,QACAuF,qBAAA,SAEA/E,OACAgF,iBACA5F,SAAA,4EACAC,aAAA,SAGAc,SAEA8E,oBAAA,YAAA,SAAArE,GACA,MAAAA,GAAAC,WAAA3C,KAAA,SAAA4B,GACA,MAAAA,UT+YIL,EAAYd,SAAW,kBS5b3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAqBA,SAAAyF,GAAAzD,EAAAjC,EAAAgE,EAAAE,EAAAC,EAAA1C,GACA,GAAAjC,GAAAC,IAEAD,GAAAmG,QAAAlE,EAAAkE,QACAnG,EAAAyC,KAAAA,EACAzC,EAAAQ,OAAAA,EAEAR,EAAAoG,QAAA,WACA5B,EAAAE,GAAAC,GAAAnD,SAAAtC,KAAA,WACA+C,EAAAoE,MAAArG,EAAAyC,SVweIyD,EAAWvG,SAAW,OAAQ,SAAU,OAAQ,UAAW,aAAc,gBUrf7EtB,QAAAuB,OAAA,OACAM,WAAA,yBAAAgG,MCnBA,WACA,YAQA,SAAAzF,GAAAC,GACAA,EACAC,MAAA,WACAC,OAAA,SACAC,IAAA,eACAC,MACAC,UAAA,uBAEAC,OACAgE,YACA9D,YAAA,yCACAhB,WAAA,oBACAG,aAAA,WAlBAhC,QACAuB,OAAA,OACA6B,OAAAhB,GAEAA,EAAAd,SAAA,qBCPA,SAAAtB,GACA,YAOA,SAAAiI,GAAAjF,EAAAkF,GACA,GAAAvG,GAAAC,IAEAsG,GAAAC,gBAAAnF,EAAArC,KAAAE,KAAA,SAAA0F,GACA5E,EAAAyG,MAAA,KACAzG,EAAA0G,SAAA,EACA1G,EAAAiF,IAAAL,EAAA9D,OAHAyF,SAIA,WACAvG,EAAAyG,MAAA,UZ0iBIH,EAAkB3G,SAAW,eAAgB,QYvjBjDtB,EACAuB,OAAA,OACAM,WAAA,oBAAAoG,IAeAjI,SCpBA,WACA,YASA,SAAAoC,GAAAC,GACAA,EACAC,MAAA,iBACAC,OAAA,SACAC,IAAA,UACAC,MACAY,aAAA,kBACAX,UAAA,wBAEAC,OACAgE,YACA9D,YAAA,oDAIAP,MAAA,YACAC,OAAA,SACAC,IAAA,kBACAC,MACAC,UAAA,wBAEAC,OACAgE,YACA9D,YAAA,2CACAhB,WAAA,qBACAG,aAAA,Wb8iBII,EAAYd,SAAW,kBa9kB3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,SAAApC,GACA,YAOA,SAAAsI,GAAA5E,EAAAV,EAAAa,EAAAC,EAAAwD,GASA,QAAAnD,KACAxC,EAAAyC,KAAA,GAAAP,GACAlC,EAAAyC,KAAAW,KAAApD,EAAAwE,KAAAnD,EAAAmD,KACAxE,EAAA4G,gBAAA,GAEAjE,IAoBA,QAAAA,KACA3C,EAAAyC,KAAAG,SACA5C,EAAAyC,KAAAG,WAEA5C,EAAAyC,KAAAI,OACA7C,EAAAyC,KAAAG,OAAAE,KAAA9C,EAAAyC,KAAAI,MAtCA,GAAA7C,GAAAC,IAEA8B,GAAA,WACA1D,EAAA0E,QAAA,2BAAAC,UAGAhD,EAAAiD,KAAA,SAUAT,IAGAxC,EAAAkD,KAAA,WACAlD,EAAAyC,KAAAoE,kBAAA7G,EAAA4G,gBACAjB,EAAAc,MAAA,kCACAzG,EAAA8G,OAGA9G,EAAAyC,KAAAsE,YAAA7H,KAAA,SAAA4B,GACAd,EAAA0G,SAAA,EACAlE,MAJAmD,EAAAc,MAAA,0BAmBAzG,EAAAwD,cAAA,WACAxD,EAAAyC,KAAAG,QAAAa,UAAA,IAGAzD,EAAAgH,eAAA9E,EdqkBIyE,EAAmBhH,SAAW,WAAY,eAAgB,UAAW,cAAe,gBcznBxFtB,EACAuB,OAAA,OACAM,WAAA,qBAAAyG,IAqDAtI,SC1DA,WACA,YAQA,SAAAoC,GAAAC,GACAA,EACAC,MAAA,kBACAC,OAAA,SACAC,IAAA,wBACAC,MACAC,UAAA,mBAEAC,OACAgE,YACA9D,YAAA,kDACAhB,WAAA,0BACAG,aAAA,WAIAM,MAAA,oBACAC,OAAA,SACAC,IAAA,8BACAC,MACAC,UAAA,mBAEAC,OACAgE,YACA9D,YAAA,oDACAhB,WAAA,4BACAG,aAAA,WAhCAhC,QACAuB,OAAA,OACA6B,OAAAhB,GAEAA,EAAAd,SAAA,qBCPA,SAAAtB,GACA,YAOA,SAAA4I,GAAAlF,EAAAwE,GACA,GAAAvG,GAAAC,IAEA8B,GAAA,WACA1D,EAAA0E,QAAA,2BAAAC,UAGAhD,EAAAkH,UAAA,SAAAC,GACAZ,EAAAa,kBAAAD,GAAAjI,KAAA,WACAc,EAAA0G,SAAA,KhBktBIO,EAAwBtH,SAAW,WAAY,QgBhuBnDtB,EACAuB,OAAA,OACAM,WAAA,0BAAA+G,IAiBA5I,SCtBA,SAAAA,GACA,YAOA,SAAAgJ,GAAAtF,EAAAC,EAAAX,EAAAsE,EAAAY,GACA,GAAAvG,GAAAC,IAEA8B,GAAA,WACA1D,EAAA0E,QAAA,2BAAAC,UAGAhD,EAAAkD,KAAA,WACAlD,EAAAsH,cAAAtH,EAAA4G,gBACAjB,EAAAc,MAAA,kCAEAF,EAAAgB,qBACAJ,MAAA9F,EAAA8F,MACAnI,IAAAqC,EAAArC,IACAsI,YAAAtH,EAAAsH,cACApI,KAAA,WACA8C,EAAA6C,GAAA,WjBouBIwC,EAA0B1H,SAAW,WAAY,SAAU,eAAgB,eAAgB,QiBzvB/FtB,EACAuB,OAAA,OACAM,WAAA,4BAAAmH,IAyBAhJ,SC9BA,WACA,YAOA,SAAAoC,GAAAC,GACAA,EACAC,MAAA,kBACAC,OAAA,SACAC,IAAA,cACAC,MACAC,UAAA,+BAEAC,OACAgE,YAEA9E,YAAA,SAAA,YAAA,SAAA8B,EAAAJ,GACAA,EAAA4F,kBACA5F,EAAAC,WAAA3C,KAAA,SAAA4B,GACAA,GAAA,gBAAAA,EAAAmE,KAAA,kBAAAnE,EAAAmE,IACAjD,EAAA6C,GAAA,sBACA,iBAAA/D,EAAAmE,IACAjD,EAAA6C,GAAA,wBAEA7C,EAAA6C,GAAA,UAIA7C,EAAA6C,GAAA,mBAGAxE,aAAA,WAIAM,MAAA,aACAC,OAAA,SACAmE,WAAA,qBACAlE,IAAA,cACAC,MACAY,aAAA,sBACAX,UAAA,+BAEAC,OACAgE,YACA9D,YAAA,uDACAb,aAAA,WlB4uBII,EAAYd,SAAW,kBkB1xB3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAQA,SAAAA,GAAAC,GACAA,EAAAC,MAAA,UACAC,OAAA,SACAE,MACAY,aAAA,uBAEAV,OACAgE,YACA9E,WAAA,uBAdA7B,QACAuB,OAAA,OACA6B,OAAAhB,GAEAA,EAAAd,SAAA,qBCPA,WACA,YAMA,SAAA8H,GAAAzF,EAAAuE,GACAA,EAAAmB,SAEA1F,EAAA6C,GAAA,iBpBo2BI4C,EAAiB9H,SAAW,SAAU,QoB32B1CtB,QAAAuB,OAAA,OACAM,WAAA,mBAAAuH,MCJA,WACA,YAEApJ,SAAAuB,OAAA,OACAO,UAAA,mBACAe,YAAA,sEACAb,aAAA,OACAC,UACAoF,QAAA,IACAiC,KAAA,UCTA,WACA,YAmBA,SAAAC,GAAAC,EAAAlC,GASA,QAAAmC,KACA9H,EAAA+H,QAAAC,aACAhI,EAAA+H,QAAAjF,MACA9C,EAAA+H,QAAAC,WAAAhI,EAAAiI,kBAAA,IAAAjI,EAAA+H,QAAAjF,KACA9C,EAAAkI,eAAAlI,EAAA+H,QAAAC,YAEAhI,EAAA+H,QAAAC,WAAA,MAKA,QAAAG,KACAnI,EAAAoI,kBAsBA,QAAAC,GAAAC,EAAAC,GAKA,MAFAD,GAAAE,iBAAA,GAAAC,MACAH,EAAAI,KAAAH,EACAD,EAGA,QAAAK,GAAAC,EAAAxF,GAOA,IAAA,GALAyF,GAAAC,KAAAF,EAAAG,MAAA,KAAA,IAGAC,EAAA,GAAAC,aAAAJ,EAAAK,QACAC,EAAA,GAAAC,YAAAJ,GACAK,EAAA,EAAAA,EAAAR,EAAAK,OAAAG,IACAF,EAAAE,GAAAR,EAAAS,WAAAD,EAIA,OAAA,IAAAE,OAAAP,IAAA5F,KAAAA,IA7DA,GAAApD,GAAAC,IACAD,GAAAwJ,aAAA,EACAxJ,EAAAkI,eAAA,GACAlI,EAAAyJ,QAAA,GAEA3B,IAiBA9H,EAAA0J,YAAA,SAAAC,GACA,KAAAA,GAAA,CACA,GAAAA,EAAAC,WAAA,OAAA,CACAD,GAAAA,EAAAE,aAEA,OAAA,GAGA7J,EAAA8J,eAAA,WACA9J,EAAA+H,QAAAtE,UAAA,EACAzD,EAAA+H,QAAAC,WAAA,KACAhI,EAAA+H,QAAAjF,KAAA,KACA9C,EAAA+H,QAAAgC,gBAAA,KACA/J,EAAAkI,eAAA,GAGAlI,EAAAwD,eAAAZ,OAAA5C,EAAA+H,WA0BA/H,EAAAgK,eAAA,SAAAC,EAAAN,GACA3J,EAAAwJ,aAAA,EACAxJ,EAAA+H,QAAAtE,UAAA,EACAwG,GAAAA,EAAAf,SAEAlJ,EAAA+H,QAAAjF,KAAA,KACA9C,EAAAkK,gBAAA,EAEAP,EAAAQ,aAAA,gBAAA,GAGAtC,EAAAuC,QACAvJ,IAAA,0BACAC,MACAuJ,KAAAhC,EAAAM,EAAAsB,EAAA,aAAAjK,EAAAyJ,QAAAf,MACA4B,IAAA,oBAEAC,OAAA,SACA7D,QAAA,SAAA8D,GACAxK,EAAAkK,eAAA,KACAlK,EAAA+H,QAAAgC,gBAAAS,EAAAC,IACAzK,EAAA+H,QAAAjF,KAAA9C,EAAAyJ,QAAAf,KACAiB,EAAAQ,aAAA,gBAAA,GACAhC,MACA1B,MAAA,SAAA3F,GACAd,EAAAkK,eAAA,KACAP,EAAAQ,aAAA,gBAAA,GACAnK,EAAA8J,iBACAhJ,GAAA,sBAAAA,EAAA2J,IACA9E,EAAAc,MAAA,0BAAAiE,QAAA1K,EAAAyJ,QAAAf,OAEA/C,EAAAc,MAAA,6BAMAzG,EAAA2K,YAAA,WACA,GAAAC,GAAA5K,EAAA4K,OAAA5K,EAAA4K,OAAA,EACAC,UAAAC,eAAA,YAAAF,GAAArK,SAGAP,EAAA+K,QAAA,SAAAd,GACAjK,EAAAyJ,QAAAQ,EAAA,GACAjK,EAAAwJ,aAAA,GtBywBI5B,EAAajI,SAAW,SAAU,gBsBx4BtCtB,QAAAuB,OAAA,OACAO,UAAA,gBACAG,UACAyH,QAAA,IACA6C,OAAA,IACAI,eAAA,IACA/C,kBAAA,IACAgD,kBAAA,IACA7C,gBAAA,IACA5E,cAAA,KAEAtC,YAAA,+DACAb,aAAA,OACAH,WAAA0H,OChBA,WACA,YAIA,SAAAhF,KACA,OACAsI,SAAA,IACAC,OACApD,QAAA,IACA6C,OAAA,IACAQ,aAAA,IACAJ,eAAA,IACA/C,kBAAA,IACAgD,kBAAA,IACA7C,gBAAA,IACA5E,cAAA,IACA6H,QAAA,IACA5E,MAAA,KAEAvF,YAAA,kDACAb,aAAA,OACAiL,kBAAA,EACApL,WAAA,oBApBA7B,QAAAuB,OAAA,OAAA2L,UAAA,SAAA3I,MCHA,WACA,YAKA,SAAA4I,GAAAzJ,EAAA8F,EAAAlC,GAMA,QAAAmC,KACA9H,EAAA+H,QAAAC,aACAhI,EAAA+H,QAAAjF,KACA9C,EAAA+H,QAAAC,WAAAhI,EAAAiI,kBAAA,MAAAjI,EAAA+H,QAAAjF,KAEA9C,EAAA+H,QAAAC,WAAA,MAIA,OAAAhI,EAAAqL,SAAAI,SAAAzL,EAAAqL,UACArL,EAAAqL,SAAA,GAIA,QAAAlD,KACAnI,EAAAoI,kBAqBA,QAAAsD,GAAArB,GACA,MAAAA,GACAA,EAAAjH,KAAAuI,QAAA,aACA5J,EAAA,WACA,GAAA6J,GAAA,GAAAC,WACAD,GAAAE,cAAAzB,GACAuB,EAAAG,OAAA,SAAAC,GACAjK,EAAA,WACA/B,EAAA+H,QAAAC,WAAAgE,EAAAC,OAAArH,YAhDA,GAAA5E,GAAAC,IAEA6H,KAoBA9H,EAAA0J,YAAA,SAAAC,GACA,KAAAA,GAAA,CACA,GAAAA,EAAAC,WAAA,OAAA,CACAD,GAAAA,EAAAE,aAEA,OAAA,GAGA7J,EAAA8J,eAAA,WACA9J,EAAA+H,QAAAtE,UAAA,EACAzD,EAAA+H,QAAAC,WAAA,KACAhI,EAAA+H,QAAAjF,KAAA,KACA9C,EAAA+H,QAAAgC,gBAAA,KAGA/J,EAAAwD,eAAAZ,OAAA5C,EAAA+H,WAmBA/H,EAAAgK,eAAA,SAAAC,EAAAN,EAAAiB,GACA5K,EAAA+H,QAAAtE,UAAA,EACAwG,GAAAA,EAAAf,SAEAlJ,EAAA+H,QAAAjF,KAAA,KACA9C,EAAAkK,gBAAA,EAEAP,EAAAQ,aAAA,gBAAA,GAGAuB,EAAAzB,EAAA,IAGApC,EAAAuC,QACAvJ,IAAA,0BACAC,MACAuJ,KAAAJ,EAAA,GACAK,IAAA,oBAEAC,OAAA,SACA7D,QAAA,SAAA8D,GACAxK,EAAAkK,eAAA,KACAlK,EAAA+H,QAAAgC,gBAAAS,EAAAC,IACAzK,EAAA+H,QAAAjF,KAAAmH,EAAA,GAAAvB,KACAiB,EAAAQ,aAAA,gBAAA,GACAhC,MACA1B,MAAA,SAAA3F,GACAd,EAAAkK,eAAA,KACAP,EAAAQ,aAAA,gBAAA,GACAnK,EAAA8J,iBACAhJ,GAAA,sBAAAA,EAAA2J,IACA9E,EAAAc,MAAA,0BAAAiE,QAAAT,EAAA,GAAAvB,OAEA/C,EAAAc,MAAA,6BAMAzG,EAAA2K,YAAA,WACAE,SAAAC,eAAA,YAAA9K,EAAA4K,QAAArK,SxB28BIiL,EAAiB7L,SAAW,WAAY,SAAU,gBwBhjCtDtB,QAAAuB,OAAA,OAAAM,WAAA,mBAAAsL,MCHA,WACA,YAIA,SAAAU,KACA,OACAhB,SAAA,KACAC,OACA5J,GAAA,IACAmJ,QAAA,IACAX,gBAAA,IACAoC,OAAA,IACA1F,MAAA,IACA5F,IAAA,IACAa,YAAA,IACA0K,WAAA,KAEAlL,YAAA,2DACAb,aAAA,OACAiL,kBAAA,EACApL,WAAA,wBAlBA7B,QAAAuB,OAAA,OAAA2L,UAAA,aAAAW,MCHA,WACA,YAKA,SAAAG,GAAAxE,EAAAlC,GAUA,QAAAyE,KACAkC,WAAA,WACAjO,QAAA0E,QAAA,SAAA/C,EAAAuB,IAAAgL,QAAA,UACA,GAGA,QAAA7C,GAAAC,GACA,KAAAA,GAAA,CACA,GAAAA,EAAAC,WACA,OAAA,CACAD,GAAAA,EAAAE,aAEA,OAAA,EAGA,QAAA2C,GAAAvC,EAAAN,GACA8C,QAAAC,IAAA/C,GAEAM,GAAAA,EAAAf,SACAlJ,EAAA2M,iBAAA,EACA3M,EAAA0K,QAAAT,EAAA,GAAAvB,KACAiB,EAAAQ,aAAA,iBAAA,GACAtC,EAAAuC,QACAvJ,IAAA,0BACAC,MACAuJ,KAAAJ,EAAA,GACAK,IAAAtK,EAAAmM,QAEA5B,OAAA,SACA7D,QAAA,SAAA8D,GACAiC,QAAAC,IAAA,kBACA1M,EAAA2M,iBAAA,EACA3M,EAAA+J,gBAAAS,EAAAC,IACAd,EAAAQ,aAAA,iBAAA,GAEAnK,EAAAoM,YACApM,EAAAoM,WAAApM,EAAA+J,gBAAA/J,EAAA0K,WAGAjE,MAAA,SAAA3F,GACA2L,QAAAC,IAAA,kBACA1M,EAAA2M,iBAAA,EACA3M,EAAA0K,QAAA,KACAf,EAAAQ,aAAA,iBAAA,GACArJ,GAAA,sBAAAA,EAAA2J,IACA9E,EAAAc,MAAA,0BAAAiE,QAAAT,EAAA,GAAAvB,OAEA/C,EAAAc,MAAA,4BAMA,QAAAmG,KACA5M,EAAA0K,QAAA,KA/DA,GAAA1K,GAAAC,IAEAD,GAAAwM,gBAAAA,EACAxM,EAAA4M,gBAAAA,EAEA5M,EAAA0J,YAAAA,EAEA1J,EAAAoK,OAAAA,E1B+qCIiC,EAAqB1M,SAAW,SAAU,gB0B1rC9CtB,QAAAuB,OAAA,OAAAM,WAAA,uBAAAmM,MCHA,WACA,YAIA,SAAAQ,KAEA,OACA3B,SAAA,KACAC,OACAT,QAAA,IACA7J,IAAA,IACAiM,UAAA,KAEA5L,YAAA,sDACAb,aAAA,OACAiL,kBAAA,EACApL,WAAA,sBAdA7B,QAAAuB,OAAA,OAAA2L,UAAA,WAAAsB,MCHA,WACA,YAIA,SAAAE,KAKA,QAAAC,KACAC,OAAA5I,KAAArE,EAAAa,IAAAb,EAAA0K,QAAA,UALA,GAAA1K,GAAAC,IAEAD,GAAAgN,iBAAAA,EALA3O,QAAAuB,OAAA,OAAAM,WAAA,qBAAA6M,MCHA,SAAA1O,GACA,YAOA,SAAA6O,GAAA9L,EAAAY,EAAAmL,GACA,GAAAnN,GAAAC,IAEAD,GAAAoN,cAEApN,EAAAqN,QACAC,SAAA,EACAC,OAAA,KACAC,MAAA,KACAC,UACA7J,eACA8J,QAAA,KACAC,IAAA,MAGAR,EAAAS,OAAA,WACA,MAAA5N,GAAAqN,QACA,SAAAQ,EAAAC,GACAD,EAAAN,SAAAO,EAAAP,QAAAM,EAAAL,QAAAM,EAAAN,OACAK,EAAAJ,OAAAvE,SAAA4E,EAAAL,OAAAvE,QACA2E,EAAAjK,YAAAsF,SAAA4E,EAAAlK,YAAAsF,QAAA2E,EAAAH,UAAAI,EAAAJ,SACAG,EAAAF,MAAAG,EAAAH,MAGA3N,EAAAqN,OAAAU,KAAA,GACA/N,EAAAqN,OAAAW,KAAA,EACA5M,EAAA6M,gBAAAjO,EAAAqN,QAAA7L,SAAAtC,KAAA,SAAA4B,GACAd,EAAAoN,WAAAtM,EAAA+C,aAEA,GAEA7D,EAAAkO,MAAA,SAAA3M,GACAS,EAAA6C,GAAA,iBAAAtD,GAAAA,KAKAvB,EAAAmO,SAAA,EACAnO,EAAAoO,QAAA,EAEApO,EAAAqN,OAAAU,KAAA,GACA/N,EAAAqN,OAAAW,KAAA,EAEAhO,EAAAqO,OAAA,WACArO,EAAAmO,UACAnO,EAAAmO,SAAA,EACA/M,EAAA6M,gBAAAjO,EAAAqN,QAAA7L,SAAAtC,KAAA,SAAA4B,GACA,IAAA,GAAAuI,GAAA,EAAAA,GAAAvI,EAAA+C,QAAAqF,OAAA,EAAAG,IACArJ,EAAAoN,WAAAkB,KAAAxN,EAAA+C,QAAAwF,GAEArJ,GAAAqN,OAAAW,MAAA,EACAhO,EAAAmO,SAAA,EACArN,EAAA+C,QAAAqF,OAAAlJ,EAAAqN,OAAAU,OAAA/N,EAAAoO,QAAA,O7BuvCIlB,EAAuBvN,SAAW,OAAQ,SAAU,U6BhzCxDtB,EACAuB,OAAA,OACAM,WAAA,yBAAAgN,IA6DA7O,SClEA,WACA,YAcA,SAAA6H,GAAA3H,EAAA0D,GACA,GAAAjC,GAAAC,IAGAD,GAAAuO,KAAA,WACAtM,EAAAuM,SACAvM,EAAAkE,UAEA5H,EAAAgQ,Q9Bi2CIrI,EAAWvG,SAAW,aAAc,gB8Br3CxCtB,QACAuB,OAAA,OACAO,UAAA,WACAe,YAAA,yDACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACAmO,QAAA,IACAxL,KAAA,UCXA,WACA,YAeA,SAAAyL,KACA,GAAA1O,GAAAC,IAEAD,GAAA2O,UACA,cAAA3O,EAAA4O,QAAAC,QACA,yBAAA7O,EAAA4O,QAAAC,QACA,2BAAA7O,EAAA4O,QAAAC,OAEA7O,EAAA8O,SACA,cAAA9O,EAAA4O,QAAAC,QACA,eAAA7O,EAAA4O,QAAAC,QACA,cAAA7O,EAAA4O,QAAAC,OAxBAxQ,QACAuB,OAAA,OACAO,UAAA,kBACAe,YAAA,4DACAhB,WAAAwO,EACArO,aAAA,OACAC,UACAoF,QAAA,IACAkJ,QAAA,UCXA,WACA,YAcA,SAAAG,KACA,GAAA/O,GAAAC,KACA+O,EAAA,GAAAvG,MACAwG,EAAA,GACAD,GAAAE,aAAA,GACAD,GAAAD,EAAAE,aAEAD,EAAAD,EAAAE,aAEAlP,EAAAD,SAAA+F,cACA9F,EAAAmP,IAAAH,EAAAI,WAAAC,SAAArP,EAAAD,SAAA+F,YAAAD,IAAAyJ,UAAA,EAAA,IAAAN,EAAAO,oBAAA,GAAA,IAAAN,GAtBA5Q,QACAuB,OAAA,OACAO,UAAA,YACAe,YAAA,+CACAhB,WAAA6O,EACA1O,aAAA,OACAC,UACAP,SAAA,UCVA,WACA,YAaA,SAAAyP,GAAAzN,EAAAwE,EAAAZ,GACA,GAAA3F,GAAAC,IAEA8B,GAAA,WACA1D,QAAA0E,QAAA,2BAAAC,UAGAhD,EAAAkD,KAAA,WACAlD,EAAA2J,KAAA8F,cAAAzP,EAAA4G,gBACAjB,EAAAc,MAAA,kCAEAF,EAAAmJ,eAAA1P,EAAA2J,MAAAzK,KAAA,WACAc,EAAA2J,KAAAgG,SAAA,GACA3P,EAAA2J,KAAA8F,YAAA,GACAzP,EAAA2J,KAAAiG,eACA5P,EAAA4G,gBAAA,MjC87CI4I,EAAmB7P,SAAW,WAAY,OAAQ,gBiCt9CtDtB,QACAuB,OAAA,OACAO,UAAA,kBACAe,YAAA,+CACAhB,WAAAsP,EACAnP,aAAA,YCVA,WACA,YAWA,SAAA6F,GAAA7E,EAAAwO,EAAAC,EAAAC,EACA9N,EAAAoD,EAAAzD,EAAAI,EAAAuE,GACA,GAAAvG,GAAAC,IAEA2B,GAAAC,WAAA3C,KAAA,SAAA4B,GACAd,EAAAiG,mBAAAnF,IAGAd,EAAAyC,KAAA4C,EACArF,EAAAgQ,OAAA3O,EAAA2M,KAAA3M,EAAA2M,KAAA,EACAhO,EAAAiQ,mBAAAJ,EAAA9B,KACA/N,EAAAkQ,kBAAA7O,EAAA6O,kBACAlQ,EAAAqN,QACArO,IAAAyM,OACAsC,KAAA,MAEA/N,EAAAmQ,YAAA,GAAAL,IACAM,MAAApQ,EAAAiQ,mBACAjC,KAAAhO,EAAAgQ,OACA3C,OAAArN,EAAAqN,OACAgD,SAAAC,SAAA,QACAP,EAAAQ,SAAAvQ,IAGAA,EAAAwQ,uBAAA,SAAAjP,GACAU,EAAAoC,MACAnD,YAAA,sDACAhB,WAAA,8BACAG,aAAA,OACAc,SAEAsB,KAAA,WACA,MAAA4C,GAAAC,KAAA/D,GAAAA,IAAAC,UAEAhB,OAAA,WACA,OACA8D,MAAA,qCACAC,KAAA,uCACAkM,SAAA,gBAKA7L,OAAA1F,KAAA,WACAc,EAAAmQ,YAAAO,YAIA1Q,EAAA2Q,uBAAA,SAAApP,GACA,MAAAvB,EAAAiG,mBACAM,EAAAqK,WAAA,EAAA,sBAEA5O,EAAA6C,GAAA,2BAAAM,UAAA5D,KlC+7CI2E,EAAWvG,SAAW,eAAgB,0BAA2B,gBAAiB,gBAAiB,eAAgB,kBAAmB,YAAa,SAAU,QkC5/CjKtB,QACAuB,OAAA,OACAO,UAAA,uBACAe,YAAA,kEACAhB,WAAAgG,EACA7F,aAAA,YCRA,WACA,YAeA,SAAA6F,GAAAlE,EAAAX,EAAAwO,EAAAC,EAAAC,EACA9N,EAAAoD,EAAAzD,EAAA4D,EAAAe,GAyBA,QAAAsK,KACA7O,EAAA6C,GAAA,gBACAqL,kBAAAlQ,EAAAoF,gBAAA7D,GACAmE,QAAA1F,EAAAiG,mBACA6K,iBAAA9Q,EAAA8Q,mBA5BA,GAAA9Q,GAAAC,IAEAD,GAAA8Q,kBAAA,EAEA9Q,EAAAyC,MAAA8C,iBAAAvF,EAAAuF,kBAEA3D,EAAAC,WAAA3C,KAAA,SAAA4B,GACAd,EAAAiG,mBAAAnF,IAGAd,EAAA6Q,QAAA,WACA,MAAA7Q,EAAAiG,mBACAM,EAAAqK,WAAA,EAAA,sBAEA5Q,EAAA8Q,iBACAtL,EAAAtC,KAAAlD,EAAAyC,KAAA8C,kBAAA/D,SAAAtC,KAAA,WACA2R,MAGAA,KnCkiDI3K,EAAWvG,SAAW,SAAU,eAAgB,0BAA2B,gBAAiB,gBAAiB,eAAgB,kBAAmB,YAAa,mBAAoB,QmCpkDrLtB,QACAuB,OAAA,OACAO,UAAA,0BACAe,YAAA,qEACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACA8E,gBAAA,IACAG,iBAAA,UCXA,WACA,YAWA,SAAAW,GAAAlE,EAAAX,EAAA0P,EAAAjB,EAAAC,EACA3O,EAAAQ,GACA,GAAA5B,GAAAC,IAEA2B,GAAAC,WAAA3C,KAAA,SAAA4B,GACAd,EAAAiG,mBAAAnF,IAGAd,EAAAyC,KAAArB,EACApB,EAAAA,YAAA,sBACAA,EAAAgQ,OAAA3O,EAAA2M,KAAA3M,EAAA2M,KAAA,EACAhO,EAAAiQ,mBAAAc,EAAAhD,KACA/N,EAAAqN,QACArO,IAAAyM,QAEAzL,EAAAmQ,YAAA,GAAAL,IACAM,MAAApQ,EAAAiQ,mBACAjC,KAAAhO,EAAAgQ,OACA3C,OAAArN,EAAAqN,OACAgD,SAAAW,OAAA,QACAjB,EAAAQ,SAAAvQ,IpC6lDIkG,EAAWvG,SAAW,SAAU,eAAgB,iCAAkC,gBAAiB,gBAAiB,OAAQ,aoC1nDhItB,QACAuB,OAAA,OACAO,UAAA,kBACAe,YAAA,yDACAhB,WAAAgG,EACA7F,aAAA,YCRA,WACA,YAMA,SAAA4Q,GAAAC,GACA,MAAAA,GAAAC,YAAA,cACAjO,MACAqH,OAAA,OACA1J,IAAA,qBACAuQ,SAAA,GAEA1N,SACA6G,OAAA,MACA1J,IAAA,6BACAuQ,SAAA,GAEAC,eACA9G,OAAA,MACA1J,IAAA,kCACAuQ,SAAA,GAEAE,QACA/G,OAAA,OACA1J,IAAA,4BACAuQ,SAAA,GAEAG,kBACAhH,OAAA,OACA1J,IAAA,qCACAL,QACAe,GAAA,QAGAiQ,kBACAjH,OAAA,OACA1J,IAAA,qCACAL,QACAe,GAAA,UrC4nDI0P,EAAQtR,SAAW,kBqCjqDvBtB,QAAAuB,OAAA,OACA6R,QAAA,UAAAR,MCJA,WACA,YAEA5S,SACAuB,OAAA,OACAO,UAAA,gBACAC,SAAA,2GACAC,aAAA,OACAC,UACAuO,OAAA,IACA6C,QAAA,UCVA,WACA,YAqBA,SAAAC,GAAAxE,EAAAyE,EAAA7P,EAAAvD,EAAAwD,EAAA6P,EACAZ,EAAAa,EAAA7P,EAAAL,EAAA2E,EAAAZ,GAgBA,QAAAoM,GAAAC,EAAAC,GACA9E,EAAA+E,mBAAA,EACA/E,EAAAgF,mBAAA,EACAC,EAAAJ,EAAAC,GAqDA,QAAAI,GAAAC,GACA,MAAAA,GACAjU,QAAA0E,QAAA,aAAAwP,aAAA,cAAAD,GAIA,QAAAE,MAWA,QAAAC,GAAAC,GACAb,EAAAc,UAAAC,WAAAL,aAAA,gBACAV,EAAAc,UAAAC,WAAAL,aAAA,iBAAAG,GAOA,QAAAG,GAAAP,GACA,MAAAA,IACAA,EAAAQ,SACAR,EAAAS,gBAAA5F,EAAA6F,oBACAV,EAAAW,YAAA9F,EAAA6F,sBAEAV,EAAAS,gBAAA5F,EAAA+F,kBACAZ,EAAAW,YAAA9F,EAAA+F,oBAKA,QAAAC,GAAA3I,EAAAwH,EAAAC,GACA,GAAAmB,GAAA5I,EAAA3G,OACA,IAAAuP,EAAAlK,OAAA,CAGA,IAAA,GAFAmK,GAAA,KACAC,EAAA,KACAjK,EAAA,EAAAA,EAAA+J,EAAAlK,OAAAG,IAAA,CACAgK,EAAA,GAAA5K,MAAA,IAAA2K,EAAA/J,GAAAkK,QAEApG,EAAA+E,mBAAA,MAAA/E,EAAAqG,cAAAC,EAAAtG,EAAAqG,cAAAC,EAAAJ,MACAlG,EAAAqG,aAAA,GAAA/K,MAAA4K,EAAAK,WACAvG,EAAA+E,mBAAA,GAEAoB,EAAA,GAAA7K,MAAA,IAAA2K,EAAA/J,GAAAkK,MAAAI,IAEAxG,EAAAgF,mBAAA,MAAAhF,EAAAyG,cAAAH,EAAAtG,EAAAyG,cAAAH,EAAAH,MACAnG,EAAAyG,aAAA,GAAAnL,MAAA6K,EAAAI,WACAvG,EAAAgF,mBAAA,EAEA,IAAA0B,GAAA,EACAR,GAAAS,IACAD,EAAA,kBAEAT,EAAA/J,GAAAyJ,QACA3F,EAAA4G,OAAAzF,MACA0D,MAAAqB,EACApB,IAAAqB,EACAP,gBAAA5F,EAAA6F,oBACAC,YAAA9F,EAAA6F,oBACAF,QAAAM,EAAA/J,GAAAyJ,QACAvR,GAAA6R,EAAA/J,GAAA9H,GACAsS,UAAAA,IAGA1G,EAAA4G,OAAAzF,MACA0D,MAAAqB,EACApB,IAAAqB,EACAP,gBAAA5F,EAAA+F,kBACAD,YAAA9F,EAAA+F,kBACAJ,QAAAM,EAAA/J,GAAAyJ,QACAvR,GAAA6R,EAAA/J,GAAA9H,GACAsS,UAAAA,IAKA,MAAA7T,EAAAiG,qBACAuM,IACAC,EAAAtF,EAAA4G,UAOA,QAAAC,GAAAxJ,EAAAwH,EAAAC,EAAAa,GACA9S,EAAAiU,eAOA,KAAA,GANAb,GAAA5I,EAAA3G,QACAwP,EAAA,KACAC,EAAA,KACAP,EAAA,KACAE,EAAA,KACAiB,KACA7K,EAAA,EAAAA,EAAA+J,EAAAlK,OAAAG,IAAA,CAqBA,OApBAgK,EAAA,GAAA5K,MAAA,IAAA2K,EAAA/J,GAAAkK,QAEApG,EAAA+E,mBAAA,MAAA/E,EAAAqG,cAAAC,EAAAtG,EAAAqG,cAAAC,EAAAJ,MACAlG,EAAAqG,aAAA,GAAA/K,MAAA4K,EAAAK,WACAvG,EAAA+E,mBAAA,GAEAoB,EAAA,GAAA7K,MAAA,IAAA2K,EAAA/J,GAAAkK,MAAAI,IAEAxG,EAAAgF,mBAAA,MAAAhF,EAAAyG,cAAAH,EAAAtG,EAAAyG,cAAAH,EAAAH,MACAnG,EAAAyG,aAAA,GAAAnL,MAAA6K,EAAAI,WACAvG,EAAAgF,mBAAA,GAIAnS,EAAAiU,aAAAb,EAAA/J,GAAAwF,QACA7O,EAAAiU,aAAAb,EAAA/J,GAAAwF,QAAA7O,EAAAiU,aAAAb,EAAA/J,GAAAwF,QAAA,EAEA7O,EAAAiU,aAAAb,EAAA/J,GAAAwF,QAAA,EAGAuE,EAAA/J,GAAAwF,QACA,IAAA,gBACAkE,EAAA5F,EAAAgH,4BACAlB,EAAA9F,EAAAgH,2BACA,MACA,KAAA,aACApB,EAAA5F,EAAAiH,yBACAnB,EAAA9F,EAAAiH,wBACA,MACA,KAAA,gBACA,IAAA,YACA,IAAA,uBACA,IAAA,yBACArB,EAAA5F,EAAAkH,sEACApB,EAAA9F,EAAAkH,qEACA,MACA,KAAA,aACAtB,EAAA5F,EAAAmH,yBACArB,EAAA9F,EAAAmH,wBACA,MACA,KAAA,YACAvB,EAAA5F,EAAAoH,wBACAtB,EAAA9F,EAAAoH,uBACA,MACA,KAAA,YACAxB,EAAA5F,EAAAqH,wBACAvB,EAAA9F,EAAAqH,wBAKA,IAAA,GAAAC,GAAA,EAAAA,EAAAtH,EAAA4G,OAAA7K,OAAAuL,IACA,MAAArB,EAAA/J,GAAAqL,YAAAvH,EAAA4G,OAAAU,GAAAlT,KAAA6R,EAAA/J,GAAAqL,WAAAnT,IACA4L,EAAA4G,OAAAY,OAAAF,EAAA,EAIA,IAAAG,GACAC,EACAhB,EAAA,EAEAgB,GADA,kBAAA7U,EAAAiG,mBAAAhB,IACAmO,EAAA/J,GAAAyL,OAEA1B,EAAA/J,GAAAtJ,SAGA6U,EAAAC,EAAA7D,OACA4D,GAAAC,EAAAE,UAAA,IAAAF,EAAAE,UAAA,GAGA1B,EAAAS,IAAA,cAAAV,EAAA/J,GAAAwF,QAAA,gBAAA7O,EAAAiG,mBAAAhB,OACA4O,EAAA,kBAGAK,EAAA5F,MACA0D,MAAAqB,EACApB,IAAAqB,EACAP,gBAAAA,EACAE,YAAAA,EACAH,QAAAA,EACAvR,GAAA6R,EAAA/J,GAAA9H,GACAsN,OAAAuE,EAAA/J,GAAAwF,OACAmG,eAAA5B,EAAA/J,GAAA2L,eACAC,aAAA7B,EAAA/J,GAAA4L,aACApB,UAAAA,EACAvP,MAAAsQ,IAIAzH,EAAA4G,OAAAzF,KAAA4G,MAAA/H,EAAA4G,OAAAG,GAEA1B,IACAC,EAAAtF,EAAA4G,QAIA,QAAA3B,GAAAJ,EAAAC,GACA9E,EAAA4G,UACAjC,EAAApO,SACAyR,YAAAnD,EAAAoD,SACAC,SAAApD,EAAAmD,SACAtC,QAAA,KACAvR,GAAAvB,EAAAsV,2BAAA/T,KACAC,SAAAtC,KACA,SAAAsL,GACA,MAAAxI,EAAAxB,OAAAuF,sBAAA,UAAA/D,EAAAxB,OAAAuF,sBACAoN,EAAA3I,EAAAwH,EAAAC,GAEA,MAAAjS,EAAAiG,mBACAgL,EAAAvN,SACAnC,GAAAvB,EAAAiG,mBAAA1E,GACA0D,IAAAjF,EAAAiG,mBAAAhB,IACAkQ,YAAAnD,EAAAoD,SACAC,SAAApD,EAAAmD,SACArP,qBAAA/D,EAAAxB,OAAAuF,uBACAvE,SAAAtC,KACA,SAAAsL,GACAwJ,EAAAxJ,EAAAwH,EAAAC,GAAA,GACAjS,EAAAmO,SAAA,GAEA,SAAA1H,GACAzG,EAAAyG,MAAAA,EAAA3F,KAAAyU,QACAvV,EAAAmO,SAAA,IAIAnO,EAAAmO,SAAA,GAGA,SAAA1H,GACAzG,EAAAyG,MAAAA,EAAA3F,KAAAyU,QACAvV,EAAAmO,SAAA,IA7SAhB,EAAA+F,kBAAA,UACA/F,EAAA6F,oBAAA,YACA7F,EAAAgH,4BAAA,OACAhH,EAAAiH,yBAAA,UACAjH,EAAAkH,sEAAA,UACAlH,EAAAmH,yBAAA,UACAnH,EAAAoH,wBAAA,UACApH,EAAAqH,wBAAA,SACA,IAAAb,GAAA,KAGA3T,EAAAC,IAQA,OAAA+B,EAAAxB,OAAAe,KACAvB,EAAAD,YACAC,EAAAD,SAAAwB,GAAAS,EAAAxB,OAAAe,IAGA,MAAAvB,EAAAiG,mBACArE,EAAAC,WAAA3C,KAAA,SAAA4B,GACAd,EAAAiG,mBAAAnF,EACAqM,EAAAqI,gBAAA,MAAAxV,EAAAiG,qBAGAkH,EAAAqI,iBAAA,EAGA,MAAAxT,EAAAxB,OAAAe,IACAvB,EAAAsV,2BAAAtV,EAAAD,SACAoN,EAAAsI,gBAAA,IAEAzV,EAAAsV,2BAAAtV,EAAAiG,mBACAkH,EAAAsI,gBAAA,EAGA,IAAAC,GAAA,YACA1V,GAAA2V,QACAD,EAAA,QAIA,IAAA5B,GAAA,GAAArL,MACAmN,EAAA,GAAAnN,KACAzI,GAAA6V,YACA7V,EAAA6V,UAAA7V,EAAA6V,UAAA,EACAD,EAAAE,SAAA9V,EAAA6V,YAEA7V,EAAA+V,SACAH,EAAAI,YAAAhW,EAAA+V,UAEA/V,EAAA6V,UAAA/B,EAAAmC,YACAL,EAAAI,YAAAlC,EAAAoC,cAAA,GAIA/I,EAAAlI,IAAAjF,EAAAsV,2BAAArQ,IACAkI,EAAApH,qBAAA/D,EAAAxB,OAAAuF,qBAEAoH,EAAA+E,mBAAA,EACA/E,EAAAgF,mBAAA,CA0BA,IAAAsB,GAAA,SAAAzE,GACA,MAAAA,GAAAE,aAAA,GAAAF,EAAAI,WAmEApP,GAAAiU,gBAkJA9G,EAAAgJ,oBAAA,WACAhJ,EAAAiJ,aAAA,EACAvD,EAAA1F,EAAAkJ,oBACAhE,EAAAlF,EAAAkJ,qBAGAlJ,EAAAmJ,eAAA,WACAxE,EAAAyE,gBACApB,YAAAhI,EAAA6E,MACAqD,SAAAlI,EAAA8E,IACA1Q,GAAAvB,EAAAsV,2BAAA/T,KACAC,SAAAtC,KAAA,SAAA4B,GACA6E,EAAAe,QAAA,oCAIAyG,EAAAqJ,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,eAAAD,EAAAvT,MAAA,SAAA+J,EAAApH,sBACA0Q,EAAArB,SAAAtB,GACA,kBAAA9T,EAAAiG,mBAAAhB,MACAkI,EAAA4G,OAAAzF,MACA0D,MAAAyE,EAAArB,SACAnD,IAAAwE,EAAAI,QAAAC,IAAA,KAAA,KAAA1B,SACArC,gBAAA5F,EAAA+F,kBACAD,YAAA9F,EAAA+F,oBAEApB,EAAA5O,MACAqQ,MAAAkD,EACA3D,SAAA,EACA/S,UAAAwB,GAAAvB,EAAAiG,mBAAA1E,GAAA6B,KAAApD,EAAAiG,mBAAA7C,QACA5B,SAAAtC,KAAA,WACA6S,EAAA4E,EAAA3E,MAAA2E,EAAA1E,OALAH,SAMA,WAEAC,EAAA4E,EAAA3E,MAAA2E,EAAA1E,SAOA9E,EAAA4J,kBAAA,SAAAC,EAAAL,EAAAC,GACA,IAAA5W,EAAA2V,QAEA,MAAA3V,EAAAiG,oBACAM,EAAAqK,WAAA,EAAA,sBAGA,MAAA5Q,EAAAiG,oBAEA,GAAA,kBAAAjG,EAAAiG,mBAAAhB,MAAA+R,EAAAlE,SAAAkE,EAAAhF,MAAAoD,SAAAtB,EACA7R,EAAAoC,MACAnD,YAAA,iDACAhB,WAAA,yBACAG,aAAA,OACAc,SAEAqD,MAAA,aAAA,SAAAsN,GACA,MAAAA,KAEApN,QAAA,WACA,MAAA,YAEAC,WAAA,WACA,OAAApD,GAAAyV,EAAAzV,KAEAf,OAAA,WACA,OACA8D,MAAA,uCACAC,KAAA,yCACAkM,SAAA,KAGAhO,KAAA,aAEAwU,cAAA,gBAGArS,OAAA1F,KAAA,WACA,IAAA,GAAAmK,GAAA,EAAAA,EAAA8D,EAAA4G,OAAA7K,OAAAG,IACA8D,EAAA4G,OAAA1K,GAAA9H,IAAAyV,EAAAzV,KACA4L,EAAA4G,OAAAY,OAAAtL,EAAA,GACAoJ,EAAAtF,EAAA4G,eAUA,CACA,GAAAiD,EAAAhF,MAAAoD,SAAAtB,IAAA,kBAAAkD,EAAAnI,SAAAmI,EAAAlE,SACA,MAEA,IAAA,MAAAkE,EAAAnI,QAAA,GAAAmI,EAAAlE,QACA,MAEA3F,GAAAkJ,mBAAAhY,QAAA0E,QAAA,aAAAwP,aAAA,eAAAyE,EAAAE,KAAA,GACA/J,EAAAkJ,mBAAAc,YAAAP,EAAA5E,MACA7E,EAAAkJ,mBAAAe,SAAAR,EAAA3E,IACA9E,EAAAkK,6BAAAL,EAAAE,IACAjV,EAAAoC,MACAnD,YAAA,4CACAhB,WAAA,yBACAG,aAAA,OACAc,SACAwD,WAAA,WACA,OACApD,GAAAyV,EAAAzV,GACA+V,MAAAtX,EAAAiG,mBAAAhB,IACAsS,SAAAP,EAAAnI,OACA2I,kBAAAR,EAAAhF,MAAAoD,SACAqC,iBAAAT,EAAA/E,IAAAmD,SACAsC,SAAA1X,EAAAiG,mBAAA1E,GACAoW,oBAAA3X,EAAAiG,mBAAA0R,oBACA1C,aAAA+B,EAAA/B,aACAD,eAAAgC,EAAAhC,iBAGAvS,KAAA,WACA,MAAAuU,IAGAY,cAAA,OAAA,SAAAxW,GACA,MAAA,OAAA4V,EAAAnI,OACAzN,EAAAyW,0BAAAtW,GAAAyV,EAAAzV,KAAAC,SAAAtC,KAAA,SAAA4B,GACA,MAAAA,KAGAM,EAAA0W,sBACAvW,GAAAyV,EAAAzV,GACA0D,IAAAjF,EAAAiG,mBAAAhB,MACAzD,SAAAtC,KAAA,SAAA4B,GACA,MAAAA,OAKAmW,eAAA,gBAAA,SAAAc,GACA,MAAAA,GAAAzS,KAAA/D,GAAA,MAAAC,SAAAtC,KAAA,SAAA4B,GACA,MAAAA,UAIA8D,OAAA1F,KAAA,WACA0C,EAAAC,UAAA,GAAA3C,KAAA,SAAA4B,GACAd,EAAAiG,mBAAA0R,oBAAA7W,EAAA6W,oBACA3X,EAAAiG,mBAAA+R,mBAAAlX,EAAAkX,qBAEAjG,EAAA6E,EAAA5E,MAAA4E,EAAA3E,SAMA9E,EAAA8K,YAAA,SAAAC,EAAAnV,EAAA6T,GACA7T,EAAAoV,MAAAC,cAAAF,EAAAG,QAAAC,8BAAA,IACA1G,EAAA7O,GAAAoK,IAGAA,EAAAoL,WAAA,SAAA3B,EAAA7T,GACA/C,EAAAmO,UACAnO,EAAAmO,SAAA,EACAhB,EAAA6E,MAAA4E,EAAA5E,MACA7E,EAAA8E,IAAA2E,EAAA3E,IACAF,EAAA6E,EAAA5E,MAAA4E,EAAA3E;AACA,SAAA2E,EAAA4B,aACAna,QAAA0E,QAAA,6BAAA0V,OAEApa,QAAA0E,QAAA,6BAAA2V,SAKAvL,EAAAwL,oBAAA,aAKAxL,EAAAyL,UACAC,UACAjD,YAAAA,EACAkD,OAAA,OACAC,UAAA,EACAC,YAAA,EACAtD,YAAAA,EACAuD,SAAA,QACAC,QAAA,QACAC,QAAA,QACAC,OAAA,KACAC,SAAA,EACAC,cAAA,EACAC,oBAAA,EACAC,QAAAC,KAAA,mBAAAC,OAAA,QAAAC,MAAA,2CACAC,WAAA,OACAC,gBAAA,OACArD,SAAArJ,EAAAqJ,SACAsD,WAAA3M,EAAA4J,kBACAgD,uBAAA,EACA9B,YAAA9K,EAAA8K,YACAM,WAAApL,EAAAoL,WACAI,oBAAAxL,EAAAwL,sBAKAxL,EAAAyL,SAAAC,SAAAmB,eACAC,UACAC,KAAA,yBACA3Z,MAAA,WACAwR,EAAA5E,EAAA6E,MAAA7E,EAAA8E,QAMA,MAAAjS,EAAAiG,oBAAA,kBAAAjG,EAAAiG,mBAAAhB,KAAAjF,EAAA2V,QACAxI,EAAAyL,SAAAC,SAAAE,UAAA,EACA1a,QAAA8b,OAAAhN,EAAAyL,SAAAC,SAAAmB,eACA1D,gBACA8D,KAAA5b,EAAA6b,QAAA,gCACA9Z,MAAA,WACA4M,EAAAmJ,sBvC8rCI3E,EAAmBhS,SAAW,SAAU,WAAY,WAAY,aAAc,SAAU,mBAAoB,UAAW,aAAc,eAAgB,YAAa,OAAQ,gBuCluD9KtB,QACAuB,OAAA,OACAO,UAAA,YACAe,YAAA,qDACAhB,WAAAyR,EACAtR,aAAA,OACAC,UACA2F,mBAAA,IACA0P,MAAA,IACAE,UAAA,IACAE,SAAA,UCjBA,WACA,YAMA,SAAAjE,GAAAZ,GACA,MAAAA,GAAAC,YAAA,kBACAjO,MACAqH,OAAA,OACA1J,IAAA,yBACAuQ,SAAA,GAEA1N,SACA6G,OAAA,MACA1J,IAAA,iCACAuQ,SAAA,GAEAkJ,UACA/P,OAAA,OACA1J,IAAA,kCACAuQ,SAAA,GAEAmJ,SACAhQ,OAAA,OACA1J,IAAA,kCACAuQ,SAAA,GAEAmF,gBACAhM,OAAA,OACA1J,IAAA,yCACAuQ,SAAA,KxC2vEIU,EAAWnS,SAAW,kBwCxxE1BtB,QAAAuB,OAAA,OACA6R,QAAA,aAAAK,MCJA,WACA,YAaA,SAAA0I,GAAAxY,EAAAD,EAAAwE,EAAAZ,EAAA8U,GACA,GAAAza,GAAAC,IAEAD,GAAA0a,QACA1a,EAAA2a,YAAA,EAEA3a,EAAA4a,MACA7Y,EAAA,WACA1D,QAAA0E,QAAA,8BAAAC,UAIAhD,EAAA6a,MAAA,WACAtU,EAAAsU,OACAC,SAAA9a,EAAA8a,SACAnL,SAAA3P,EAAA2P,SACAgL,WAAA3a,EAAA2a,aACAzb,KAAA,SAAA4B,GACAd,EAAA+a,qBAAA,EACA,eAAAja,EAAAmE,IACAjD,EAAA6C,GAAA4V,MAAA/J,QAAA,IAEA1O,EAAA6C,GAAA,qBAAA6L,QAAA,MATAnK,SAWA,WACAZ,EAAAc,MAAA,sCzC4xEI+T,EAAgB7a,SAAW,SAAU,WAAY,OAAQ,eAAgB,mByCh0E7EtB,QACAuB,OAAA,OACAO,UAAA,SACAe,YAAA,yCACAhB,WAAAsa,EACAla,UACAsa,KAAA,UCTA,WACA,YAcA,SAAA1U,GAAA7E,EAAAwO,EAAAC,EAAAC,EACA9N,EAAA+Y,GACA,GAAAhb,GAAAC,IAEAD,GAAAyC,KAAAuY,EACAhb,EAAAgQ,OAAA3O,EAAA2M,KAAA3M,EAAA2M,KAAA,EACAhO,EAAAiQ,mBAAAJ,EAAA9B,KAEA/N,EAAAqN,QACArO,IAAAyM,QAEAzL,EAAAA,YAAA,yBACAA,EAAAmQ,YAAA,GAAAL,IACAM,MAAApQ,EAAAiQ,mBACAjC,KAAAhO,EAAAgQ,OACA3C,OAAArN,EAAAqN,OACAgD,SAAAkD,MAAA,SACAxD,EAAAQ,SAAAvQ,IAGAA,EAAAwQ,uBAAA,SAAAjP,GACAU,EAAAoC,MACAnD,YAAA,sDACAhB,WAAA,8BACAG,aAAA,OACAc,SAEAsB,KAAA,WACA,MAAAuY,GAAA1V,KAAA/D,GAAAA,IAAAC,UAEAhB,OAAA,WACA,OACA8D,MAAA,4BACAC,KAAA,8BACAkM,SAAA,aAKA7L,OAAA1F,KAAA,WACAc,EAAAmQ,YAAAO,Y1C2zEIxK,EAAWvG,SAAW,eAAgB,0BAA2B,gBAAiB,gBAAiB,eAAgB,U0C/2EvHtB,QACAuB,OAAA,OACAO,UAAA,cACAe,YAAA,gDACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACAoF,QAAA,UCVA,WACA,YAKA,SAAA6F,KACA,OACA0P,QAAA,WACA/P,SAAA,IACAgQ,KAAA,SAAA/P,EAAAgQ,EAAAC,EAAArT,GAOA,QAAAsT,GAAAC,GACA,GAAAC,GAAApQ,EAAAqQ,MAAAJ,EAAAK,UAAAH,CAEA,OADAvT,GAAAoC,aAAA,SAAAoR,GACAA,EAAAD,EAAA7P,OATA1D,EAAA2T,SAAAC,QAAAN,GAEAlQ,EAAAyC,OAAAwN,EAAAK,OAAA,WACA1T,EAAA6T,cAAA7T,EAAA8T,gBAXAxd,QAAAuB,OAAA,OACA2L,UAAA,SAAAA,MCHA,WACA,YAWA,SAAAuQ,KACA,GAAAvQ,IACAwQ,SAAA,EACA7Q,SAAA,IACAhK,YAAA,2CACAiK,OACA6Q,MAAA,IACAC,SAAA,KAGA,OAAA1Q,GAdAlN,QACAuB,OAAA,OACA2L,UAAA,UAAAuQ,MCXA,WACA,YASA,SAAAI,GAAAC,GAEAA,EAAAC,UAAA,aAAA,iBAAA,YAAA,SAAAC,EAAAC,GAWA,MARAD,GAAA,UACAE,UAAA,wBACAC,WAAA,uCACAC,OAAA,WACAxc,KAAAyc,UAAAC,cAAA,aAAA,eAIAL,K7Cm9EIJ,EAAkBvc,SAAW,Y6Cr+EjCtB,QACAuB,OAAA,OACA6B,OAAAya,MCPA,WACA,YA8BA,SAAAhW,GAAAnE,GACA,GAAA/B,GAAAC,IAOA,QALAD,EAAA4c,UACA,OAAA,OAAA,UAAA,cACA,OAAA,SAGA5c,EAAAwE,MACA,IAAA,SACAxE,EAAA4c,QAAAtO,MAAA,UACA,MACA,KAAA,WACAtO,EAAA4c,QAAAtO,MAAA,KAAA,KAAA,MACAtO,EAAA4c,QAAAtO,MAAA,KAAA,OACAtO,EAAA4c,QAAAtO,MAAA,cAAA,gBAAA,eAAA,cAAA,SAAA,YACAtO,EAAA4c,QAAAtO,MAAA,eAIAvM,EAAA,WACA1D,QAAA0E,QAAA,gBAAA/C,EAAAuB,IAAAsb,KAAA,SAAA/b,GACA,GAAAiC,GAAA1E,QAAA0E,QAAAjC,EAAAmL,OACAnL,GAAAmL,OAAA6Q,UAAAC,SAAA,uBACAha,EAAAia,SAAA,SAEAja,EAAAka,YAAA,WAGA5e,QAAA0E,QAAA,gBAAA/C,EAAAuB,IAAAyB,MAAA,SAAAlC,GACAzC,QAAA0E,QAAAjC,EAAAmL,QAAAgR,YAAA,a9Cm9EI/W,EAAWvG,SAAW,Y8CngF1BtB,QACAuB,OAAA,OACAO,UAAA,YACAC,SAAA,8NAEAE,UACAiB,GAAA,IACAya,MAAA,IACAkB,MAAA,IACAC,SAAA,IACAC,SAAA,IACA5Y,KAAA,KAEAtE,WAAAgG,EACA7F,aAAA,YC3BA,WACA,YA8BA,SAAAgd,KACA,OACAtB,SAAA,EACA7Q,SAAA,IACAhL,WAAAgG,EACA7F,aAAA,OACAiL,kBAAA,EACApK,YAAA,2CACAiK,OACA5J,GAAA,IACAya,MAAA,IACAsB,YAAA,IACAjF,QAAA,IACAkF,SAAA,IACAxV,QAAA,IACAyV,SAAA,IACAC,OAAA,IACAze,IAAA,IACA0e,QAAA,IACAnT,OAAA,IACAoT,WAAA,IACAC,WAAA,IACAT,SAAA,IACAU,UAAA,IACAT,SAAA,IACAU,WAAA,IACA5c,YAAA,IACA6c,WAAA,MAKA,QAAA7X,KACA,GAAAlG,GAAAC,IAEAD,GAAAhB,MACAgB,EAAAhB,IAAA,UAGAgB,EAAA0d,UACA1d,EAAA0d,QAAA,UAGA1d,EAAAuK,SACAvK,EAAAuK,OAAA,SAGAvK,EAAA6d,YACA7d,EAAA6d,UAAA,GAGA7d,EAAA8d,aACA9d,EAAA8d,WAAA,SAGA9d,EAAAge,MAAA,WACAhe,EAAA+H,QAAA,MAGA/H,EAAAie,aAAA,WACAje,EAAA+H,QAAA,MAGA/H,EAAAke,WAAA,SAAAzb,GACAA,EAAAlB,KAAAvB,EAAAwd,WACAxd,EAAA+H,QAAAxG,GAAAkB,EAAAlB,KAIAvB,EAAAme,SAAA,SAAAra,GACA,GAAAtD,GAAAR,EAAA2d,WAAA3d,EAAA2d,aAGA,OAFAnd,GAAAR,EAAA8d,YAAAha,EAEA9D,EAAAud,SAAAvd,EAAAuK,QAAA/J,GAAAgB,SAAAtC,KAAA,SAAA4B,GACA,MAAAsd,OAAAhN,QAAAtQ,GACAA,EAEAA,EAAA+C,WAjFAxF,QACAuB,OAAA,OACA2L,UAAA,UAAA8R,MC7BA,WACA,YAgBAhf,SACAuB,OAAA,OACAO,UAAA,cACAe,YAAA,8CACAb,aAAA,OACAC,UACAiB,GAAA,IACAya,MAAA,IACA3D,QAAA,IACA6E,MAAA,IACAmB,OAAA,IACAX,QAAA,IACAY,OAAA,IACAnB,SAAA,IACAC,SAAA,IACAmB,QAAA,IACAzZ,KAAA,IACA0Z,MAAA,KAGAte,YAAA,aAAA,SAAA1B,GACA,GAAAwB,GAAAC,IAEAD,GAAA0d,UACA1d,EAAA0d,QAAA,SAEA,IAAAe,GAAAze,EAAA0d,QAAA3U,MAAA,IAEA/I,GAAA8E,OACA9E,EAAA8E,KAAA,GAEA,IAAAA,GAAA9E,EAAA8E,KAAAiE,MAAA,IAEA/I,GAAAse,SACAte,EAAAse,OAAA,KAIAte,EAAA0e,cAAA,SAAA3b,GACA,GAAA4b,GAAA3e,EAAAse,MAMA,OALAjgB,SAAAugB,QAAAH,EAAA,SAAAI,EAAAC,GACA,GAAAC,GAAAja,EAAAga,GAAAha,EAAAga,GAAAE,OAAA,GACAC,EAAAzgB,EAAA6b,QAAA0E,EAAAhc,EAAA8b,EAAAG,QACAL,GAAAA,EAAA5C,QAAA,IAAAkD,KAEAN,UC7DA,WACA,YAMA,SAAAO,KAoBA,QAAAC,GAAAhU,EAAAiU,GACA,GAAAC,IACAC,QAAA,OAAA,OAAA,OAAA,OAAA,QACAC,eAAA,SAAAC,GAEA,GAAAC,GAAA,EACAC,EAAA,yBAEAC,EAAA,SAAAC,KAAAJ,GACAK,EAAA,SAAAD,KAAAJ,GACAM,EAAA,SAAAF,KAAAJ,GACAO,EAAAL,EAAAE,KAAAJ,GAEAQ,GAAAL,EAAAE,EAAAC,EAAAC,GACAE,EAAAC,EAAAC,KAAAH,EAAA,SAAAI,GACA,MAAAA,MAAA,IACAlX,MAaA,OAXAuW,IAAA,EAAAD,EAAAtW,QAAAsW,EAAAtW,QAAA,GAAA,EAAA,GACAuW,GAAA,GAAAQ,EAGAR,EAAAD,EAAAtW,QAAA,EAAAmX,KAAAC,IAAAb,EAAA,IAAAA,EAGAA,EAAA,IAAAQ,EAAAI,KAAAC,IAAAb,EAAA,IAAAA,EACAA,EAAA,IAAAQ,EAAAI,KAAAC,IAAAb,EAAA,IAAAA,EACAA,EAAA,IAAAQ,EAAAI,KAAAC,IAAAb,EAAA,IAAAA,GAKAc,SAAA,SAAAC,GAEA,GAAAC,GAAA,CAiBA,OAfAA,GADAD,GAAA,GACA,EAEAA,GAAA,GACA,EAEAA,GAAA,GACA,EAEAA,GAAA,GACA,EAGA,GAGAC,IAAAA,EAAA,EAAAC,IAAAzgB,KAAAqf,OAAAmB,KAGAtV,GAAAyC,OAAA,kBAAA,SAAA+B,GACA,GAAAA,EAAA,CACA,GAAAgR,GAAAtB,EAAAkB,SAAAlB,EAAAE,eAAA5P,GACAyP,GAAAnC,YAAA,WACAmC,EAAAwB,KAAA,MAAAC,SAAA,MACAC,KAAAC,mBAAA,SACAC,MAAA,EAAAL,EAAAF,KACAK,KAAAC,mBAAAJ,EAAAD,SAhFA,GAAAnV,IACAwQ,SAAA,EACA7Q,SAAA,IACA9K,SAAA,uPAMA+K,OACA8V,gBAAA,KAEA/F,KAAAiE,EAGA,OAAA5T,GApBAlN,QACAuB,OAAA,OACA2L,UAAA,sBAAA2T,MCNA,WACA,YAwCA,SAAAhZ,GAAA1H,GACA,GAAAwB,GAAAC,IAEAD,GAAAkd,QACAld,EAAAkd,UAGAld,EAAAkhB,eACAC,oBAAA,EAEAC,cAAA,EACAC,oBAAA,EAEAC,eAAA,EACAC,gBAAA,EACAC,cAAA,GAGAxhB,EAAAyhB,SAQApjB,QAAAqjB,MAAA1hB,EAAAkhB,eAEAS,wBAAA,SAAAC,GACA,GAAAxH,GAAA,EAOA,OANAwH,GAAAhD,QAAA,SAAA7b,EAAA+b,GACA1E,GAAA5b,EAAA6b,QAAAra,EAAAyhB,SAAA1e,GACA+b,EAAA,EAAA8C,EAAA1Y,SACAkR,GAAA,QAGAA,KAjBA/b,QAAAqjB,MAAA1hB,EAAAkhB,eACAW,YAAA7hB,EAAA0d,QAAA1d,EAAA0d,QAAA,SACAoE,YAAA9hB,EAAA0d,QAAA1d,EAAA0d,QAAA,SACAqE,WAAA,OAmBA/hB,EAAAI,WACAJ,EAAAkhB,cAAA9gB,SAAAJ,EAAAI,UAGAJ,EAAAgiB,OACA3jB,QAAAqjB,MAAA1hB,EAAAkhB,cAAAlhB,EAAAgiB,OAIAhiB,EAAAiiB,cACAC,kBAAA1jB,EAAA6b,QAAA,uBACA8H,kBAAA3jB,EAAA6b,QAAA,sBACA+H,eAAA5jB,EAAA6b,QAAA,+BAEA,MAAAra,EAAAwe,OAAAxe,EAAAwe,MAAAtV,SACAlJ,EAAAiiB,aAAAC,kBAAA1jB,EAAA6b,QAAAra,EAAAwe,QAIAxe,EAAAqiB,aAAA,SAAA5f,KlDkxFIyD,EAAWvG,SAAW,akDl2F1B,IAAAQ,IACAe,YAAA,oDACAZ,UACAiB,GAAA,IACAya,MAAA,IACA3D,QAAA,IACA6E,MAAA,IACAqB,QAAA,IACAb,QAAA,IACAtd,SAAA,IACAkiB,OAAA,IACAb,SAAA,IACAO,MAAA,IACAxD,MAAA,KAEAte,WAAAgG,EACA7F,aAAA,OAsEAhC,SACAuB,OAAA,OACAO,UAAA,cAAAA,MC7GA,WACA,YAiCA,SAAA+F,KAGA,QAAAqc,KACAviB,EAAAye,MAKAze,EAAAye,KAAAvV,QAAAlJ,EAAAod,UACApd,EAAAye,KAAAnQ,UALAtO,EAAAye,QACAze,EAAAod,UACApd,EAAAye,KAAAnQ,UANA,GAAAtO,GAAAC,IAaAD,GAAAwiB,WAAA,WACAxiB,EAAAye,KAAAnQ,MAAAmU,YAAA,KAGAziB,EAAA0iB,cAAA,SAAA3f,GACA/C,EAAAye,KAAA9J,OAAA3U,EAAAye,KAAA9S,QAAA5I,GAAA,GACAwf,KAGAA,IAzCAlkB,QACAuB,OAAA,OACAO,UAAA,YACAe,YAAA,8CACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACA0b,MAAA,IACA3D,QAAA,IACAoG,KAAA,IACAtd,QAAA,IACAD,YAAA,IACAkc,SAAA,IACAuF,SAAA,UC7BA,WACA,YASA,IAAAC,IACAxiB,SAAA,kQAGAE,UACAtB,IAAA,IACA6jB,MAAA,IACAxK,QAAA,IACA+E,SAAA,IACA0F,OAAA,KAEAziB,aAAA,OAGAhC,SACAuB,OAAA,OACAO,UAAA,YAAAyiB,MC1BA,WACA,YAEA,IAAAvV,IACAnM,YAAA,wDACAZ,UACA+M,OAAA,KAIAhP,SACAuB,OAAA,OACAO,UAAA,SAAAkN,MCZA,WACA,YAQAhP,SACAuB,OAAA,OACAO,UAAA,SACAe,YAAA,uCACAZ,UACA4c,MAAA,IACA6F,QAAA,IACA/G,MAAA,KAEA3b,aAAA,YClBA,WACA,YAcAhC,SACAuB,OAAA,OACAO,UAAA,cACAe,YAAA,4CACAb,aAAA,OACAC,UACAiB,GAAA,IACAya,MAAA,IACAkB,MAAA,IACAmB,OAAA,IACAX,QAAA,IACAc,MAAA,IACArB,SAAA,IACAC,SAAA,IACAmB,QAAA,IACAzZ,KAAA,UC9BA,WACA,YAWAzG,SACAuB,OAAA,OACAO,UAAA,qBACAe,YAAA,oDACAb,aAAA,OACAC,UACAiB,GAAA,IACAya,MAAA,IACAkB,MAAA,IACAmB,OAAA,IACAG,MAAA,IACArB,SAAA,IACAC,SAAA,UCxBA,WACA,YAMA,SAAAlX,GAAAzD,EAAAjC,EAAAyB,GACA,GAAAjC,GAAAC,IAEAD,GAAAmG,QAAAlE,EAAAkE,QACAnG,EAAAyC,KAAAA,EACAzC,EAAAQ,OAAAA,EAEAR,EAAAgjB,cAAA,WACAhjB,EAAAyC,KAAAwgB,SAAA1hB,GAAAvB,EAAAyC,KAAAlB,KAAArC,KAAA,WACA+C,EAAAoE,MAAArG,EAAAyC,SzD6oGIyD,EAAWvG,SAAW,OAAQ,SAAU,gByD1pG5CtB,QAAAuB,OAAA,OACAM,WAAA,8BAAAgG,MCJA,WACA,YAqCA,SAAAA,KAGA,QAAAgd,KAEA7kB,QAAAgF,SAAArD,EAAAkd,SACAld,EAAAkd,MAAA,IAAAld,EAAAkd,OALA,GAAAld,GAAAC,IASAD,GAAAmjB,QAAA,EACAnjB,EAAAse,SACAte,EAAAse,OAAA,cAGA,mBAAAte,GAAA,UACAA,EAAAojB,SAAA,GAGA,mBAAApjB,GAAA,WACAA,EAAAqjB,UAAA,GAGArjB,EAAAue,SAAA,UAAAve,EAAAue,QAAA+E,UACAtjB,EAAAue,QAAA+E,QAAA,GAAA7a,OAGAzI,EAAAujB,aACAC,eAAA,OACAC,WAAA,OACAC,QAAA,GAAAjb,MACAkb,YAAA,EACAC,WAAA,GAEAvlB,QAAAqjB,MAAA1hB,EAAAujB,YAAAvjB,EAAAue,SAEAve,EAAA6jB,eAAA,WACA7jB,EAAAmjB,QAAA,GAGAD,IA/DA,GAAAY,IACA5iB,YAAA,4CACAZ,UACAiB,GAAA,IACAya,MAAA,IACAkB,MAAA,IACAC,SAAA,IACAC,SAAA,IACAmB,QAAA,IACAD,OAAA,IACAD,OAAA,IACA+E,QAAA,KACAC,SAAA,MAEAnjB,WAAAgG,EACA7F,aAAA,OAGAhC,SACAuB,OAAA,OACAO,UAAA,aAAA2jB,MCnCA,WACA,YAKA,IAAAC,IACA3jB,SAAA,+EACAC,aAAA,OACAC,UACAgb,MAAA,IACAxW,KAAA,KAIAzG,SACAuB,OAAA,OACAO,UAAA,YAAA4jB,MCjBA,WACA,YAMA,SAAAC,GAAAjiB,EAAAC,EAAA2D,EAAAY,GACA,GAAAvG,GAAAC,IAEAD,GAAAikB,mBACAjkB,EAAAkkB,SACAniB,EAAA,WACA1D,QAAA0E,QAAA,2BAAA,GAAAC,UAGAhD,EAAAmkB,SAAA,WACAnkB,EAAAikB,gBAAAtU,WAAA3P,EAAA4G,gBACAjB,EAAAc,MAAA,mCAGAzG,EAAAikB,gBAAAhf,IAAA,aACAjF,EAAAikB,gBAAA9c,MAAAnH,EAAAikB,gBAAApJ,MACAtU,EAAA6d,cAAApkB,EAAAikB,iBAAA/kB,KAAA,WACA8C,EAAA6C,GAAA,wB5DowGImf,EAAoBrkB,SAAW,WAAY,SAAU,eAAgB,Q4DzxGzEtB,QAAAuB,OAAA,OACAM,WAAA,sBAAA8jB,MCJA,WACA,YAOA,SAAAvjB,GAAAC,EAAA2jB,GACA,GAAAvf,GAAA,cACAtE,GACAsE,KAAAA,EACAlE,OAAA,QACA0jB,QAAA,SACAC,gBAAA,6BACArkB,WAAA,uBACAskB,eAAA,sBACAC,cAAA,gBAGA9jB,EAAA0jB,EAAA7jB,EAEAnC,SAAAqjB,MAAA/gB,EAAAC,QACAE,MACAY,aAAA,iBAIArD,QAAAqjB,MAAA/gB,EAAA8d,SAGApgB,QAAAqjB,MAAA/gB,EAAA+jB,QACAvjB,SAEAQ,UAAA,OAAA,SAAAP,GACA,MAAA,IAAAA,QAMAV,EACAC,MAAAH,EAAAsE,KAAAnE,EAAAC,QACAD,MAAAA,EAAA8d,KAAA/V,KAAA/H,EAAA8d,MACA9d,MAAAA,EAAA+jB,OAAAhc,KAAA/H,EAAA+jB,Q7DgxGIjkB,EAAYd,SAAW,iBAAkB,gB6DzzG7CtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,SAAApC,GACA,YAOA,SAAAsmB,GAAA5iB,EAAAV,EAAAwO,EAAAC,EAAAC,EACA9N,EAAAb,GACA,GAAApB,GAAAC,IAEA8B,GAAA,WACA1D,EAAA0E,QAAA,2BAAAC,UAGAhD,EAAAyC,KAAArB,EACApB,EAAAgQ,OAAA3O,EAAA2M,KAAA3M,EAAA2M,KAAA,EACAhO,EAAAiQ,mBAAAJ,EAAA9B,KACA/N,EAAAqN,QACArO,IAAAyM,OACAxG,IAAA,cAEAjF,EAAAmQ,YAAA,GAAAL,IACAM,MAAApQ,EAAAiQ,mBACAjC,KAAAhO,EAAAgQ,OACA3C,OAAArN,EAAAqN,OACAgD,SAAAwK,MAAA,QACA9K,EAAAQ,SAAAvQ,IAGAA,EAAAwQ,uBAAA,SAAAkK,GACAzY,EAAAoC,MACAnD,YAAA,iDACAhB,WAAA,yBACAG,aAAA,OACAc,SAEAsB,MAAA,OAAA,SAAArB,GACA,MAAAA,GAAAkE,KAAA6B,MAAAuT,EAAAvT,QAAA3F,WAEAhB,OAAA,WACA,OACA8D,MAAA,gCACAC,KAAA,uCACAkM,SAAA,UAIAjM,MAAA,OAAA,SAAApD,GACA,MAAAA,KAEAsD,QAAA,WACA,MAAA,YAEAC,WAAA,WACA,OAAApD,GAAAmZ,EAAAnZ,QAGAqD,OAAA1F,KAAA,WACAc,EAAAmQ,YAAAO,Y9DizGIiU,EAAqBhlB,SAAW,WAAY,eAAgB,0BAA2B,gBAAiB,gBAAiB,eAAgB,Q8D12G7ItB,EACAuB,OAAA,OACAM,WAAA,uBAAAykB,IA6DAtmB,SClEA,WACA,YAOA,SAAAoC,GAAAC,GACAA,EAEAC,MAAA,mBACAC,OAAA,SACAC,IAAA,6BACAG,OACAgE,YAEA9E,YAAA,gBAAA,SAAA0kB,GACAA,EAAAC,gBAAA,SAMAlkB,MAAA,eACAC,OAAA,SACAC,IAAA,eACAG,OACAgE,YAEA9E,YAAA,gBAAA,SAAA0kB,GACAA,EAAAC,gBAAA,S/Dm5GIpkB,EAAYd,SAAW,kB+D/6G3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAOA,SAAAmkB,GAAAE,EAAAC,EAAA/iB,EAAAuE,EAAAZ,GAUA,QAAAkf,GAAAG,GACA,GAAAC,GAAAF,EAAAzf,IAAA,wBAEAiB,GAAAse,eAAAI,GAAA,GAAA/lB,KAAA,WACAuN,QAAAC,IAAA,mBACAsY,GACArf,EAAAe,QAAA,2BAEAqe,EAAAG,OAAA,yBACA3e,EAAAqK,WAAA,GACA5O,EAAA6C,GAAA,uBACA,WACA4H,QAAAC,IAAA,mBACAsY,EACArf,EAAAc,MAAA,yBAEAd,EAAAc,MAAA,sBAEAzE,EAAA6C,GAAA,mBAIA,QAAAsgB,GAAAC,GACA,OAAAA,GACA,IAAA,SACA,MAAA,iGACA,KAAA,WACA,MAAA,sBACA,SACA,MAAA,gCAIA,QAAAC,GAAAD,GACA,MAAA,UAAAA,EAGA,QAAAE,KACA,MAAAP,GAAAzf,IAAAwf,EAAAS,SAAAC,gBA/CA,GAAAC,IACAZ,eAAAA,EACAM,mBAAAA,EACAE,eAAAA,EACAC,QAAAA,EAGA,OAAAG,GhE28GIb,EAAcjlB,SAAW,QAAS,WAAY,SAAU,OAAQ,gBgEx9GpEtB,QACAuB,OAAA,OACA6R,QAAA,gBAAAmT,MCLA,WACA,YAOA,SAAAhjB,GAAA8jB,EAAAC,EAAApnB,GAeA,QAAAqnB,GAAA/jB,GACAgkB,EAAAhkB,EACAikB,EAAA,OAAAjkB,EACAtD,EAAAwnB,WAAA,mBAGA,QAAAC,GAAAtkB,GACA,GAAAA,EAAAiK,QAAA,mBAAA,IAAAma,IAAAD,EACA,OAAA,CAGA,KAAAC,IAAAD,IAAAA,EAAAnkB,YACA,OAAA,CAGA,IAAAA,EAAAiK,QAAA,uBAAA,GACAka,EAAAnkB,aAAAmkB,EAAAnkB,YAAAwH,OAAA,EACA,OAAA,CAGA,KAAA,GAAAG,GAAA,EAAAA,EAAA3H,EAAAwH,OAAAG,IACA,GAAAwc,EAAAnkB,YAAAiK,QAAAjK,EAAA2H,SACA,OAAA,CAIA,QAAA,EAGA,QAAA4c,GAAAC,GACA,MAAAJ,GAIA7lB,KAAA4B,WAAA3C,KAAA,SAAAgY,GACA,MAAAA,GAAAxV,aAAAwV,EAAAxV,YAAAiK,QAAAua,SACA,WACA,OAAA,IANAR,EAAAS,MAAA,GAUA,QAAAtkB,GAAAukB,EAAAvL,GAsBA,QAAAwL,GAAAC,GACAT,EAAAS,EAAAxlB,KACAglB,GAAA,EACAS,EAAAplB,QAAA0kB,GACAtnB,EAAAwnB,WAAA,mBAGA,QAAAS,KACAX,EAAA,KACAC,GAAA,EACAS,EAAAplB,QAAA0kB,GACAtnB,EAAAwnB,WAAA,mBAhCA,GAAAQ,GAAAb,EAAAe,OAQA,OANAL,MAAA,IACAP,EAAApa,QAKApN,QAAAqoB,UAAAb,IACAU,EAAAplB,QAAA0kB,GAEAU,EAAAI,UAIAhB,EAAArgB,KAAAuV,MAAAA,IAAArZ,SACAtC,KAAAmnB,GADAV,SAEAa,GAEAD,EAAAI,SAiBA,QAAAnf,KACA,MAAAse,GAGA,QAAAc,KACA,MAAAvoB,SAAAqoB,UAAAb,GAjGA,GAAAA,GACAC,GAAA,EAEAe,GACAjB,aAAAA,EACAI,gBAAAA,EACAC,aAAAA,EACApkB,SAAAA,EACA2F,gBAAAA,EACAof,mBAAAA,EAGA,OAAAC,GjEogHIjlB,EAAUjC,SAAW,KAAM,UAAW,ciEthH1CtB,QACAuB,OAAA,OACA6R,QAAA,YAAA7P,MCLA,SAAAvD,GACA,YAMA,SAAAkI,GAAAhI,EAAAyD,EAAA8kB,EAAApB,EAAAZ,EAAAiC,EAAAnlB,EAAAR,EAAAqD,EAAAkhB,EAAAlL,GAaA,QAAAjU,GAAAxH,GACA,MAAA8lB,IACAva,OAAA,MACA1J,IAAA,4BACAL,QAAAxB,IAAAA,KAIA,QAAA6b,GAAAmM,EAAAC,GAEA,GAAAC,GAAAD,GAAA5oB,EAAA8oB,KACAZ,EAAAb,EAAAe,QAEA5L,EAAAmM,EAAAlM,QA0BA,OAxBAiM,GAAAlM,MAAAmM,GAAA9nB,KAAA,SAAAkoB,GAiBA,MAfAxlB,GAAAC,UAAA,EAAAgZ,GAAA3b,KAAA,SAAAonB,GAMA,MAAAA,EAAAphB,SACA7G,EAAA0E,QAAA,qCAAAnC,SAAA8X,OAEA,kBAAA4N,EAAArhB,MACA5G,EAAA0E,QAAA,qCAAAnC,SAAA8X,OACAra,EAAA0E,QAAA,mCAAAnC,SAAA8X,QAEA6N,EAAAplB,QAAAmlB,KAEAY,MAjBAH,SAkBA,SAAAM,GAGA,MAFApnB,MAAAyH,SACA6e,EAAAe,OAAAD,GACAH,EAAAG,IACAE,KAAAtnB,OAEAsmB,EAAAI,QAGA,QAAA9B,GAAAuC,EAAAzM,GACA,MAAAoM,GAAAlC,eAAAuC,EAAAzM,GAGA,QAAAjT,KACAqf,EAAArf,SACA9F,EAAAgkB,aAAA,MACAvnB,EAAA0E,QAAA,qCAAAnC,SAAA6X,OACApa,EAAA0E,QAAA,mCAAAnC,SAAA6X,OAGA,QAAA7H,GAAAwV,EAAA1kB,GAKA,QAAA8lB,KA2BA,QAAAnB,GAAAC,GAGA,GAAAA,GAAAA,EAAAxlB,MAAAwlB,EAAAxlB,KAAAmE,IACA,OAAAqhB,EAAAxlB,KAAAmE,KACA,IAAA,aACAjD,EAAA6C,GAAA4V,EACA,MACA,KAAA,cACA,IAAA,gBACAzY,EAAA6C,GAAA,iBACA,MACA,KAAA,eACA7C,EAAA6C,GAAA,yBAvCA,GAAA2C,GAAA5F,EAAA4F,iBAWA,KARAA,GAAA,YAAAjJ,EAAAkpB,QAAA7mB,QACA,UAAArC,EAAAkpB,QAAA/e,MACA,aAAAnK,EAAAkpB,QAAA/e,MAAA,gBAAAnK,EAAAkpB,QAAA/e,MACA,mBAAAnK,EAAAkpB,QAAA/e,MAAA,qBAAAnK,EAAAkpB,QAAA/e,MACA1G,EAAA6C,GAAA,QAIA2C,KAAAjJ,EAAAmpB,YAAAnpB,EAAAmpB,UAAAhf,OAAAoe,EAAAa,kBAAA,CACA,GAAAA,GAAAb,EAAAa,kBACAC,EAAAd,EAAAc,0BACAd,GAAAa,wBACAb,GAAAc,oBACA5lB,EAAA6C,GAAA8iB,EAAAC,GAIApgB,GAAA,kBAAAjJ,EAAAkpB,QAAA/e,MAGAid,EAAArgB,MAAA9D,SACAtC,KAAAmnB,IAsBA9nB,EAAAkpB,QAAA3mB,KAAAY,aAAAnD,EAAAkpB,QAAA3mB,KAAAY,YAAAwH,OAAA,IAAAtH,EAAAokB,gBAAAznB,EAAAkpB,QAAA3mB,KAAAY,cACAA,GAAAA,EAAAwH,OAAA,IAAAtH,EAAAokB,gBAAAtkB,MACA8F,EAEAxF,EAAA6C,GAAA,iBAIAiiB,EAAAa,kBAAAppB,EAAAkpB,QAAA/e,KACAoe,EAAAc,oBAAArpB,EAAAspB,cAEAtpB,EAAAkpB,QAAA/e,KAAAof,WAAA,UAEA9lB,EAAA6C,GAAA,SAEA7C,EAAA6C,GAAA,mBAlEA,GAAAkjB,GAAAnmB,EAAAC,SAAAukB,GAAAlnB,KAAAsoB,EAEA,OAAAO,GAuEA,QAAA3D,GAAAkC,EAAAW,GAEA,GAAAC,GAAAD,GAAA5oB,EAAA8oB,IAEA,OAAA/lB,GAAA8B,KAAAojB,EACA,WACA,MAAAY,GAAAZ,IAEA,SAAAe,GAEA,MAAAH,GAAAG,IACAE,KAAAtnB,OAAAuB,SAGA,QAAAkO,GAAApI,EAAA2f,GACA,GAAAC,GAAAD,GAAA5oB,EAAA8oB,IAEA,OAAA1iB,GAAAiL,eAAApI,EAAA,WACA,MAAA4f,MACA,SAAAG,GACA,MAAAH,GAAAG,KACA7lB,SAGA,QAAA4F,GAAAD,GACA,MAAA2d,IACAva,OAAA,MACA1J,IAAA,0CACAL,QAAA2G,MAAAA,KAIA,QAAAI,GAAAygB,GACA,MAAAlD,IACAva,OAAA,MACA1J,IAAA,4CACAL,QACA2G,MAAA6gB,EAAA7gB,MACAnI,IAAAgpB,EAAAhpB,IACAsI,YAAA0gB,EAAA1gB,eAlLA,OACAuT,MAAAA,EACAgK,eAAAA,EACAnd,OAAAA,EACAkJ,UAAAA,EACAwT,cAAAA,EACA5d,gBAAAA,EACAkJ,eAAAA,EACAtI,kBAAAA,EACAG,oBAAAA,GlEwnHIhB,EAAK5G,SAAW,aAAc,SAAU,kBAAmB,KAAM,QAAS,qBAAsB,YAAa,OAAQ,SAAU,UAAW,mBkEtoH9ItB,EAAAuB,OAAA,OACA6R,QAAA,OAAAlL,IA4LAlI,SChMA,WACA,YAQA,SAAA0oB,GAAAjC,EAAArmB,EAAAqoB,EAAApB,GAYA,QAAAuC,KACA,MAAAxpB,GAAAypB,qBAAApB,EAAAoB,oBAGA,QAAAC,KACA,GAAAlD,GAAAhlB,KAAAgoB,UACA,OAAAhD,IAAAA,EAAAmD,SAAAnD,EAAAmD,SAAA,GAAA3f,OAAA4f,UAGA,QAAAxN,GAAAmM,GAQA,QAAAsB,GAAAxnB,GACA,GACAynB,IADAznB,EAAA0nB,OACA1nB,EAAAynB,SACAE,EAAAF,EAAA,gBACA,IAAAlqB,QAAAqoB,UAAA+B,IAAA,YAAAA,EAAAzH,MAAA,EAAA,GAAA,CACA,GAAAoG,GAAAqB,EAAAzH,MAAA,EAAAyH,EAAAvf,OAEA,OADA2d,GAAA6B,yBAAAtB,EAAAJ,EAAArM,YACAyM,GAdA,GAAAtmB,IACAga,SAAAkM,EAAAlM,SACAnL,SAAAqX,EAAArX,SACAgL,WAAAqM,EAAArM,WAEA,OAAAmK,GAAA6D,KAAA,2BAAA7nB,GAAA5B,KAAAopB,GAcA,QAAAzD,GAAAuC,EAAAzM,GACA,GAAA4L,GAAAb,EAAAe,OASA,OAPApoB,SAAAqoB,UAAAU,IACAnnB,KAAAyoB,yBAAAtB,EAAAzM,GACA4L,EAAAplB,QAAAimB,IAEAb,EAAAe,SAGAf,EAAAI,QAGA,QAAA+B,GAAAtB,EAAAzM,GAEAlc,EAAAypB,oBAAAd,EAMA,QAAA1f,WACAjJ,GAAAypB,0BACApB,GAAAoB,oBA/DA,GAAArB,IACAoB,SAAAA,EACAE,cAAAA,EACAtN,MAAAA,EACAgK,eAAAA,EACA6D,yBAAAA,EACAhhB,OAAAA,EAGA,OAAAmf,GAhBAxoB,QACAuB,OAAA,OACA6R,QAAA,qBAAAsV,GAEAA,EAAApnB,SAAA,QAAA,gBAAA,kBAAA,SCPA,WACA,YAMA,SAAAgmB,GAAAiD,GACA,MAAAA,GAAA,0BACAtjB,KACAiF,OAAA,MACA/J,QAAAqa,MAAA,UACAzJ,SAAA,EACAyX,aACAre,SAAA,SAAAA,GAEA,MAAAA,QpE04HImb,EAAQhmB,SAAW,aoEv5HvBtB,QAAAuB,OAAA,OACA6R,QAAA,UAAAkU,MCJA,WACA,YAOA,SAAAllB,GAAAC,GACAA,EACAC,MAAA,iBACAC,OAAA,SACAC,IAAA,uBACAC,MACAC,UAAA,qBAEAC,OACAgE,YACA9D,YAAA,8CACAhB,WAAA,yBACAG,aAAA,SAGAc,SAEA2nB,SAAA,SAAA,SAAAzmB,GACA,MAAAA,GAAAqB,SAAAC,aAAA,WAAAnC,SAAAtC,KAAA,SAAA4B,GACA,MAAAA,GAAA+C,YAIAE,SAAA,QAAA,SAAAxB,GACA,MAAAA,GAAAuB,QAAAtC,WAGAiM,QAAA,OAAA,SAAAnL,GACA,MAAAA,GAAAymB,uBAAAvnB,WAOAoC,aAAA,YAAA,SAAAxB,GACA,MAAAA,GAAAsB,SAAAC,aAAA,WAAAnC,SAAAtC,KAAA,SAAA4B,GACA,MAAAA,GAAA+C,YAIAmlB,UAAA,cAAA,SAAA7mB,GACA,MAAAA,GAAAmD,IAAA,aAGA2jB,MAAA,cAAA,SAAA9mB,GACA,MAAAA,GAAAmD,IAAA,YAKA3E,MAAA,iBACAC,OAAA,gBACAC,IAAA,OACAC,MACAC,UAAA,6BAEAC,OACAgE,YACA9D,YAAA,iDACAhB,WAAA,4BACAG,aAAA,SAGAc,SAEApB,UAAA,OAAA,eAAA,SAAAqB,EAAAC,GACA,MAAAD,GAAAE,iBAAAC,GAAAF,EAAAE,KAAAC,crEw2HIf,EAAYd,SAAW,kBqEh7H3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAMA,SAAAA,GAAAC,ItE+/HID,EAAYd,SAAW,kBsEngI3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,SAAApC,GACA,YAOA,SAAA6qB,MALA7qB,EACAuB,OAAA,OACAM,WAAA,iBAAAgpB,IAOA7qB,SCZA,WACA,YAOA,SAAAoC,GAAAC,GACAA,EAAAC,MAAA,UACAC,OAAA,SACAmE,WAAA,aACAlE,IAAA,UACAL,QACA2oB,OAAA,MAEAroB,MACAY,aAAA,sBACAX,UAAA,wBAEAJ,MAAA,gBACAC,OAAA,SACAJ,QACA0P,kBAAA,KACAY,kBAAA,EACApL,QAAA,MAEA1E,OACAgE,YACA3E,aAAA,OACAD,SAAA,mJAKAe,SAEAioB,KAAA,SAAA,eAAA,SAAA,UAAA,eAAA,SAAApnB,EAAAX,EAAA2Z,EAAAqO,EAAA1jB,GACA8G,QAAAC,IAAA,kBAAArL,GACA2Z,EAAAsO,OACApZ,kBAAA7O,EAAA6O,kBACAY,iBAAAzP,EAAAyP,mBACAtP,SAAAtC,KAAA,SAAA0F,GACAoW,EAAAuO,eAAAC,SAAA5kB,EAAArD,KAAAC,SAAAtC,KAAA,SAAA0F,GACAA,EAAA6F,IAIA4e,EAAAI,SAAAC,KAAA9kB,EAAA6F,IAFA9E,EAAAc,MAAA,gCAQA9F,MAAA,iBACAC,OAAA,SACAC,IAAA,6CACAC,MACAY,gBAEAV,OACAgE,YACA9D,YAAA,wCAEAhB,YAAA,SAAA,eAAA,SAAA,YAAA,SAAA8B,EAAAX,EAAA2Z,EAAApZ,GACA,GAAA5B,GAAAC,IACAD,GAAAmO,SAAA,EACA1B,QAAAC,IAAA,sBAEAsO,EAAA2O,iBACAH,SAAAnoB,EAAAmoB,SACAI,UAAAvoB,EAAAuoB,UACA3E,MAAA5jB,EAAA4jB,QACAzjB,SAAAtC,KAAA,SAAA0F,GACA5E,EAAAmO,SAAA,EACA1B,QAAAC,IAAA,oBAAA9H,GACAhD,EAAAC,UAAA,GAAA3C,KAAA,SAAA4B,GACAkB,EAAA6C,GAAA,2BAEA,WACA7E,EAAAmO,SAAA,EACAnO,EAAAyG,OAAA,MAGApG,aAAA,WAGAM,MAAA,iBACAC,OAAA,SACAC,IAAA,2BACAG,OACAgE,YACA9D,YAAA,wCAEAhB,YAAA,SAAA,eAAA,SAAA,eAAA,SAAA8B,EAAAX,EAAA2Z,EAAArV,GACA8G,QAAAC,IAAA,qBAEAsO,EAAA6O,UAAAL,SAAAnoB,EAAAmoB,WAAAhoB,SAAAtC,KAAA,SAAA0F,GACA6H,QAAAC,IAAA,qBAAA9H,GACAe,EAAAmkB,QAAA,iBACA9nB,EAAA6C,GAAA,uBAGAxE,aAAA,WxEy8HII,EAAYd,SAAW,kBwE7iI3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,SAAApC,GACA,YAOA,SAAA6H,GAAAiH,EAAAvL,GAKA,QAAAmoB,KACAnoB,EAAAC,WAAA3C,KAAA,SAAA4B,GACAd,EAAA0F,QAAA5E,IANA,GAAAd,GAAAC,IAUA8pB,KAEA5c,EAAA6c,IAAA,kBAAA,WACAD,MzEyoII7jB,EAAWvG,SAAW,SAAU,ayE5pIpCtB,EACAuB,OAAA,OACAM,WAAA,mBAAAgG,IAsBA7H,SC3BA,WACA,YAQA,SAAAoC,GAAAC,GACAA,EACAC,MAAA,SACAC,OAAA,OACAC,IAAA,SACAC,MACAY,eACAX,UAAA,qBAEAC,OACAgE,YACA9D,YAAA,iCAGA+oB,eACAC,MAAA,KAGAvpB,MAAA,gBACAC,OAAA,SACAC,IAAA,mBACAC,MACAY,eACAX,UAAA,4BAEAC,OACAgE,YACA9D,YAAA,wCAGA+oB,eACAC,MAAA,KArCA7rB,QACAuB,OAAA,OACA6B,OAAAhB,GAEAA,EAAAd,SAAA,qBCPA,WACA,YAQA,SAAAuR,GAAA0X,GAMA,QAAAzX,GAAAgZ,EAAA3pB,EAAA4pB,EAAAC,GACA,GAAAC,IACAxmB,OACAyG,OAAA,MACA1J,IAAA,cAAAspB,EAAA,SACA/Y,SAAA,GAEA9L,KACAiF,OAAA,MACA1J,IAAA,cAAAspB,EAAA,OACA/Y,SAAA,GAEA1N,SACA6G,OAAA,MACA1J,IAAA,cAAAspB,EAAA,WACA/Y,SAAA,GAGA/S,SAAA8b,OAAAmQ,EAAAF,EAEA,IAAA9F,GAAA,OAKA,OAJA+F,KACA/F,EAAA,UAGAsE,EAAA,OAAAtE,EAAA,IAAA6F,EAAA,OAAA3pB,EAAA8pB,GA7BA,OACAnZ,YAAAA,G3E+tIID,EAAevR,SAAW,a2ExuI9BtB,QAAAuB,OAAA,OACA6R,QAAA,iBAAAP,MCJA,WACA,YAMA,SAAAqZ,GAAAzF,GAKA,QAAA0F,GAAA3pB,EAAAL,EAAA4C,GACA0hB,GACAva,OAAA,MACA1J,IAAAA,EACAL,OAAAA,EACAiqB,aAAA,gBACAvrB,KAAA,SAAA0F,GACA,GAAAyF,GAAA,GAAAd,OAAA3E,EAAA9D,OAAAsC,KAAAA,IACAsnB,EAAA9lB,EAAA2jB,QAAA,uBACAoC,EAAAD,EAAA3hB,MAAA,KAAA,GAAAiW,OAAAjW,MAAA,KAAA,GAAAgT,QAAA,KAAA,GACA6O,QAAAvgB,EAAAsgB,KAdA,OACAH,UAAAA,G5EgxIID,EAAQ5qB,SAAW,S4EtxIvBtB,QAAAuB,OAAA,OACA6R,QAAA,eAAA8Y,MCJA,WACA,YAQA,SAAAM,GAAAllB,GAOA,QAAA6E,GAAAA,GACA,GAAAsgB,GAAAtgB,EAAA+d,QAAA,cAIA,OAHAlqB,SAAA0sB,SAAAD,IACAnlB,EAAAe,QAAAokB,GAAAE,MAAAxgB,EAAA+d,QAAA,kBAEA/d,EAXA,GAAAqc,IACArc,SAAAA,EAGA,OAAAqc,GAXAxoB,QACAuB,OAAA,OACA6R,QAAA,0BAAAoZ,GAEAA,EAAAlrB,SAAA,mBCPA,WACA,YAQA,SAAAsrB,GAAAvF,EAAAnnB,GAKA,QAAA2sB,GAAA1gB,GAKA,MAJA,OAAAA,EAAAge,QAAAhe,EAAA1J,OACA,KAAA0J,EAAA1J,MAAA0J,EAAA1J,KAAAgC,MAAA,IAAA0H,EAAA1J,KAAAgC,KAAA6I,QAAA,0BACApN,EAAA4sB,MAAA,gBAAA3gB,GAEAkb,EAAA4B,OAAA9c,GATA,OACA0gB,cAAAA,GARA7sB,QACAuB,OAAA,OACA6R,QAAA,0BAAAwZ,GAEAA,EAAAtrB,SAAA,KAAA,iBCPA,WACA,YAQA,SAAAyrB,GAAA3sB,EAAAqoB,GAOA,QAAAuE,GAAA5pB,GAEAA,EAAA8mB,QAAA9mB,EAAA8mB,WACA,IAAAtD,GAAAxmB,EAAAypB,qBAAApB,EAAAoB,mBAMA,OAJAjD,KACAxjB,EAAA8mB,QAAA+C,cAAA,UAAArG,GAGAxjB,EAfA,GAAAolB,IACAwE,QAAAA,EAGA,OAAAxE,GAXAxoB,QACAuB,OAAA,OACA6R,QAAA,kBAAA2Z,GAEAA,EAAAzrB,SAAA,gBAAA,sBCPA,WACA,YASA,SAAA4rB,GAAA7F,EAAA8F,EAAA/sB,EAAAqoB,GAOA,QAAAoE,GAAA1gB,GACA,GAAA,MAAAA,EAAAge,OAAA,OACA/pB,GAAAypB,0BACApB,GAAAoB,mBACA,IAAAtmB,GAAA4pB,EAAAlmB,IAAA,YACA,IAAA1D,EAAA4F,kBAAA,CACA,GAAAjB,GAAAilB,EAAAlmB,IAAA,OACAiB,GAAAqK,WAAA,IAGA,MAAA8U,GAAA4B,OAAA9c,GAhBA,GAAAqc,IACAqE,cAAAA,EAGA,OAAArE,GAZAxoB,QACAuB,OAAA,OACA6R,QAAA,yBAAA8Z,GAGAA,EAAA5rB,SAAA,KAAA,YAAA,gBAAA,sBCRA,WACA,YAMA,SAAA8rB,KACAxrB,KAAAyrB,MAAA,SAAAlS,GACA,GAAAnb,QAAAstB,kBAAAnS,GACA,QAGA,IAAA,IAAAA,EAAAtQ,OACA,KAAA,IAAA0iB,OAAA,mCAIA,IAAAC,GAAArS,EAAAzQ,MAAA,KACA+iB,IAuBA,OArBAztB,SAAAugB,QAAAiN,EAAA,SAAArM,GACA,GAAAuM,GAAAvM,EAAAzW,MAAA,IACA,IAAA,IAAAgjB,EAAA7iB,OACA,KAAA,IAAA0iB,OAAA,oCAEA,IAAA/qB,GAAAkrB,EAAA,GAAAhQ,QAAA,SAAA,MAAAiD,OACAgN,IACAnrB,GAAAkb,QACA,GAAAkQ,QAAA,uBAAA,KACA,SAAAC,EAAAC,EAAAC,EAAAC,GACAL,EAAAG,GAAAE,GAGA,IAAAre,GAAAge,EAAAhe,IACA3P,SAAA0sB,SAAA/c,KACAA,EAAAqB,SAAArB,GAEA,IAAAtF,GAAAqjB,EAAA,GAAAhQ,QAAA,aAAA,MAAAiD,MACA8M,GAAApjB,GAAAsF,IAGA8d,GAvCAztB,QAAAuB,OAAA,OACAinB,QAAA,aAAA4E,MCJA,SAAAptB,GACA,YAEAA,GACAuB,OAAA,OACA2L,UAAA,WAAA,WAAA,SAAAqG,GACA,MAAA,UAAAzG,EAAApI,EAAAqY,GACAjQ,EAAAyC,OACA,SAAAzC,GAEA,MAAAA,GAAAqQ,MAAAJ,EAAAkR,UAEA,SAAAhR,GAGAvY,EAAAwpB,KAAAjR,GAMA1J,EAAA7O,EAAAypB,YAAArhB,UAKA9M,SC1BA,SAAAA,GACA,YAKAA,GACAuB,OAAA,OACAO,UAAA,4BACAG,UACA+M,OAAA,KAEAnM,YAAA,gEACAb,aAAA,OAEAH,WAAA,WACA,GAAAF,GAAAC,IAEAD,GAAAysB,mBAAA,WACAzsB,EAAA0sB,WACA1sB,EAAAqN,OAAAC,QAAA,KAEAtN,EAAAqN,OAAAC,SAAA,OAMAjP,SC5BA,SAAAA,GACA,YAKAA,GACAuB,OAAA,OACAO,UAAA,yBACAG,UACA6P,YAAA,IACApN,QAAA,IACAonB,QAAA,KAEAjpB,YAAA,6DACAb,aAAA,OAEAH,YAAA,eAAA,SAAA+B,GACA,GAAAjC,GAAAC,IAIAD,GAAA2sB,2BAAA,SAAAjnB,GACAzD,EAAAoC,MACAnD,YAAA,iDACAhB,WAAA,yBACAG,aAAA,OACAc,SACAsB,KAAA,WACA,MAAAiD,IAEAlF,OAAA,WACA,GAAA+U,GAAA,qCAIA,OAHA,iBAAA7P,EAAAT,MACAsQ,EAAA,+CAGAjR,MAAA,oCACAC,KAAAgR,EACA9E,SAAA,UAIAjM,MAAA,OAAA,SAAApD,GACA,MAAAA,KAEAsD,QAAA,WACA,MAAA,UAEAC,WAAA,WACA,OAAApD,GAAAmE,EAAAnE,QAGAqD,OAAA1F,KAAA,WACAc,EAAAmQ,YAAAO,YAIA1Q,EAAA4sB,qBAAA,SAAAlnB,GACAzD,EAAAoC,MACAnD,YAAA,iDACAhB,WAAA,yBACAG,aAAA,OACAc,SACAsB,KAAA,WACA,MAAAiD,IAEAlF,OAAA,WACA,GAAA+U,GAAA,iCAIA,OAHA,iBAAA7P,EAAAT,MACAsQ,EAAA,2CAGAjR,MAAA,gCACAC,KAAAgR,EACA9E,SAAA,UAIAjM,MAAA,OAAA,SAAApD,GACA,MAAAA,KAEAsD,QAAA,WACA,MAAA,QAEAC,WAAA,WACA,OAAAwC,MAAAzB,EAAAyB,WAGAvC,OAAA1F,KAAA,WACAc,EAAAmQ,YAAAO,YAIA1Q,EAAA6sB,0BAAA,SAAAnnB,GACAzD,EAAAoC,MACAnD,YAAA,iDACAhB,WAAA,yBACAG,aAAA,OACAc,SACAsB,KAAA,WACA,MAAAiD,IAEAlF,OAAA,WACA,OACA8D,MAAA,mCACAC,KAAA,qCACAkM,SAAA,UAIAjM,MAAA,OAAA,SAAApD,GACA,MAAAA,KAEAsD,QAAA,WACA,MAAA,aAEAC,WAAA,WACA,OAAApD,GAAAmE,EAAAnE,QAGAqD,OAAA1F,KAAA,WACAc,EAAAmQ,YAAAO,iBAMArS,SChIA,SAAAA,GACA,YAMA,SAAAoD,GAAAf,GACAA,EAAAC,MAAA,UACAC,OAAA,OACAC,IAAA,gBACAL,QACAssB,UAAA,WACA,SAAAC,GACA,MAAAA,GAAAC,gBAIAlsB,MACAY,gBAGAV,OACAgE,YACA9D,YAAA,SAAAV,GACA,MAAA,WAAAA,EAAAe,GAAA,IAAAf,EAAAe,GAAA,IAAAf,EAAAssB,SAAA,aAtBAzuB,EAAAuB,OAAA,OAAA6B,OAAAA,GAEAA,EAAA9B,SAAA,mBA0BAtB,SC/BA,SAAAA,GACA,YAQA,SAAA4uB,GAAAhrB,EAAA8qB,GAQA,QAAA1oB,GAAA9C,GACAU,EAAAoC,MACAnD,YAAA,WACA,MAAA,WAAAK,EAAA,IAAAA,EAAA,IAAAwrB,EAAAC,aAAA,SAEA9sB,WAAA,wBACAG,aAAA,OACAc,SACAmD,MAAA,WACA,MAAA,UAAA/C,EAAA,aAhBA,OACA8C,KAAAA,GtFwqJI4oB,EAAYttB,SAAW,eAAgB,YsFhrJ3CtB,EAAAuB,OAAA,OACAinB,QAAA,cAAAoG,IA6BA5uB,SCjCA,SAAAA,GACA,YAOA,SAAA6uB,GAAAjrB,EAAAqC,GACA,GAAAtE,GAAAC,IAEAD,GAAAsE,MAAAA,EAEAtE,EAAAqG,MAAA,WACApE,EAAAkE,WvFysJI+mB,EAAsBvtB,SAAW,eAAgB,SuFptJrDtB,EACAuB,OAAA,OACAM,WAAA,wBAAAgtB,IAcA7uB,SCnBA,SAAAA,GACA,YAQAA,GACAuB,OAAA,OACAO,UAAA,UACAG,UACAiB,GAAA,IACA4rB,QAAA,IACAC,GAAA,KAGAlsB,aAAA,WAAA,SAAA,WAAA,SAAAmsB,EAAAC,EAAAP,GACA,GAAA,SAAAO,EAAAF,GACA,MAAA,oCAEA,IAAAD,GAAA,EAIA,OAHAG,GAAAH,UACAA,EAAAG,EAAAH,QAAA,KAEA,WAAAA,EAAAG,EAAA/rB,GAAA,IAAA+rB,EAAA/rB,GAAA,IAAAwrB,EAAAC,aAAA,UAIA9sB,YAAA,WAAA,WAAA,SAAA,SAAAqtB,EAAAR,EAAAO,GACA,GAAAttB,GAAAC,IACAstB,GAAAC,mBACAxc,OAAAsc,EAAA/rB,GACAgM,OAAAwf,EAAAC,eACAxrB,SAAAtC,KAAA,SAAA4B,GACAd,EAAAytB,aAAA3sB,MAGAT,aAAA,UAEAhC,SCzCA,WACA,YAOA,SAAAqvB,GAAAC,EAAA/I,GAaA,QAAAzF,GAAAhU,GACAA,EAAA6Q,MAAA2R,EAAA,cAAAxiB,EAAAia,UACAja,EAAAyiB,gBAAAhJ,EAAAO,mBAAAha,EAAAia,UACAja,EAAA0iB,YAAAjJ,EAAAS,eAAAla,EAAAia,UACAja,EAAA2iB,KAAAlJ,EAAAU;CAhBA,GAAA/Z,IACAL,SAAA,IACAC,OACAia,SAAA,IACAzd,KAAA,KAEAzG,YAAA,oCACAga,KAAAiE,EAGA,OAAA5T,GzFqwJImiB,EAAO/tB,SAAW,UAAW,iByFrxJjCtB,QACAuB,OAAA,OACA2L,UAAA,SAAAmiB,MCLA,WACA,YAMA,SAAAK,GAAAnsB,GAQA,QAAAud,GAAAhU,EAAApI,EAAAqY,GACA,GAAA8K,GAAA9K,EAAA2S,eAAAhS,QAAA,OAAA,IAEAiS,EAAA,WACAjrB,EAAAka,YAAA,WAEAgR,EAAA,WACAlrB,EAAAia,SAAA,WAEAkR,EAAA,SAAAC,GAEAA,GACAH,IAGApsB,EAAAqkB,aAAAC,GACAhnB,KAAA,SAAA0F,GACA6H,QAAAC,IAAA,WAAA9H,GACAA,EACAqpB,IAEAD,MAKA9H,GAAAhd,OAAA,IACAglB,GAAA,GAEA/iB,EAAAyC,OAAA,WACA,MAAAhM,GAAA4F,mBACA,WACA0mB,GAAA,MAvCA,GAAA3iB,IACAL,SAAA,IACAgQ,KAAAiE,EAGA,OAAA5T,G1F2yJIwiB,EAAepuB,SAAW,a0FrzJ9BtB,QACAuB,OAAA,OACA2L,UAAA,iBAAAwiB,MCLA,WACA,YAMA,SAAA9H,GAAArkB,GAQA,QAAAud,GAAAhU,EAAApI,EAAAqY,GACA,GAAA8K,GAAA9K,EAAA6K,aAAAlK,QAAA,OAAA,IAEAiS,EAAA,WACAjrB,EAAAka,YAAA,WAEAgR,EAAA,WACAlrB,EAAAia,SAAA,WAEAkR,EAAA,SAAAC,GAEAA,GACAH,IAGApsB,EAAAqkB,aAAAC,GACAhnB,KAAA,SAAA0F,GACAA,EACAopB,IAEAC,MAKA/H,GAAAhd,OAAA,IACAglB,GAAA,GAEA/iB,EAAAyC,OAAA,WACA,MAAAhM,GAAA4F,mBACA,WACA0mB,GAAA,MAtCA,GAAA3iB,IACAL,SAAA,IACAgQ,KAAAiE,EAGA,OAAA5T,G3Fk2JI0a,EAAatmB,SAAW,a2F52J5BtB,QACAuB,OAAA,OACA2L,UAAA,eAAA0a,MCLA,WACA,YAMA,SAAAD,GAAApkB,GAQA,QAAAud,GAAAhU,EAAApI,EAAAqY,GACA,GAAA,KAAAA,EAAA4K,gBAAA,CAIA,GAAAtkB,GAAA0Z,EAAA4K,gBAAAjK,QAAA,OAAA,IAAAhT,MAAA,KAEAilB,EAAA,WACAjrB,EAAAka,YAAA,WAEAgR,EAAA,WACAlrB,EAAAia,SAAA,WAEAkR,EAAA,SAAAC,GACA,GAAAvpB,EACAupB,IACAH,IAGAppB,EAAAhD,EAAAokB,gBAAAtkB,GACAkD,EACAopB,IAEAC,IAIAvsB,GAAAwH,OAAA,IACAglB,GAAA,GAEA/iB,EAAAyC,OAAA,WACA,MAAAhM,GAAA4F,mBACA,WACA0mB,GAAA,OAxCA,GAAA3iB,IACAL,SAAA,IACAgQ,KAAAiE,EAGA,OAAA5T,G5Fw5JIya,EAAgBrmB,SAAW,a4Fl6J/BtB,QACAuB,OAAA,OACA2L,UAAA,kBAAAya,MCLA,WACA,YAMA,SAAAoI,GAAAxsB,EAAAI,GAYA,QAAAmd,GAAAhU,EAAApI,GAEA,GAAAirB,GAAA,WACAjrB,EAAAka,YAAA,WAEAgR,EAAA,WACAlrB,EAAAia,SAAA,WAGAkR,EAAA,SAAAC,GACA,GAAAvpB,IAAA,CAMA,IAJAupB,GACAH,IAGA7iB,EAAAzJ,YAAA,CACA,GAAAA,GAAAyJ,EAAAzJ,YAAAqa,QAAA,OAAA,IAAAhT,MAAA,IACAnE,GAAAA,GAAAhD,EAAAokB,gBAAAtkB,GAGA,GAAAyJ,EAAAkjB,OAAA,CACA,GAAAA,GAAAljB,EAAAkjB,OAAAtS,QAAA,OAAA,IAAAhT,MAAA,KACAulB,EAAAD,EAAAhhB,OAAA,SAAA1M,GACA,MAAAqB,GAAAusB,SAAA5tB,IAEAiE,GAAAA,GAAA0pB,EAAAplB,OAGAtE,EACAopB,IAEAC,IAIA9iB,GAAAzJ,aACAyJ,EAAAyC,OAAA,WACA,MAAAhM,GAAA4F,mBACA,WACA0mB,GAAA,KAIA/iB,EAAAkjB,QACAljB,EAAA6e,IAAA,sBACA,WACAkE,GAAA,MAKA/iB,EAAAzJ,aAAAyJ,EAAAkjB,SACAH,GAAA,GAhEA,GAAA3iB,IACAL,SAAA,IACAgQ,KAAAiE,EACApD,SAAA,EACA5Q,OACAzJ,YAAA,IACA2sB,OAAA,KAGA,OAAA9iB,G7F48JI6iB,EAAuBzuB,SAAW,YAAa,U6F19JnDtB,QACAuB,OAAA,OACA2L,UAAA,yBAAA6iB,MCLA,WACA,YAQA,SAAAloB,GAAAzD,EAAAkC,EAAA1C,EAAAgP,EAAA2G,EAAAX,GACA,GAAAjX,GAAAC,IAEAD,GAAAmG,QAAAlE,EAAAkE,QACAnG,EAAAyC,KAAAA,EACAzC,EAAA2E,WAAAA,EACA3E,EAAA4X,aAAAA,EACA5X,EAAAiX,cAAAA,EACAjX,EAAAwuB,MAAA,GAAA/lB,MAEAzI,EAAAyuB,mBAAApwB,QAAAqE,KAAA1C,EAAAyC,KAAAuP,MAAAoD,UACApV,EAAAyuB,mBAAAC,SAAA1uB,EAAAyuB,mBAAArf,WAAApP,EAAAiX,cAAA0X,2BAGA3uB,EAAA4uB,OACAC,cAAA,EACAC,kBAAA,EACAC,gBAAA,EACAC,mBAAA,EACAC,iBAAA,EACAC,2BAAA,GAEAlvB,EAAAwE,KAAA,KAEA,kBAAAxE,EAAA2E,WAAA2S,OACA,kBAAAtX,EAAA2E,WAAA4S,UAAAvX,EAAAyC,KAAAuP,MAAAoD,SAAApV,EAAAwuB,MACAxuB,EAAAwE,KAAAxE,EAAA4uB,MAAAC,cACA,kBAAA7uB,EAAA2E,WAAA2S,OACA,eAAAtX,EAAA2E,WAAA4S,UAAAvX,EAAAyuB,mBAAAzuB,EAAAwuB,MACAxuB,EAAAwE,KAAAxE,EAAA4uB,MAAAE,kBACA,gBAAA9uB,EAAA2E,WAAA2S,QACA,kBAAAtX,EAAA2E,WAAA4S,UAAA,eAAAvX,EAAA2E,WAAA4S,WAAAvX,EAAAyuB,mBAAAzuB,EAAAwuB,MACAxuB,EAAAwE,KAAAxE,EAAA4uB,MAAAG,gBACA,kBAAA/uB,EAAA2E,WAAA2S,OACA,cAAAtX,EAAA2E,WAAA4S,SACAvX,EAAAwE,KAAAxE,EAAA4uB,MAAAI,mBACA,gBAAAhvB,EAAA2E,WAAA2S,OACA,cAAAtX,EAAA2E,WAAA4S,UAAA,eAAAvX,EAAA2E,WAAA4S,SAEA,gBAAAvX,EAAA2E,WAAA2S,OACA,cAAAtX,EAAA2E,WAAA4S,WACAvX,EAAAwE,KAAAxE,EAAA4uB,MAAAM,4BAHAlvB,EAAAwE,KAAAxE,EAAA4uB,MAAAK,iBAMAjvB,EAAAmvB,cAAA,cAAAnvB,EAAA2E,WAAA4S,UAAA,yBAAAvX,EAAA2E,WAAA4S,UACA,2BAAAvX,EAAA2E,WAAA4S,UAAA,kBAAAvX,EAAA2E,WAAA4S,UACAvX,EAAAwE,OAAAxE,EAAA4uB,MAAAM,2BAEAlvB,EAAAoG,QAAA,WACA,gBAAApG,EAAA2E,WAAA2S,OAAA,MAAAtX,EAAA2E,WAAAkK,OACAoC,EAAA/N,MACAwU,SAAA1X,EAAA2E,WAAA+S,SACA0X,WAAApvB,EAAA4X,aAAArW,GACA8tB,aAAArvB,EAAA2E,WAAApD,KACAC,SAAAtC,KAAA,WACA+C,EAAAoE,MAAArG,EAAAyC,SAGAzC,EAAA2E,WAAA4O,MAAAvT,EAAA2E,WAAA6S,kBACAvG,EAAAK,OAAAtR,EAAA2E,YAAAnD,SAAAtC,KAAA,WACA+C,EAAAoE,MAAArG,EAAAyC,U9Fy+JIyD,EAAWvG,SAAW,OAAQ,aAAc,eAAgB,UAAW,eAAgB,iB8FziK3FtB,QAAAuB,OAAA,OACAM,WAAA,yBAAAgG,MCNA,SAAA7H,GACA,YAQAA,GACAuB,OAAA,OACAO,UAAA,cACAG,UACAgvB,YAAA,IACAC,cAAA,KAEAruB,YAAA,4CAEAhB,YAAA,SAAA,gCAAA,SAAA8B,EAAAwtB,GACA,GAAAxvB,GAAAC,IAEAD,GAAAyvB,aAAAD,EAAAzhB,KAEA/N,EAAA0vB,YAAA,WACA,GAAAlvB,GAAAnC,EAAAqE,KAAAV,EAAAxB,OACAA,GAAAwN,KAAAhO,EAAAsvB,YACAttB,EAAA6C,GAAA7C,EAAA2tB,QAAAnvB,MAIAH,aAAA,UAEAhC,SChCA,WACA,YAMA,SAAA0R,GAAA/N,GAKA,QAAAuO,GAAAvQ,GACA,GAAA4vB,IAAA,CAMA,OAJA5vB,GAAAA,cACAA,EAAAA,YAAA,YAIA6vB,YAAA,MACAC,UACAC,QAAA,SAAAvvB,IACAovB,GAAA5vB,EAAA0Q,UACA1Q,EAAAmO,SAAA,GAEAyhB,GAAA,CAEA,IAAAjsB,GAAA,KACAqsB,EAAA,IACAxvB,GAAAyvB,UAAA,KACAtsB,EAAAnD,EAAAyvB,UAAA,GAAAlU,QAAA,IAAA,IAAAA,QAAA,IAAA,IACAiU,EAAAxvB,EAAA6P,UAAA1M,GAAAusB,cAGA,IAAA7E,IACAtd,KAAA/N,EAAAiQ,mBACAjC,KAAAxN,EAAAwN,OAAA,EACArK,aAAAA,EACAwsB,cAAAH,EACAI,cAAApwB,EAAAqN,OAAArO,IAQA,OALAX,SAAA8b,OAAAkR,EAAArrB,EAAAqN,QAGArL,EAAA6C,GAAA,KAAAmJ,KAAAxN,EAAAwN,SAAAqiB,QAAA,IAEArwB,EAAAyC,KAAAzC,EAAAA,aAAAqrB,GAAA7pB,SAAAtC,KAAA,SAAA4B,GAEA,MADAd,GAAAmO,SAAA,EACAiQ,MAAAhN,QAAAtQ,IACAN,EAAA8vB,MAAAxvB,EAAAoI,QACA1I,EAAA4P,MAAAtP,EAAAoI,QACAlJ,EAAAwe,OAAA1d,GAAA,GAAAA,EAAAoI,OACApI,IAEAN,EAAA8vB,MAAAxvB,EAAAyuB,eACAvvB,EAAAwe,OAAA1d,EAAA+C,SAAA,GAAA/C,EAAA+C,QAAAqF,OACApI,EAAA+C,aAlDA,OACA0M,SAAAA,GhGmpKIR,EAAcpQ,SAAW,UgGzpK7BtB,QAAAuB,OAAA,OACA6R,QAAA,gBAAA1B,MCJA,SAAA1R,GACA,YASA,SAAA4D,GAAAD,EAAAuuB,EAAA5qB,GAeA,QAAAtB,GAAA7D,GACA2iB,GAAA,CACA,IAAAqN,GAAAD,EAAAlsB,KAAA7D,EAWA,OAVAiwB,GAAAniB,KAAAkiB,GAGAA,EAAA5rB,OAAA4rB,SAAA,SAAA1vB,GACA,mBAAAA,GACAqF,EAAArF,KAIA6E,EAAAqY,QACAwS,EASA,QAAAE,GAAApsB,EAAAqsB,EAAAnwB,GACAA,IAAAA,KAEA,IAAAiB,GAAAkvB,GAAA,EAeA,OAdAnwB,GAAAW,QAAAM,EAAAN,QACAX,EAAAW,QAAAhB,UAAA,WACA,MAAAsB,GAAAtB,WAGA9B,EAAAqjB,MAAAlhB,GACAowB,SAAA,SACAzwB,UAAA,cACAgB,SACAmD,MAAA,WACA,MAAAA,OAIAD,EAAA7D,GAIA,QAAAqwB,GAAAjsB,EAAAjE,EAAAH,GACA2iB,GACAxd,EAAAqY,QACA3X,EAAAzB,IAEA5C,EAAA6C,GAAAlE,EAAAH,GAIA,QAAA6F,GAAAvF,GACAgwB,IACAL,EAAAA,EAAAvnB,OAAA,GAAA7C,MAAAvF,GACA2vB,EAAAM,MAGA,QAAA5qB,GAAArF,GACAgwB,IACAL,EAAAA,EAAAvnB,OAAA,GAAA/C,QAAArF,GACA2vB,EAAAM,MAGA,QAAAD,KACA3N,GAAA,EACAA,EAAA,IACAA,EAAA,GAlFA,GAAAA,GAAA,EACAsN,IAEA,QACAjiB,OAAA,WACA,MAAA2U,IAEA9e,KAAAA,EACAqsB,cAAAA,EACAG,eAAAA,EACAxqB,MAAAA,EACAF,QAAAA,GjG8sKIlE,EAAatC,SAAW,SAAU,YAAa,gBiG9tKnDtB,EAAAuB,OAAA,OACAinB,QAAA,eAAA5kB,IA2FA5D,SClGA,WACA,YAsBA,SAAA6H,GAAAjE,GACA,GAAAjC,GAAAC,IAEAD,GAAAmG,QAAA,WACAlE,EAAAkE,WlGmzKID,EAAWvG,SAAW,gBkGn0K1BtB,QACAuB,OAAA,OACAO,UAAA,eACAe,YAAA,yCACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACAa,QAAA,UClBA,SAAA9C,GACA,YAQA,SAAA2yB,KACA,OACA9lB,SAAA,IACA6Q,SAAA,EACA5Q,OACA8lB,KAAA,KAEA/vB,YAAA,oCAbA7C,EACAuB,OAAA,OACA2L,UAAA,UAAAylB,GAEAA,EAAArxB,YAYAtB,SCnBA,SAAAA,GACA,YAQA,SAAA6yB,GAAAxL,EAAAZ,GAKA,QAAAqM,GAAAlV,GACA,GAAAsK,GAAAb,EAAAe,OAKA,OAJA3B,GAAAxf,IAAA,QAAA2W,EAAA,SAAA/c,KAAA,SAAAsL,GACA+b,EAAAplB,QAAAqJ,EAAA1J,QAGAylB,EAAAI,QAVA,OACAwK,QAAAA,GARA9yB,EACAuB,OAAA,OACA6R,QAAA,OAAAyf,GAEAA,EAAAvxB,SAAA,KAAA,UAgBAtB,SCvBA,SAAAA,GACA,YAOAA,GACAuB,OAAA,OACAO,UAAA,UACAG,UACA2wB,KAAA,IACAG,aAAA,IACAZ,MAAA,IACAa,QAAA,KAEAnwB,YAAA,gCAEAhB,YAAA,UAAA,SAAA,cAAA,SAAAmpB,EAAArnB,EAAAirB,GACA,GAAAjtB,GAAAC,IAEAD,GAAAsxB,kBAAA,SAAAC,GACA,GAAAC,IAAA,CACA,IAAAD,EAAA,CACA,GAAAlD,GAAAkD,EAAAxV,QAAA,OAAA,IAAAhT,MAAA,IACAslB,GAAAzP,QAAA,SAAAje,GACAqB,EAAAusB,SAAA5tB,KACA6wB,GAAA,KAIA,MAAAA,IAGAxxB,EAAAwwB,MAAA,SAAAjvB,GACA0rB,EAAA5oB,KAAA9C,IAGAvB,EAAAyxB,SAAA,WACApI,EAAAqI,WAAA,MACA1xB,EAAAoxB,cAAApxB,EAAAoxB,oBAKA/yB,SCvCA,SAAAA,GACA,YAQA,SAAAszB,GAAA/f,GACA,OACA1G,SAAA,IACA6Q,SAAA,EACA7a,YAAA,qCACAga,KAAA,SAAA/P,EAAApI,EAAAqY,GACA,GAAA/c,EAAA+S,QAAAjG,EAAAymB,KAAAC,SAAA,CACA9uB,EAAA+uB,OAAA,0CAOA,KAJA,GAAAlxB,GAAAmC,EAAAnC,SACAmxB,GAAA,EAGAnxB,EAAAsI,OAAA,IAAA6oB,GAEAnxB,EAAAoxB,SAAA,kBACAD,GAAA,GAEAnxB,EAAAA,EAAAA,QAIAmxB,GACAhvB,EAAAia,SAAA,0BAEAja,EAAAia,SAAA,oBAGApL,EAAA7O,EAAAypB,YAAArhB,KAGAA,OACAymB,KAAA,MAvCAvzB,EACAuB,OAAA,OACA2L,UAAA,WAAAomB,GAEAA,EAAAhyB,SAAA,aAuCAtB,SCrDA,WACA,YAOA,IAAA8P,IACA/N,SAAA,2HAGAE,UACA2xB,UAAA,IACAC,QAAA,IACAC,IAAA,KAIA9zB,SACAuB,OAAA,OACAO,UAAA,UAAAgO,MCrBA,SAAA9P,GACA,YAOAA,GACAuB,OAAA,OACAO,UAAA,WACAe,YAAA,sCAEAhB,YAAA,aAAA,gBAAA,SAAA3B,EAAAE,GACA,GAAAuB,GAAAC,IAEAD,GAAAjB,eAAA,SAAAK,GACAA,GACAb,EAAAQ,eAAAK,GAEAY,EAAAZ,KAAAX,EAAAW,MAGAY,EAAAjB,mBAGAsB,aAAA,UAEAhC,SC5BA,WACA,YAKA,SAAA+zB,KASA,QAAAjT,GAAAhU,EAAApI,GACAA,EAAA6d,KAAA,eAAAyR,KAAA,WACA,GAAAC,GAAAj0B,QAAA0E,QAAA9C,MACAsyB,EAAAD,EAAA1R,KAAA,sDAEA2R,GAAArpB,OAAA,GACAqpB,EAAAF,KAAA,WACA,GAAAG,GAAAn0B,QAAA0E,QAAA9C,KACAkL,GAAAyC,OAAA,WACA,MAAA4kB,GAAAR,SAAA,eAAAQ,EAAAR,SAAA,aACA,SAAAS,GACAH,EAAAI,YAAA,YAAAD,SAnBA,GAAAlnB,IACA0P,QAAA,OACA/P,SAAA,IACAgQ,KAAAiE,EAGA,OAAA5T,GAVAlN,QAAAuB,OAAA,OACA2L,UAAA,iBAAA6mB,MCHA,WACA,YAMA,SAAAO,KACA,OACAznB,SAAA,IACAC,OACA5J,GAAA,IACAmH,KAAA,IACAwU,MAAA,IACAmB,OAAA,IACA/C,MAAA,IACA6B,SAAA,IACAnB,MAAA,IACA5B,KAAA,KAEAha,SAAA,mXAQAksB,QAAA,SAAAsG,MAzBAv0B,QACAuB,OAAA,OACA2L,UAAA,QAAAonB,MCEAt0B,QAAAuB,OAAA,OAAAyN,OAAA,SAAA,WAEA,MAAA,UAAAwlB,EAAAC,EAAAC,GAEA,GAAAD,KAAA,EACA,MAAAD,EAGA,KAAAC,GAAAz0B,QAAA20B,YAAAF,KAAAz0B,QAAA+S,QAAAyhB,GAAA,CACA,GAAAI,MAEAC,EAAA,SAAAzwB,GACA,MAAApE,SAAA80B,SAAA1wB,IAAApE,QAAA0sB,SAAA+H,GACAC,GAAA10B,QAAA0sB,SAAAgI,IACAtwB,EAAAqwB,GACArwB,EAAAqwB,GAAAC,GAMAtwB,EAAAqwB,GAGArwB,EAIApE,SAAAugB,QAAAiU,EAAA,SAAApwB,GAGA,IAAA,GAFA2wB,IAAA,EAEA/pB,EAAA,EAAAA,EAAA4pB,EAAA/pB,OAAAG,IACA,GAAAhL,QAAAg1B,OAAAH,EAAAD,EAAA5pB,IAAA6pB,EAAAzwB,IAAA,CACA2wB,GAAA,CACA,OAGAA,GACAH,EAAA3kB,KAAA7L,KAIAowB,EAAAI,EAEA,MAAAJ,MCpDA,SAAAx0B,GACA,YAGAA,GAAAuB,OAAA,OAAAyN,OAAA,MAAA,WACA,MAAA,UAAAimB,GACA,MAAAjkB,UAAAikB,EAAA,QAIAj1B,SCVA,WACA,YAUA,SAAA4Q,KAGA,QAAAskB,GAAAC,GAEA,MADAA,GAAAnT,KAAAoT,MAAAD,GACAA,EAAA,GACA,EAAA,IACAA,EAAA,IAAA,GACAA,EAAAA,EAAA,IAAA,GAAA,KAEAA,EAAAA,EAAA,IAAA,GAAA,KAAAA,EAAA,GAAA,IATA,MAAAD,GALAl1B,QACAuB,OAAA,OACAyN,OAAA,UAAA4B,MCTA,WACA,YAMA,SAAAykB,KAGA,QAAAC,GAAAL,GAKA,MAJAA,IAAA,OAAAA,IACAA,EAAAA,EAAAM,cACAN,EAAAA,EAAAhkB,UAAA,EAAA,GAAA4gB,cAAAoD,EAAAhkB,UAAA,IAEAgkB,EAPA,MAAAK,GALAt1B,QACAuB,OAAA,OACAyN,OAAA,aAAAqmB,MCLA,WACA,YAIA,IAAAjd,IACArW,SAAA,qCACAE,UACA4c,MAAA,IACAoB,OAAA,IACA/K,MAAA,IACAsgB,KAAA,KAGA3zB,YAAA,SAAA,SAAAiN,GAcA,QAAA+V,KAEA7kB,QAAAgF,SAAArD,EAAAkd,SACAld,EAAA4E,OAAA,IAAA5E,EAAAkd,OAhBA,GAAAld,GAAAC,IACAD,GAAAse,SACAte,EAAAuT,MACAvT,EAAAse,OAAA,aAEAte,EAAA6zB,KACA7zB,EAAAse,OAAA,QAEAte,EAAAse,OAAA,qBAYAnR,EAAAS,OAAA,WACA,MAAA5N,GAAAkd,OACA,WACAgG,QAGA7iB,aAAA,OAGAhC,SACAuB,OAAA,OACAO,UAAA,OAAAsW,MC9CA,WACA,YAYA,SAAAvQ,GAAAmjB,GAQA,QAAAyK,KACAroB,QAAAZ,SAAAC,eAAA,gBACAD,SAAAtG,KAAAwvB,UAAA,IAAAlpB,SAAAmpB,gBAAAD,UAAA,GACAlpB,SAAAC,eAAA,cAAAmpB,MAAAvW,QAAA,QAEA7S,SAAAC,eAAA,cAAAmpB,MAAAvW,QAAA,QAZA,GAAA1d,GAAAC,IAGAopB,GAAA6K,SAAA,WACAJ,KAaA9zB,EAAAm0B,YAAA,WACAjU,EAAA,cAAAkU,SAAAL,UAAA,OAAA,MhHkwLI7tB,EAAWvG,SAAW,UgH/xL1B,IAAA00B,IACAj0B,SAAA,oHACAE,UACAg0B,KAAA,KAEAp0B,WAAAgG,EACA7F,aAAA,OA2BAhC,SACAuB,OAAA,OACAO,UAAA,YAAAk0B,MCtCA,WACA,YAIA,IAAAE,IACAn0B,SAAA,+CACAC,aAAA,OACAC,UACAgb,MAAA,KAIAjd,SACAuB,OAAA,OACAO,UAAA,WAAAo0B,MCfA,WACA,YAMA,SAAA5uB,KAWA,QAAA6uB,GAAAzyB,EAAA0yB,EAAAj2B,GAqBA,QAAAk2B,KACA,MAAAC,GAGA,QAAAC,GAAApB,GACA,MAAA,OAAAA,EAAAqB,EACArB,EAGA,QAAAxV,KACA8W,EAAAngB,OAAA,EAAAmgB,EAAA5rB,QAGA,QAAA6rB,KAEAD,EAAAlW,QAAA,SAAAoW,EAAAlW,GACA,GAAAkW,EAAAH,SACAC,EAAAngB,OAAAmK,EAAA,GAEA,WAAAkW,EAAA5xB,MACA0xB,EAAAngB,OAAAmK,EAAA,KAKA,QAAAxZ,KACA,MAAAwvB,GAYA,QAAApuB,GAAA+D,EAAAjK,EAAAgzB,EAAAvX,GACA,MAAAhc,MAAA6W,KACA1T,KAAA,UACAqH,IAAAA,EACAjK,OAAAA,EACAq0B,QAAAD,EAAApB,GACAmB,MAAAA,EACA1Y,SAAAA,IAIA,QAAAxV,GAAAgE,EAAAjK,EAAAgzB,EAAAvX,GACA,MAAAhc,MAAA6W,KACA1T,KAAA,SACAqH,IAAAA,EACAjK,OAAAA,EACAq0B,QAAAD,EAAApB,GACAmB,MAAAA,EACA1Y,SAAAA,IAIA,QAAA6N,GAAArf,EAAAjK,EAAAgzB,EAAAvX,GACA,MAAAhc,MAAA6W,KACA1T,KAAA,UACAqH,IAAAA,EACAjK,OAAAA,EACAq0B,QAAAD,EAAApB,GACAmB,MAAAA,EACA1Y,SAAAA,IAIA,QAAArW,GAAA6E,EAAAjK,EAAAgzB,EAAAvX,GACA,MAAAhc,MAAA6W,KACA1T,KAAA,OACAqH,IAAAA,EACAjK,OAAAA,EACAq0B,QAAAD,EAAApB,GACAmB,MAAAA,EACA1Y,SAAAA,IAIA,QAAAxK,GAAAwjB,GACAA,EAAAz0B,SACAy0B,EAAAz0B,UAEA,IAAAw0B,IACA5xB,KAAA6xB,EAAA7xB,KACAqH,IAAAgqB,EAAAS,YAAAD,EAAAxqB,KACAlJ,GAAA0zB,EAAAE,QACAN,QAAAI,EAAAJ,QACAF,MAAAM,EAAAz0B,OAAAm0B,MAAAM,EAAAz0B,OAAAm0B,MAAAM,EAAAN,MACA1Y,SAAAgZ,EAAAz0B,OAAAyb,SAAAgZ,EAAAz0B,OAAAyb,SAAA,YACAmZ,OAAAH,EAAAG,OACA/uB,MAAA,SAAAyuB,GACA,MAAAO,GAAAp1B,KAAAsB,GAAAuzB,IAMA,OAHAE,GAAAI,QACAN,EAAAxmB,KAAA0mB,GAEAA,EAGA,QAAAM,GAAAL,EAAAM,GACAN,EAAAE,QAAAA,IACAF,EAAAxqB,IAAAjM,EAAA6b,QAAA4a,EAAAxqB,IAAAwqB,EAAAz0B,OACA,IAAAg1B,GAAAv1B,KACA+0B,EAAA/0B,KAAAwR,QAAAwjB,EAMA,OALAA,GAAAJ,SAAAI,EAAAJ,QAAA,GACA9yB,EAAA,WACAyzB,EAAAH,WAAAJ,EAAAE,QAAAI,IACAN,EAAAJ,SAEAG,EAGA,QAAAK,GAAA9zB,EAAAg0B,GACA,GAAAE,GAAAF,EAAAA,EAAAT,CACA,OAAAY,GAAAD,EAAAE,IAAA,SAAA3pB,GACA,MAAAA,GAAAzK,KACAoK,QAAApK,GAAAk0B,GAGA,QAAAC,GAAA5W,EAAA2W,GACA,MAAAA,GAAA9gB,OAAAmK,EAAA,GAjJA,GAAA6V,GAAA10B,KAAA00B,MACAQ,EAAA,EACAL,KACAD,EAAA,GAEA,QACApjB,QAAAA,EACAijB,QAAAA,EACA5d,IAAAwe,EACAD,WAAAA,EACAK,kBAAAA,EACA1X,MAAAA,EACA+W,eAAAA,EACAzvB,IAAAA,EACAoB,QAAAA,EACAD,MAAAA,EACAb,KAAAA,EACAkkB,QAAAA,GA5BA7pB,KAAA00B,OAAA,EAEA10B,KAAA21B,KAAApB,EAEAv0B,KAAA41B,YAAA,SAAAnB,GACAz0B,KAAA00B,MAAAD,GAGAF,EAAA70B,SAAA,WAAA,OAAA,cAbAtB,QACAuB,OAAA,OACAwlB,SAAA,eAAAzf,MCLA,WACA,YAQA,SAAAmwB,GAAAC,GAEAA,EAAAF,aAAA,GARAx3B,QACAuB,OAAA,OACA6B,OAAAq0B,GAEAA,EAAAn2B,SAAA,2BCPA,WACA,YAoBA,SAAAq2B,GAAA7oB,EAAAxH,EAAA1D,EAAA1D,EAAAC,GAMA,QAAAy3B,GAAAC,EAAAl3B,EAAA8B,GACA9B,EAAAA,GAAA,OAAAA,EAAAA,EAAAk3B,EACAl2B,EAAA80B,OAAAxmB,KACA3I,EAAAmR,KAEA1T,KAAA,SACAqH,IAAAzL,EACAwB,OAAAM,EACA+zB,QAAA,IACAF,MAAAhvB,EAAA+uB,UACAU,QAAA,GAEAp1B,EAAA80B,SAIAz2B,QAAA0E,QAAA,cAAAqxB,SAAAL,UAAA,GAAA,QArBA,GAAA/zB,GAAAC,IAEAD,GAAA80B,OAAAnvB,EAAAL,MACAtF,EAAAm2B,aAAAl0B,EAAAuM,MAqBA,IAAA4nB,GAAA73B,EAAAyrB,IAAA,gBAAA,SAAA9R,EAAAme,GAEA,KAAAr2B,EAAAm2B,iBAAAn2B,EAAAwwB,MAAA,CAGA,GAAAnnB,EAGA,QAFA6O,EAAAoe,kBAEAD,EAAA7N,QAEA,IAAA,GACAyN,EAAA,uBAAA,2BACA,MAEA,KAAA,KACA,GAAAM,GAAAF,EAAA9N,QAAA,eACAiO,EAAAH,EAAA9N,QAAA,eAEA,IAAAgO,EAAA,CACA,GAAAE,GAAAj4B,EAAA6b,QAAA,wBAAAmc,EACAP,GAAAM,EAAAA,GAAAE,WAAAA,QAEA,IAAAJ,EAAAv1B,MAAAu1B,EAAAv1B,KAAA41B,YACA,IAAArtB,EAAA,EAAAA,EAAAgtB,EAAAv1B,KAAA41B,YAAAxtB,OAAAG,IAAA,CACA,GAAAstB,GAAAN,EAAAv1B,KAAA41B,YAAArtB,GAEAutB,EAAAD,EAAAE,MAAA9a,QAAA,WAAA,MACA+a,EAAAt4B,EAAA6b,QAAA,kBAAAsc,EAAAI,WAAA,IAAAH,EACAX,GAAA,SAAAa,EAAA,mBAAA,SAAAH,EAAAT,SAAAY,UAAAA,QAGAT,GAAAv1B,MAAAu1B,EAAAv1B,KAAAo1B,UACAG,EAAAv1B,KAAAk2B,OAEA,YAAAX,EAAAv1B,KAAAk2B,OAAA,GAAAC,KACAhB,EAAA,iBAAA,KAAA,MACA,SAAAI,EAAAv1B,KAAAk2B,OAAA,GAAAC,MACAhB,EAAA,aAAA,KAAA,MAGAA,EAAAI,EAAAv1B,KAAAo1B,QAAAG,EAAAv1B,KAAAo1B,QAAAG,EAAAv1B,MAGA,MACA,KAAA,KACA,KAEA,KAAA,KACAm1B,EAAA,mBAAA,2BACA,MAEA,KAAA,KACAA,EAAA,YAAA,iBACA,MAEA,SACAI,EAAAv1B,MAAAu1B,EAAAv1B,KAAAo1B,UACA,0BAAAG,EAAAv1B,KAAA2F,MACAwvB,EAAA,wBAAA,6BAEAA,EAAAI,EAAAv1B,KAAAo1B,aAMA/oB,GAAA6c,IAAA,WAAA,WACA3rB,QAAAqoB,UAAA0P,IAAA,OAAAA,IACAA,IACAp2B,EAAA80B,WAEA90B,EAAA80B,YpHo6LIkB,EAAgBr2B,SAAW,SAAU,eAAgB,eAAgB,aAAc,aoHthMvF,IAAAq1B,IACA50B,SAAA,yYAMAF,WAAA81B,EACA11B,UACAkwB,MAAA,KAIAnyB,SACAuB,OAAA,OACAO,UAAA,QAAA60B,MClBA,WACA,YAOA,SAAAv0B,GAAAC,GACAA,EAAAC,MAAA,cACAC,OAAA,QACAC,IAAA,8BACAC,MACAY,aAAA,cACAX,UAAA,wBAEAC,OACAgE,YACA5E,SAAA,2JAKA6pB,eACAC,MAAA,KrH4nMIzpB,EAAYd,SAAW,kBqHjpM3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAOA,SAAAA,GAAAC,EAAA2jB,GACA,GAAAvf,GAAA,gBACAtE,GACAsE,KAAAA,EACAwf,QAAA,IAAAxf,EACA2f,cAAA,iBACAyS,aAAA,2DACAt2B,OAAA,SAGAD,EAAA0jB,EAAA7jB,EAEAnC,SAAAqjB,MAAA/gB,EAAAC,QACAE,MACAY,aAAA,eAEAlB,QACA22B,UAAA,MAEAh2B,SAEAuQ,SAAA,cAAA,SAAAvP,GACA,MAAAA,GAAAmD,IAAA,eAKAjH,QAAAqjB,MAAA/gB,EAAA8d,SAGA/d,EACAC,MAAAH,EAAAsE,KAAAnE,EAAAC,QACAD,MAAAA,EAAA8d,KAAA/V,KAAA/H,EAAA8d,MtH2oMIhe,EAAYd,SAAW,iBAAkB,gBsHhrM7CtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAcA,SAAAyF,GAAA7E,EAAAwO,EAAAC,EAAAC,EACA9N,EAAAgP,EAAArP,EAAAI,GACA,GAAAhC,GAAAC,IAEAD,GAAAyC,KAAAwO,EACAjR,EAAAgQ,OAAA3O,EAAA2M,KAAA3M,EAAA2M,KAAA,EACAhO,EAAAiQ,mBAAAJ,EAAA9B,KACA/N,EAAAm3B,UAAA91B,EAAA81B,UACAn3B,EAAAqN,QACArO,IAAAyM,OACAoD,OAAApD,OACA0rB,UAAA91B,EAAA81B,WAEAn3B,EAAAA,YAAA,gBACAA,EAAAmQ,YAAA,GAAAL,IACAM,MAAApQ,EAAAiQ,mBACAjC,KAAAhO,EAAAgQ,OACA3C,OAAArN,EAAAqN,OACAgD,SAAAkD,MAAA,SACAxD,EAAAQ,SAAAvQ,IAIAA,EAAAo3B,SAAA,SAAA71B,GACA0P,EAAAM,kBAAAhQ,GAAAA,IAAAC,SAAAtC,KAAA,WACA8C,EAAA6C,GAAA,sBAAAsyB,WAAA,IAAAzmB,QAAA,OAIA1Q,EAAAq3B,SAAA,SAAA91B,GACA0P,EAAAO,kBAAAjQ,GAAAA,IAAAC,SAAAtC,KAAA,WACA8C,EAAA6C,GAAA,sBAAAsyB,WAAA,IAAAzmB,QAAA,OvHkrMIxK,EAAWvG,SAAW,eAAgB,0BAA2B,gBAAiB,gBAAiB,eAAgB,UAAW,YAAa,UuH7tM/ItB,QACAuB,OAAA,OACAO,UAAA,eACAe,YAAA,sCACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACAoR,QAAA,UCVA,WACA,YAOA,SAAAjR,GAAAC,EAAA2jB,EAAAiT,GACA,GAAA71B,GAAA61B,IACAxyB,EAAA,iBACAtE,GACAsE,KAAAA,EACAwf,QAAA,IAAAxf,EACA2f,cAAA,kBACAyS,aAAA,8CACAK,aAAA91B,EAAAtB,WAGAQ,EAAA0jB,EAAA7jB,EAEAnC,SAAAqjB,MAAA/gB,EAAAC,QACAE,MACAY,aAAA,iBAIArD,QAAAqjB,MAAA/gB,EAAA8d,SAEApgB,QAAAqjB,MAAA/gB,EAAA+jB,QAAAvjB,QAAAM,EAAAN,UAEA9C,QAAAqjB,MAAA/gB,EAAA4C,MACApC,QAAA9C,QAAAqjB,MAAAjgB,EAAAN,SAEAsB,MAAA,OAAA,eAAA,SAAArB,EAAAC,GACA,MAAAD,GAAAo2B,SAAAj2B,GAAAF,EAAAE,KAAAC,eAMAd,EACAC,MAAAH,EAAAsE,KAAAnE,EAAAC,QACAD,MAAAA,EAAA8d,KAAA/V,KAAA/H,EAAA8d,MACA9d,MAAAA,EAAA+jB,OAAAhc,KAAA/H,EAAA+jB,QACA/jB,MAAAA,EAAA4C,KAAAmF,KAAA/H,EAAA4C,MxHyuMI9C,EAAYd,SAAW,iBAAkB,eAAgB,uBwHnxM7DtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAWA,SAAAyF,GAAA7E,EAAAwO,EAAAC,EAAAC,EACA9N,EAAAb,EAAAq2B,GACA,GAAAz3B,GAAAC,IAEAD,GAAAyC,KAAArB,EACApB,EAAAA,YAAA,sBACAA,EAAAgQ,OAAA3O,EAAA2M,KAAA3M,EAAA2M,KAAA,EACAhO,EAAAiQ,mBAAAJ,EAAA9B,KACA/N,EAAAqN,QACArO,IAAAyM,OACAxG,IAAA,gBACAqI,SAAA,GAEAtN,EAAAmQ,YAAA,GAAAL,IACAM,MAAApQ,EAAAiQ,mBACAjC,KAAAhO,EAAAgQ,OACA3C,OAAArN,EAAAqN,OACAgD,SAAAW,OAAA,QACAjB,EAAAQ,SAAAvQ,IAIAA,EAAA03B,gBAAA,WACAD,EAAAjN,UAAA,gCACAld,QAAAtN,EAAAqN,OAAAC,QACAqqB,IAAA33B,EAAAqN,OAAAsqB,IACAC,IAAA53B,EAAAqN,OAAAuqB,KAEA,oFAIA53B,EAAA63B,QACA,KAAA,GAAAxuB,GAAA,KAAAA,IAAA,GAAAZ,OAAAyN,cAAA7M,IACArJ,EAAA63B,MAAAvpB,KAAAjF,EAIArJ,GAAA83B,SACA,KAAA,GAAArjB,GAAA,EAAAA,GAAA,GAAAA,IACAzU,EAAA83B,OAAAxpB,KAAAmG,GzHoxMIvO,EAAWvG,SAAW,eAAgB,0BAA2B,gBAAiB,gBAAiB,eAAgB,OAAQ,gByHr0M/HtB,QACAuB,OAAA,OACAO,UAAA,qBACAe,YAAA,8CACAhB,WAAAgG,EACA7F,aAAA,YCRA,WACA,YAEAhC,SACAuB,OAAA,OAGAm4B,SAAA,sBAAA,SAAAvH,GACA,GAAArvB,GAAA,WAIA,OAHAqvB,KACArvB,EAAA,kBAGAhB,UAAA,8BACAgB,EAAA,0BACAA,EAAA,0CAEAA,SAEAsB,MAAA,OAAA,SAAArB,GACA,MAAA,IAAAA,YCpBA,WACA,YAeA,SAAA8E,GAAAnE,EAAAC,EAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAL,EAAAd,EAAAuE,EAAA1D,EAAA+1B,GACA,GAAAh4B,GAAAC,IAEAD,GAAAyC,KAAAG,SACA5C,EAAAyC,KAAAG,WAEA5C,EAAAyC,KAAAI,OACA7C,EAAAyC,KAAAG,OAAAE,KAAA9C,EAAAyC,KAAAI,MAGA7C,EAAAwD,cAAA,WACAxD,EAAAyC,KAAAG,QAAAa,UAAA,IAGA1B,EAAA,WACA1D,QAAA0E,QAAA,2BAAAC,UAGAhD,EAAAiD,KAAAjB,EAAA2tB,QAAA7uB,KAAAmC,KACAjD,EAAAyO,QAAA,WAAAzO,EAAAiD,MAAA,SAAAjD,EAAAiD,KAEAjD,EAAAi4B,mBAAA,WACAh2B,EAAAyuB,cAAA,+BAAAsH,GAAAjqB,KAAA,OAAAnJ,OAAA1F,KAAA,SAAA0F,GAEA5E,EAAA4D,YAAA0K,KAAA1J,GAEA5E,EAAAyC,KAAAmB,YAAA0K,KAAA1J,MAKA5E,EAAAkD,KAAA,WACAlD,EAAAyC,KAAAW,KAAA,WACApD,EAAAyC,KAAAG,SACA5C,EAAAyC,KAAAI,KAAA7C,EAAAyC,KAAAG,OAAAE,MAGAzE,QAAAgF,SAAArD,EAAAyC,KAAAa,mBACAtD,EAAAyC,KAAAa,gBAAAtD,EAAAyC,KAAAa,gBAAA,KAEAtD,EAAAyC,KAAA,iBAAAzC,EAAAyC,KAAAoE,kBAAA7G,EAAA4G,gBACAjB,EAAAc,MAAA,kCAEAzG,EAAAyC,KAAAlB,GACAW,EAAAqB,KAAAvD,EAAAyC,MAAAjB,SAAAtC,KAAA,SAAA4B,GACAkB,EAAA6C,GAAA,yBAGA3C,EAAAiiB,SAAAnkB,EAAAyC,MAAAjB,SAAAtC,KAAA,SAAA4B,GACAkB,EAAA6C,GAAA,0BAMAzC,EAAAsB,SAAAC,aAAA,WAAAnC,SAAAtC,KAAA,SAAA4B,GACAd,EAAA4D,YAAA9C,EAAA+C,UAOAtB,EAAAuB,QAAAtC,SAAAtC,KAAA,SAAA4B,GACAd,EAAA+D,QAAAjD,IAGAd,EAAAgE,cAAA3B,EACArC,EAAAiE,aAAA1B,EACAvC,EAAAkE,YAAA5B,EAEAlB,EAAA+C,gBAAA3C,SAAAtC,KAAA,SAAA4B,GACAd,EAAAmE,cAAArD,I3Hu0MIoF,EAAWvG,SAAW,WAAY,SAAU,cAAe,YAAa,SAAU,OAAQ,QAAS,UAAW,OAAQ,eAAgB,eAAgB,wB2H55M1JtB,QACAuB,OAAA,OACAO,UAAA,qBACAe,YAAA,8CACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACAmC,KAAA,IACAy1B,eAAA,UCXA,WACA,YAOA,SAAAz3B,GAAAC,EAAA2jB,EAAA8T,GACA,GAAA12B,GAAA02B,IACArzB,EAAA,wBACAtE,GACAsE,KAAAA,EACAwf,QAAA,IAAAxf,EACA2f,cAAA,yBACAyS,aAAA,gDACAK,aAAA91B,EAAAtB,UACAS,OAAA,SAGAD,EAAA0jB,EAAA7jB,EAEAnC,SAAAqjB,MAAA/gB,EAAAC,QACAE,MACAY,aAAA,iBAIArD,QAAAqjB,MAAA/gB,EAAA8d,SAEApgB,QAAAqjB,MAAA/gB,EAAA+jB,QAAAvjB,QAAAM,EAAAN,UAEA9C,QAAAqjB,MAAA/gB,EAAA4C,MACApC,QAAA9C,QAAAqjB,MAAAjgB,EAAAN,SAEAsB,MAAA,kBAAA,eAAA,SAAA4C,EAAAhE,GACA,MAAAgE,GAAAC,KAAA/D,GAAAF,EAAAE,KAAAC,eAMAd,EACAC,MAAAH,EAAAsE,KAAAnE,EAAAC,QACAD,MAAAA,EAAA8d,KAAA/V,KAAA/H,EAAA8d,MACA9d,MAAAA,EAAA+jB,OAAAhc,KAAA/H,EAAA+jB,QACA/jB,MAAAA,EAAA4C,KAAAmF,KAAA/H,EAAA4C,M5Hg9MI9C,EAAYd,SAAW,iBAAkB,eAAgB,8B4H3/M7DtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAEApC,SACAuB,OAAA,OAGAm4B,SAAA,6BAAA,SAAAvH,GACA,GAAArvB,GAAA,WAIA,OAHAqvB,KACArvB,EAAA,kBAGAhB,UAAA,qCACAgB,EAAA,0BACAA,EAAA,iDAEAA,SAEAsB,MAAA,kBAAA,SAAA4C,GACA,MAAA,IAAAA,YCpBA,WACA,YAeA,SAAAa,GAAAnE,EAAAC,EAAAqD,EAAApD,EAAAZ,GACA,GAAArB,GAAAC,IAEA8B,GAAA,WACA1D,QAAA0E,QAAA,2BAAAC,UAGAhD,EAAAiD,KAAAjB,EAAA2tB,QAAA7uB,KAAAmC,KACAjD,EAAAyO,QAAA,WAAAzO,EAAAiD,MAAA,SAAAjD,EAAAiD,KAGAjD,EAAAkD,KAAA,WACA7B,EAAA6O,oBACAlQ,EAAAyC,KAAA21B,mBACAp4B,EAAAyC,KAAA21B,gBAAA72B,GAAAF,EAAAg3B,WAEAhzB,EAAAnC,KAAAlD,EAAAyC,MAAAjB,SAAAtC,KAAA,SAAA4B,GACAkB,EAAA6C,GAAA,iC9H2iNIqB,EAAWvG,SAAW,WAAY,SAAU,kBAAmB,eAAgB,gB8HzkNnFtB,QACAuB,OAAA,OACAO,UAAA,4BACAe,YAAA,4DACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACAmC,KAAA,IACAy1B,eAAA,UCXA,WACA,YAQA,SAAAz3B,GAAAC,GACAA,EAAAC,MAAA,SACAC,OAAA,QACAC,IAAA,SACAC,MACAY,eACAX,UAAA,eAEAC,OACAgE,YACA9D,YAAA,6BACAhB,WAAA,kBACAG,aAAA,cAGA4pB,eACAC,MAAA,KAtBA7rB,QACAuB,OAAA,OACA6B,OAAAhB,GAEAA,EAAAd,SAAA,qBCPA,SAAAtB,GACA,YAOA,SAAAmc,GAAAxY,EAAAD,EAAAwE,EAAA3E,EAAA+D,EAAA8U,GACA,GAAAza,GAAAC,IAEAD,GAAA0a,QACA1a,EAAA2a,YAAA,EAEA/Y,EAAAC,WAAA3C,KAAA,WACA8C,EAAA6C,GAAA4V,KAGA1Y,EAAA,WACA1D,EAAA0E,QAAA,2BAAAC,UAGAhD,EAAA6a,MAAA,WACAtU,EAAAsU,OACAC,SAAA9a,EAAA8a,SACAnL,SAAA3P,EAAA2P,SACAgL,WAAA3a,EAAA2a,aACAzb,KAAA,WACAc,EAAA+a,qBAAA,EACA/Y,EAAA6C,GAAA4V,KANAlU,SAOA,WACAZ,EAAAc,MAAA,sChIsnNI+T,EAAgB7a,SAAW,SAAU,WAAY,OAAQ,YAAa,eAAgB,mBgIlpN1FtB,EACAuB,OAAA,OACAM,WAAA,kBAAAsa,IA+BAnc,SCpCA,WACA,YAOA,SAAAoC,GAAAC,GACAA,EACAC,MAAA,mBACAC,OAAA,QACAC,IAAA,2BACAC,MACAY,aAAA,cACAX,UAAA,mBAEAC,OACAgE,YACA5E,SAAA,0FACAC,aAAA,SAGAc,SAEAm3B,UAAA,WAAA,eAAA,SAAA/K,EAAAlsB,GACA,MAAAksB,GAAAgL,aAAAvnB,OAAA3P,EAAA2P,SAAAxP,SAAAtC,KAAA,SAAA4B,GACA,MAAAA,OAIAgoB,SAAA,cAAA,SAAA3mB,GACA,MAAAA,GAAAmD,IAAA,uBAGA2kB,eACAjO,MAAA,qBjIwpNIvb,EAAYd,SAAW,kBiIzrN3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAMA,SAAA8pB,GAAA3B,GACA,MAAAA,GAAA,8BACAtjB,KACAiF,OAAA,MACA1J,IAAA,4BAEA03B,aACAhuB,OAAA,MACA1J,IAAA,uCAEA2sB,mBACAjjB,OAAA,MACA1J,IAAA,0CAEA6C,SACA6G,OAAA,MACA6G,SAAA,EACAvQ,IAAA,kClI+sNI0pB,EAAQ5qB,SAAW,akIpuNvBtB,QAAAuB,OAAA,OACA6R,QAAA,WAAA8Y,MCJA,WACA,YAMA,SAAAiO,GAAA5P,GACA,MAAAA,GAAA,kCACAtjB,KACAiF,OAAA,MACA6G,SAAA,KnI2vNIonB,EAAsB74B,SAAW,amInwNrCtB,QAAAuB,OAAA,OACA6R,QAAA,wBAAA+mB,MCJA,SAAAn6B,GACA,YAKAA,GACAuB,OAAA,OACAO,UAAA,gBACAG,UACAg4B,SAAA,IACAxP,QAAA,KAEA5nB,YAAA,+CACAb,aAAA,OACAH,YAAA,WAAA,SAAAqtB,GACA,GAAAvtB,GAAAC,IAEAD,GAAAiD,KAAA,OACAjD,EAAAyO,SAAA,EAEAzO,EAAAkjB,KAAA,SAAAoV,EAAAxZ,EAAAvR,GACA+qB,EAAAG,cAAA3Z,KAAAwZ,EAAAG,cAAA3Z,OAEAwZ,EAAAG,cAAA3Z,GAAAvR,SACA+qB,EAAAG,cAAA3Z,GAAAvR,OAAAA,IAIAvN,EAAAkD,KAAA,WAEA,GAAAw1B,IAAA,CAEA14B,GAAA8oB,QAAAlK,QAAA,SAAArR,EAAAuR,GACA9e,EAAAs4B,SAAAG,cAAA7Z,QAAA,SAAA+Z,GACAA,EAAAprB,SAAAA,GAAA9B,SAAAktB,EAAA/jB,QAAA8jB,IACA14B,EAAAwxB,OAAA1S,EACA4Z,GAAA,OAKAA,GACAnL,EAAArqB,KAAAlD,EAAAs4B,UAAA92B,SAAAtC,KAAA,SAAA4B,YAMAzC,SCjDA,WACA,YAOA,SAAAoC,GAAAC,EAAA2jB,EAAAuU,GACA,GAAAn3B,GAAAm3B,IACA9zB,EAAA,uBACAtE,GACAsE,KAAAA,EACAwf,QAAA,qBACAG,cAAA,gBACAyS,aAAA,qEACAK,aAAA91B,EAAAtB,UACAS,OAAA,iBAGAD,EAAA0jB,EAAA7jB,EAEAnC,SAAAqjB,MAAA/gB,EAAAC,QACAE,MACAY,aAAA,eAEAP,QAAA9C,QAAAqjB,MAAAjgB,EAAAN,SAEA+D,SAAA,OAAA,eAAA,SAAA9D,EAAAC,GACA,MAAAD,GAAAy3B,eAAAt3B,GAAAF,EAAAg3B,YAAA72B,SAAAtC,KAAA,SAAA4B,GACA,MAAAA,SAIAmpB,eACArpB,OAAA,wBAIAvC,QAAAqjB,MAAA/gB,EAAA8d,SAIApgB,QAAAqjB,MAAA/gB,EAAA+jB,QAAAvjB,QAAAM,EAAAN,UAEA9C,QAAAqjB,MAAA/gB,EAAA4C,MACApC,QAAA9C,QAAAqjB,MAAAjgB,EAAAN,SAEAsB,MAAA,OAAA,eAAA,SAAArB,EAAAC,GACA,MAAAD,GAAAo2B,SAAAj2B,GAAAF,EAAAE,KAAAC,eAMAd,EACAC,MAAAH,EAAAsE,KAAAnE,EAAAC,QACAD,MAAAA,EAAA8d,KAAA/V,KAAA/H,EAAA8d,MACA9d,MAAAA,EAAA+jB,OAAAhc,KAAA/H,EAAA+jB,QACA/jB,MAAAA,EAAA4C,KAAAmF,KAAA/H,EAAA4C,MrIgxNI9C,EAAYd,SAAW,iBAAkB,eAAgB,qBqIx0N7DtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAOA,SAAAA,GAAAC,EAAA2jB,EAAAyU,GACA,GAAAr3B,GAAAq3B,IACAh0B,EAAA,gBACAtE,GACAsE,KAAAA,EACAwf,QAAA,IAAAxf,EACA2f,cAAA,iBACAyS,aAAA,4CACAK,aAAA91B,EAAAtB,WAGAQ,EAAA0jB,EAAA7jB,EAEAnC,SAAAqjB,MAAA/gB,EAAAC,QACAE,MACAY,aAAA,iBAIArD,QAAAqjB,MAAA/gB,EAAA8d,SAEApgB,QAAAqjB,MAAA/gB,EAAA+jB,QAAAvjB,QAAAM,EAAAN,UAEA9C,QAAAqjB,MAAA/gB,EAAA4C,MACApC,QAAA9C,QAAAqjB,MAAAjgB,EAAAN,SAEAsB,MAAA,OAAA,eAAA,SAAArB,EAAAC,GACA,MAAAD,GAAAo2B,SAAAj2B,GAAAF,EAAAE,KAAAC,eAMAd,EACAC,MAAAH,EAAAsE,KAAAnE,EAAAC,QACAD,MAAAA,EAAA8d,KAAA/V,KAAA/H,EAAA8d,MACA9d,MAAAA,EAAA+jB,OAAAhc,KAAA/H,EAAA+jB,QACA/jB,MAAAA,EAAA4C,KAAAmF,KAAA/H,EAAA4C,MtI81NI9C,EAAYd,SAAW,iBAAkB,eAAgB,sBsIx4N7DtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAWA,SAAAyF,GAAA7E,EAAAwO,EAAAC,EAAAC,EACA9N,EAAAb,EAAAq2B,GACA,GAAAz3B,GAAAC,IAEAD,GAAAyC,KAAArB,EACApB,EAAAgQ,OAAA3O,EAAA2M,KAAA3M,EAAA2M,KAAA,EACAhO,EAAAiQ,mBAAAJ,EAAA9B,KACA/N,EAAAqN,QACArO,IAAAyM,OACAxG,IAAA,eACAqI,SAAA,GAEAtN,EAAAmQ,YAAA,GAAAL,IACAM,MAAApQ,EAAAiQ,mBACAjC,KAAAhO,EAAAgQ,OACA3C,OAAArN,EAAAqN,OACAgD,SAAAlJ,MAAA,QACA4I,EAAAQ,SAAAvQ,IAIAA,EAAA+4B,cAAA,WACAtB,EAAAjN,UAAA,+BAAA,KACA,oFvI05NItkB,EAAWvG,SAAW,eAAgB,0BAA2B,gBAAiB,gBAAiB,eAAgB,OAAQ,gBuI17N/HtB,QACAuB,OAAA,OACAO,UAAA,oBACAe,YAAA,4CACAhB,WAAAgG,EACA7F,aAAA,YCRA,WACA,YAEAhC,SACAuB,OAAA,OAGAm4B,SAAA,qBAAA,SAAAvH,GACA,GAAArvB,GAAA,WAIA,OAHAqvB,KACArvB,EAAA,kBAGAhB,UAAA,6BACAgB,EAAA,0BACAA,EAAA,yCAEAA,SAEAsB,MAAA,OAAA,SAAArB,GACA,MAAA,IAAAA,YCpBA,WACA,YAeA,SAAA8E,GAAAnE,EAAAC,EAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAL,EAAAyD,EAAA1D,EAAA+1B,GACA,GAAAh4B,GAAAC,IAEAD,GAAAyC,KAAAG,SACA5C,EAAAyC,KAAAG,WAEA5C,EAAAyC,KAAAI,OACA7C,EAAAyC,KAAAG,OAAAE,KAAA9C,EAAAyC,KAAAI,MAGA7C,EAAAwD,cAAA,WACAxD,EAAAyC,KAAAG,QAAAa,UAAA,IAGA1B,EAAA,WACA1D,QAAA0E,QAAA,2BAAAC,UAGAhD,EAAAiD,KAAAjB,EAAA2tB,QAAA7uB,KAAAmC,KACAjD,EAAAyO,QAAA,WAAAzO,EAAAiD,MAAA,SAAAjD,EAAAiD,KAGAjD,EAAAkD,KAAA,WACAlD,EAAAyC,KAAAW,KAAA,UACApD,EAAAyC,KAAAG,SACA5C,EAAAyC,KAAAI,KAAA7C,EAAAyC,KAAAG,OAAAE,MAEA9C,EAAAyC,KAAA,iBAAAzC,EAAAyC,KAAAoE,kBAAA7G,EAAA4G,gBACAjB,EAAAc,MAAA,kCAEAzG,EAAAyC,KAAAlB,GACAW,EAAAqB,KAAAvD,EAAAyC,MAAAjB,SAAAtC,KAAA,SAAA4B,GACAkB,EAAA6C,GAAA,wBAGA3C,EAAAiiB,SAAAnkB,EAAAyC,MAAAjB,SAAAtC,KAAA,SAAA4B,GACAkB,EAAA6C,GAAA,yBzI88NIqB,EAAWvG,SAAW,WAAY,SAAU,cAAe,YAAa,SAAU,OAAQ,QAAS,UAAW,eAAgB,eAAgB,wByI//NlJtB,QACAuB,OAAA,OACAO,UAAA,oBACAe,YAAA,4CACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACAmC,KAAA,IACAy1B,eAAA,UCXA,WACA,YAOA,SAAAz3B,GAAAC,EAAA2jB,EAAA2T,GACA,GAAAv2B,GAAAu2B,IACAlzB,EAAA,kBACAtE,GACAsE,KAAAA,EACAwf,QAAA,IAAAxf,EACA2f,cAAA,mBACAyS,aAAA,gDACAK,aAAA91B,EAAAtB,WAGAQ,EAAA0jB,EAAA7jB,EAEAnC,SAAAqjB,MAAA/gB,EAAAC,QACAE,MACAY,aAAA,iBAIArD,QAAAqjB,MAAA/gB,EAAA8d,SAEApgB,QAAAqjB,MAAA/gB,EAAA+jB,QAAAvjB,QAAAM,EAAAN,UAEA9C,QAAAqjB,MAAA/gB,EAAA4C,MACApC,QAAA9C,QAAAqjB,MAAAjgB,EAAAN,SAEAsB,MAAA,YAAA,eAAA,SAAAL,EAAAf,GACA,MAAAe,GAAAkD,KAAA/D,GAAAF,EAAAE,KAAAC,eAMAd,EACAC,MAAAH,EAAAsE,KAAAnE,EAAAC,QACAD,MAAAA,EAAA8d,KAAA/V,KAAA/H,EAAA8d,MACA9d,MAAAA,EAAA+jB,OAAAhc,KAAA/H,EAAA+jB,QACA/jB,MAAAA,EAAA4C,KAAAmF,KAAA/H,EAAA4C,M1IohOI9C,EAAYd,SAAW,iBAAkB,eAAgB,wB0I9jO7DtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAEApC,SACAuB,OAAA,OAGAm4B,SAAA,uBAAA,SAAAvH,GACA,GAAArvB,GAAA,WAIA,OAHAqvB,KACArvB,EAAA,kBAGAhB,UAAA,+BACAgB,EAAA,0BACAA,EAAA,0CACAA,SAEAsB,MAAA,YAAA,SAAAL,GACA,MAAA,IAAAA,YCnBA,WACA,YAeA,SAAA8D,GAAAnE,EAAAC,EAAAC,GACA,GAAAjC,GAAAC,IAEA8B,GAAA,WACA1D,QAAA0E,QAAA,2BAAAC,UAGAhD,EAAAiD,KAAAjB,EAAA2tB,QAAA7uB,KAAAmC,KACAjD,EAAAyO,QAAA,WAAAzO,EAAAiD,MAAA,SAAAjD,EAAAiD,KAGAjD,EAAAkD,KAAA,WACAlD,EAAAyC,KAAAu2B,QAAA95B,KAAA,WACA+C,EAAA4uB,eAAA7wB,EAAAyC,KAAA,wBAAAzC,EAAAk4B,mB5IgnOIhyB,EAAWvG,SAAW,WAAY,SAAU,gB4I1oOhDtB,QACAuB,OAAA,OACAO,UAAA,sBACAe,YAAA,gDACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACAmC,KAAA,IACAy1B,eAAA,UCXA,SAAA75B,GACA,YAOA,SAAA46B,GAAAhiB,EAAAc,EAAApS,GACA,GAAA3F,GAAAC,IACAD,GAAAiX,cAAAA,EAEAjX,EAAAkD,KAAA,WACA6U,EAAA7U,KAAAlD,EAAAiX,eAAAzV,U7IsqOIy3B,EAAwBt5B,SAAW,gBAAiB,gBAAiB,gB6IhrOzEtB,EACAuB,OAAA,OACAM,WAAA,0BAAA+4B,IAaA56B,SClBA,WACA,YAOA,SAAAoC,GAAAC,GACAA,EACAC,MAAA,uBACAC,OAAA,QACAC,IAAA,uBACAC,MACAY,aAAA,cACAX,UAAA,6BAEAC,OACAgE,YACA9D,YAAA,6CACAhB,WAAA,0BACAG,aAAA,SAGAc,SAEA8V,eAAA,gBAAA,SAAAc,GACA,MAAAA,GAAAzS,KAAA/D,GAAA,MAAAC,SAAAtC,KAAA,SAAA4B,GACA,MAAAA,QAIAmpB,eACAjO,MAAA,+B9IuqOIvb,EAAYd,SAAW,kB8IrsO3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAOA,SAAAA,GAAAC,EAAA2jB,EAAAuU,GACA,GAAAn3B,GAAAm3B,IACA9zB,EAAA,eACAtE,GACAsE,KAAAA,EACAwf,QAAA,IAAAxf,EACA2f,cAAA,gBACAyS,aAAA,0CACAK,aAAA91B,EAAAtB,WAGAQ,EAAA0jB,EAAA7jB,EAEAnC,SAAAqjB,MAAA/gB,EAAAC,QACAE,MACAY,aAAA,iBAIArD,QAAAqjB,MAAA/gB,EAAA8d,SAEApgB,QAAAqjB,MAAA/gB,EAAA+jB,QAAAvjB,QAAAM,EAAAN,UAEA9C,QAAAqjB,MAAA/gB,EAAA4C,MACApC,QAAA9C,QAAAqjB,MAAAjgB,EAAAN,SAEAsB,MAAA,OAAA,eAAA,SAAArB,EAAAC,GACA,MAAAD,GAAAo2B,SAAAj2B,GAAAF,EAAAE,KAAAC,eAMAd,EACAC,MAAAH,EAAAsE,KAAAnE,EAAAC,QACAD,MAAAA,EAAA8d,KAAA/V,KAAA/H,EAAA8d,MACA9d,MAAAA,EAAA+jB,OAAAhc,KAAA/H,EAAA+jB,QACA/jB,MAAAA,EAAA4C,KAAAmF,KAAA/H,EAAA4C;C/ImsOI9C,EAAYd,SAAW,iBAAkB,eAAgB,qB+I7uO7DtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAcA,SAAAyF,GAAA7E,EAAAwO,EAAAC,EAAAC,EACA9N,EAAAb,EAAAq2B,GACA,GAAAz3B,GAAAC,IAEAD,GAAAk5B,aAAA,MAAAl5B,EAAAkF,QAAA,iBAAA,SAEAlF,EAAAyC,KAAArB,EACApB,EAAAgQ,OAAA3O,EAAA2M,KAAA3M,EAAA2M,KAAA,EACAhO,EAAAiQ,mBAAAJ,EAAA9B,KACA/N,EAAAq4B,UAAAh3B,EAAAg3B,UAEAr4B,EAAAqN,QACArO,IAAAyM,OACAxG,IAAA,cACAqI,SAAA,EACApI,QAAAlF,EAAAq4B,WAEAr4B,EAAAmQ,YAAA,GAAAL,IACAM,MAAApQ,EAAAiQ,mBACAjC,KAAAhO,EAAAgQ,OACA3C,OAAArN,EAAAqN,OACAgD,SAAAW,OAAA,QACAjB,EAAAQ,SAAAvQ,IAIAA,EAAAm5B,oBAAA,SAAA53B,GACAk2B,EAAAjN,UAAA,sCAAAjpB,GAAAA,GACA,oFhJuvOI2E,EAAWvG,SAAW,eAAgB,0BAA2B,gBAAiB,gBAAiB,eAAgB,OAAQ,gBgJ/xO/HtB,QACAuB,OAAA,OACAO,UAAA,mBACAe,YAAA,0CACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACA4E,QAAA,UCVA,WACA,YAEA7G,SACAuB,OAAA,OAGAm4B,SAAA,oBAAA,SAAAvH,GACA,GAAArvB,GAAA,WAIA,OAHAqvB,KACArvB,EAAA,kBAGAhB,UAAA,4BACAgB,EAAA,0BACAA,EAAA,4BACAA,EAAA,gCAEAA,SAEAsB,MAAA,OAAA,SAAArB,GACA,MAAA,IAAAA,YCrBA,WACA,YAgBA,SAAA8E,GAAAnE,EAAAC,EAAAG,EAAAD,EAAAyD,EAAA1D,EAAAZ,GACA,GAAArB,GAAAC,IAoBA,IAlBAD,EAAAyC,KAAAG,SACA5C,EAAAyC,KAAAG,WAEA5C,EAAAyC,KAAAI,OACA7C,EAAAyC,KAAAG,OAAAE,KAAA9C,EAAAyC,KAAAI,MAGA7C,EAAAwD,cAAA,WACAxD,EAAAyC,KAAAG,QAAAa,UAAA,IAGA1B,EAAA,WACA1D,QAAA0E,QAAA,2BAAAC,UAGAhD,EAAAiD,KAAAjB,EAAA2tB,QAAA7uB,KAAAmC,KACAjD,EAAAyO,QAAA,WAAAzO,EAAAiD,MAAA,SAAAjD,EAAAiD,KAEA,MAAAjD,EAAAkF,QAAA,CACA,GAAAk0B,GAAAp5B,EAAAyC,KAAAkV,mBACA3X,GAAAq5B,gBAAAD,EAAAp5B,EAAAkF,QAAAyS,oBAIA3X,EAAAkD,KAAA,WACAlD,EAAAyC,KAAAW,KAAA,SACApD,EAAAyC,KAAAG,SACA5C,EAAAyC,KAAAI,KAAA7C,EAAAyC,KAAAG,OAAAE,MAEAzB,EAAAg3B,YACAr4B,EAAAyC,KAAAyC,WACAlF,EAAAyC,KAAAyC,QAAA3D,GAAAF,EAAAg3B,UACAr4B,EAAAyC,KAAAyC,QAAA9B,KAAA,WAEApD,EAAAyC,KAAA,iBAAAzC,EAAAyC,KAAAoE,kBAAA7G,EAAA4G,gBACAjB,EAAAc,MAAA,kCAEAzG,EAAAyC,KAAAlB,GACAW,EAAAqB,KAAAvD,EAAAyC,MAAAjB,SAAAtC,KAAA,SAAA4B,GACAkB,EAAA6C,GAAA,wBAAAwzB,UAAAr4B,EAAAyC,KAAAyC,QAAA3D,OAGAW,EAAAiiB,SAAAnkB,EAAAyC,MAAAjB,SAAAtC,KAAA,SAAA4B,GACAkB,EAAA6C,GAAA,wBAAAwzB,UAAAr4B,EAAAyC,KAAAyC,QAAA3D,QlJizOI2E,EAAWvG,SAAW,WAAY,SAAU,cAAe,UAAW,eAAgB,eAAgB,gBkJ72O1GtB,QACAuB,OAAA,OACAO,UAAA,mBACAe,YAAA,0CACAhB,WAAAgG,EACA7F,aAAA,OACAC,UACAmC,KAAA,IACAy1B,eAAA,IACAhzB,QAAA,UCZA,WACA,YAOA,SAAAzE,GAAAC,GACAA,EACAC,MAAA,yBACAC,OAAA,iBACAC,IAAA,+BACAC,MACAY,aAAA,eAEAlB,QAEA84B,UAAA,KACA3B,IAAA,KACAC,IAAA,MAEA52B,OACAgE,YACA5E,SAAA,gPAGAC,aAAA,SAGAc,SAEAuE,SAAA,eAAA,OAAA,SAAArE,EAAAD,GACA,MAAAA,GAAAo2B,SAAAj2B,GAAAF,EAAAi4B,YAAA93B,WAGAm2B,KAAA,eAAA,SAAAt2B,GACA,MAAAA,GAAAs2B,MAGAC,KAAA,eAAA,SAAAv2B,GACA,MAAAA,GAAAu2B,OAGA3N,eACAjO,MAAA,8BACApb,OAAA,yBnJ44OIH,EAAYd,SAAW,kBmJv7O3BtB,QACAuB,OAAA,OACA6B,OAAAhB,MCLA,WACA,YAMA,SAAA84B,GAAAC,EAAAC,GASA,QAAAC,KAYA,MAVAC,KACAF,EACAE,EAAA,yBAEAA,EAAAH,EAAAI,WAAA,MAAAJ,EAAAK,OACA,KAAAL,EAAAM,SACAH,EAAAA,EAAA,IAAAH,EAAAM,UAIAH,EAGA,QAAAI,GAAAx4B,GACA,MAAA,mBAAAA,EAAA,OAGA,QAAAy4B,GAAAz4B,GACA,MAAA,mBAAAA,EAAA,WA5BA,GAAAo4B,GAAA,EAEA,QACAD,WAAAA,EACAK,eAAAA,EACAC,mBAAAA,GpJk+OIT,EAAa55B,SAAW,YAAa,sBoJ5+OzCtB,QAAAuB,OAAA,OACA6R,QAAA,eAAA8nB,MCJA,SAAAl7B,GACA,YAKA,SAAAoT,GAAAjT,GAKA,QAAAwuB,KACA,MAAAxuB,GAAAS,MAAAT,EAAAS,MACAT,EAAAy7B,oBANA,OACAjN,WAAAA,GrJmhPIvb,EAAQ9R,SAAW,cqJxhPvBtB,EAAAuB,OAAA,OAAA6R,QAAA,WAAAA,IAaApT,SChBA,WACA,YAMA,SAAA8D,GAAA2iB,EAAAY,GAOA,QAAApgB,GAAAd,GACA,GAAA01B,EAAA11B,GAAA,CACA,GAAA21B,GAAAzU,EAAAe,QACAE,EAAAwT,EAAAxT,OAEA,OADAwT,GAAAh5B,QAAA+4B,EAAA11B,IACAmiB,EAIA,MAAA7B,GAAAxf,IAAA,mBAAAd,GAAA01B,OAAA,IAAAh7B,KAAA,SAAA0F,GAEA,MADAs1B,GAAA11B,GAAAI,EAAA9D,KACA8D,EAAA9D,OAjBA,GAAAo5B,KAEA,QACA50B,IAAAA,GtJmiPInD,EAAYxC,SAAW,QAAS,MsJ3iPpCtB,QAAAuB,OAAA,OACA6R,QAAA,cAAAtP,MCJA,WACA,YAMA,SAAA1B,GAAAC,GACAA,EAAAC,MAAA,UACAy5B,YAAA,EACAx5B,OAAA,OACAI,OACAq5B,WACAn5B,YAAA,iCACAhB,WAAA,mBACAG,aAAA,QAEAi6B,WACAl6B,SAAA,mGAEAF,YAAA,WAAA,WAAA,UAAA,YAAA,SAAAq6B,EAAAx4B,EAAAsnB,EAAAznB,GACA3B,KAAAgxB,KAAAsJ,EACAt6B,KAAAmxB,aAAA/H,EAAAqI,WAAA,IAEA3vB,EAAA,WACAH,EAAAC,WAAA3C,KAAA,SAAA4B,GAEAA,GAAA,gBAAAA,EAAAmE,KAAA,MAAAnE,EAAAoE,UACA7G,QAAA0E,QAAA,qCAAAnC,SAAAskB,SACA7mB,QAAA0E,QAAA,0CAAAnC,SAAAskB,gBAKA7kB,aAAA,QACAc,SAEAo5B,UAAA,OAAA,SAAArJ,GACA,MAAAA,GAAAC,QAAA,iBAIAqJ,WACAt5B,YAAA,mCAGAC,SAEAs5B,SAAA,aAAA,SAAAl8B,GACAA,EAAAk8B,SAAA,OvJ6hPIh6B,EAAYd,SAAW,kBuJ3kP3BtB,QAAAuB,OAAA,OACA6B,OAAAhB,MCJA,WACA,YACApC,SACAuB,OAAA,OAEAm4B,SAAA,kCAAAhqB,KAAA,KACAgqB,SAAA,iCAAAhqB,KAAA,KAEAgqB,SAAA,cAAA,sBCRA,WACA,YAMA,SAAA71B,GAAAgP,GACA,MAAAA,GAAAC,YAAA,cACAgT,UACA5Z,OAAA,OACA1J,IAAA,6BACAuQ,SAAA,GAEA7N,MACAgH,OAAA,OACA1J,IAAA,yBACAuQ,SAAA,GAEAspB,cACAnwB,OAAA,MACA1J,IAAA,iCACAuQ,SAAA,GAEAupB,cACApwB,OAAA,MACA1J,IAAA,iCACAuQ,SAAA,GAEAwpB,aACArwB,OAAA,MACA1J,IAAA,iCACAuQ,SAAA,KzJonPIlP,EAAQvC,SAAW,kByJjpPvBtB,QAAAuB,OAAA,OACA6R,QAAA,UAAAvP,MCJA,WACA,YAMA,SAAAd,GAAAwnB,EAAA6C,GACA,GAAAoP,GAAA,iBACAC,EAAA,iBACA,OAAAlS,GAAAiS,GAAA1zB,MAAA,mBACArD,OACAyG,OAAA,MACA6G,SAAA,EACA2pB,kBAAA,SAAAj6B,EAAAynB,GACA,OACAuD,MAAAL,EAAAC,MAAAnD,EAAA,SACA9J,KAAApgB,QAAA28B,SAAAl6B,MAIAwE,KACAiF,OAAA,MACA/J,QACA2G,MAAA,WAGAqwB,SACAjtB,OAAA,MACA1J,IAAAg6B,EAAA,MACAr6B,QACAe,GAAA,QAGAs3B,eACAtuB,OAAA,MACA1J,IAAAg6B,EAAA,oBACAr6B,QACAe,GAAA,QAGAD,iBACAiJ,OAAA,MACA1J,IAAAi6B,EAAA,eACAt6B,QACAe,GAAA,QAGAmC,SACA6G,OAAA,MACA1J,IAAAg6B,EAAA,YAEAI,qBACA1wB,OAAA,OACA1J,IAAAg6B,EAAA,wBAEA5sB,iBACA1D,OAAA,OACA1J,IAAAi6B,EAAA,oBAEAI,qBACA3wB,OAAA,MACA1J,IAAAi6B,EAAA,wBAEAhjB,sBACAvN,OAAA,MACA1J,IAAAi6B,EAAA,yBAEAjjB,0BACAtN,OAAA,MACA1J,IAAAi6B,EAAA,6BAEA3zB,OACAoD,OAAA,MACA1J,IAAAg6B,EAAA,SACAr6B,QACA2G,MAAA,WAGAg0B,SACA5wB,OAAA,OACA1J,IAAAg6B,EAAA,WACAr6B,QACA2G,MAAA,SACAg0B,QAAA,aAGAC,WACA7wB,OAAA,OACA1J,IAAAg6B,EAAA,aACAr6B,QACAe,GAAA,QAGAkC,UACA8G,OAAA,MACA1J,IAAAg6B,EAAA,YACAr6B,QACAe,GAAA,QAGA85B,MACA9wB,OAAA,MACA1J,IAAAg6B,EAAA,QACAr6B,QACA2G,MAAA,WAGAhD,eACAoG,OAAA,MACA1J,IAAAi6B,EAAA,iBACA1pB,SAAA,K1J6kPIhQ,EAAKzB,SAAW,YAAa,c0JzrPjCtB,QAAAuB,OAAA,OACA6R,QAAA,OAAArQ,MCJA,WACA,YAMA,SAAAylB,GAAA+B,GACA,GAAA/nB,GAAA,mBACA,OAAA+nB,GAAA/nB,MACA6O,gBACAnF,OAAA,OACA1J,IAAAA,EAAA,oBAEAw6B,MACA9wB,OAAA,MACA1J,IAAAA,EAAA,W3JkyPIgmB,EAAQlnB,SAAW,a2J/yPvBtB,QAAAuB,OAAA,OACA6R,QAAA,SAAAoV,MCJA,WACA,YAMA,SAAAxhB,GAAA6L,GACA,MAAAA,GAAAC,YAAA,yB5Ji0PI9L,EAAgB1F,SAAW,kB4Jt0P/BtB,QAAAuB,OAAA,OACA6R,QAAA,kBAAApM,MCJA,WACA,YAMA,SAAAklB,GAAArZ,GACA,MAAAA,GAAAC,YAAA,WACA4X,sBACAxe,OAAA,MACA1J,IAAA,uCACAuQ,SAAA,K7J40PImZ,EAAQ5qB,SAAW,kB6Jr1PvBtB,QAAAuB,OAAA,OACA6R,QAAA,OAAA8Y,MCJA,WACA,YAMA,SAAAA,GAAArZ,GACA,MAAAA,GAAAC,YAAA,S9Jo2PIoZ,EAAQ5qB,SAAW,kB8Jz2PvBtB,QAAAuB,OAAA,OACA6R,QAAA,QAAA8Y,MCJA,WACA,YAMA,SAAAA,GAAArZ,GACA,MAAAA,GAAAC,YAAA,U/Jk3PIoZ,EAAQ5qB,SAAW,kB+Jv3PvBtB,QAAAuB,OAAA,OACA6R,QAAA,SAAA8Y,MCJA,WACA,YAMA,SAAAA,GAAA3B,GACA,GAAA/nB,GAAA,6BACA,OAAA+nB,GAAA/nB,MACA4E,8BACA8E,OAAA,MACA1J,IAAAA,EAAA,mChK43PI0pB,EAAQ5qB,SAAW,agKr4PvBtB,QAAAuB,OAAA,OACA6R,QAAA,mBAAA8Y,MCJA,WACA,YAMA,SAAAA,GAAArZ,GACA,MAAAA,GAAAC,YAAA,iBjKo5PIoZ,EAAQ5qB,SAAW,kBiKz5PvBtB,QAAAuB,OAAA,OACA6R,QAAA,gBAAA8Y,MCJA,WACA,YAMA,SAAAvP,GAAA9J,GACA,MAAAA,GAAAC,YAAA,aACAmqB,wBACA/wB,OAAA,MACA1J,IAAA,2CACAuQ,SAAA,GAOAkY,OACA/e,OAAA,MACA1J,IAAA,0BACAuQ,SAAA,GAEAmY,eACAhf,OAAA,MACA1J,IAAA,mCACAuQ,SAAA,GAEAuY,iBACApf,OAAA,MACA1J,IAAA,qCACAuQ,SAAA,GAEAmqB,qBACAhxB,OAAA,MACA1J,IAAA,0CACAuQ,SAAA,GAEAyY,UACAtf,OAAA,MACA1J,IAAA,6BACAuQ,SAAA,KlKg4PI4J,EAAOrb,SAAW,kBkKv6PtBtB,QAAAuB,OAAA,OACA6R,QAAA,SAAAuJ,MCJA,WACA,YAMA,SAAAuP,GAAArZ,GACA,MAAAA,GAAAC,YAAA,anKo9PIoZ,EAAQ5qB,SAAW,kBmKz9PvBtB,QAAAuB,OAAA,OACA6R,QAAA,YAAA8Y,MCJA,SAAAlsB,GACA,YAKA,SAAAoT,GAAAzP,EAAAqnB,EAAAtnB,EAAAxD,EAAAC,EAAAoD,EAAA2E,EAAAZ,EAAA6zB,GAQA,QAAA16B,KAyDA,QAAAyP,KAEA,aAAAhQ,EAAAopB,mBAAA,OAAA3lB,EAAAsD,IAAA/G,EAAAopB,mBACA3lB,EAAA6C,GAAA,QAEA7C,EAAA6C,GAAAtG,EAAAopB,kBAAAppB,EAAAqpB,qBA7DA7lB,EAAA,WACAy5B,EAAAx5B,EAAAsD,MAAAqwB,IAAA,SAAAlzB,GACA,MAAAA,GAAAiG,QAEA,GAGAnK,EAAAk9B,YAAAA,CAEA,IAAAC,GAAAn9B,EAAAyrB,IAAA,oBACA,SAAA9R,EAAAuP,EAAAI,GACAliB,EAAAovB,iBAEAtN,EAAA1iB,aACAmT,EAAAyjB,iBACA35B,EAAA6C,GAAA4iB,EAAA1iB,WAAA8iB,IAGAtpB,EAAAkpB,QAAAA,EACAlpB,EAAAspB,cAAAA,EAEAjmB,EAAAglB,sBACArgB,EAAAqK,aAIArS,GAAAyrB,IAAA,WAAA0R,EAEA,IAAAE,GAAAr9B,EAAAyrB,IAAA,sBACA,SAAA9R,EAAAuP,EAAAoU,EAAAnU,EAAAoU,GACAzS,EAAA0S,KACAtvB,QAAAC,IAAA,6BAAA8sB,EAAA12B,QACAumB,EAAA0S,GAAA,MAAA,OAAAvC,EAAA12B,QACAumB,EAAA0S,GAAA,OAAA,YAGA,IAAAC,GAAA,cAEAz9B,GAAA09B,YAAA,WAAAvU,EAAAhf,MAAA,UAAAgf,EAAAhf,OACAnK,EAAAopB,kBAAAD,EAAAhf,KACAnK,EAAAqpB,oBAAAkU,GAIArU,EAAA3mB,KAAAC,YACAi7B,EAAAvU,EAAA3mB,KAAAC,WAEAvC,EAAAw9B,GAAA98B,KAAA,SAAAoF,GAEA+kB,EAAAxe,SAAAvG,MAAA9F,EAAA6b,QAAA,gBAAA,MAAA/V,KAKA/F,GAAAyrB,IAAA,WAAA4R,GAWAr9B,EAAAgQ,KAAAA,EAGA,QAAAktB,GAAA96B,GACA,MAAA66B,GAAA7vB,QAAAhL,QA7EA,GAAA66B,EAEA,QACAC,YAAAA,EACA38B,WAAAA,GpK+9PI2S,EAAQ9R,SAAW,SAAU,UAAW,WAAY,aAAc,aAAc,YAAa,OAAQ,eAAgB,aoKv+PzHtB,EAAAuB,OAAA,OAAA6R,QAAA,eAAAA,IAoFApT,SCvFA,WACA,YAoBA,SAAA69B,KAKAC,OAAAC,UAAAtU,aACAqU,OAAAC,UAAAtU,WAAA,SAAAuU,EAAAC,GACA,MAAAr8B,MAAAs8B,QAAAD,GAAAA,EAAA,EAAA,GAAAA,EAAAD,EAAAnzB,UAAAmzB,IAKAF,OAAAC,UAAAI,WACAL,OAAAC,UAAAI,SAAA,SAAAH,EAAAI,GAIA,OAHAhxB,SAAAgxB,GAAAA,EAAAx8B,KAAAiJ,UACAuzB,EAAAx8B,KAAAiJ,QAEAjJ,KAAAqP,UAAAmtB,EAAAJ,EAAAnzB,OAAAuzB,KAAAJ,IAKAF,OAAAC,UAAA7N,WACA4N,OAAAC,UAAA7N,SAAA,SAAA8N,EAAArqB,GAMA,MAJA,gBAAAA,KACAA,EAAA,KAGAA,EAAAqqB,EAAAnzB,OAAAjJ,KAAAiJ,SAGAjJ,KAAA0L,QAAA0wB,EAAArqB,UAQAoM,MAAAge,UAAA7N,WACAnQ,MAAAge,UAAA7N,SAAA,SAAAmO,GAEA,GAAAC,GAAAC,OAAA38B,MACA48B,EAAAxtB,SAAAstB,EAAAzzB,SAAA,CACA,IAAA,IAAA2zB,EACA,OAAA,CAEA,IACAC,GADAC,EAAA1tB,SAAA2tB,UAAA,KAAA,CAEAD,IAAA,EACAD,EAAAC,GAEAD,EAAAD,EAAAE,EACAD,EAAA,IACAA,EAAA,GAIA,KADA,GAAAG,GACAH,EAAAD,GAAA,CAEA,GADAI,EAAAN,EAAAG,GACAJ,IAAAO,GACAP,IAAAA,GAAAO,IAAAA,EACA,OAAA,CAEAH,KAEA,OAAA,IAxEAz+B,QACAuB,OAAA,OACA6B,OAAAy6B,MClBA,SAAA79B,GACA,YAQA,SAAA6+B,GAAAC,EAAAC,EAAAC,EAAA5D,EAAA6D,GAEAA,EAAAC,cAAA,UAAA,kBAAA,GAEAJ,EAAAK,UAAA,WAEAJ,EAAAK,aAAAnvB,KAAA,2BACA8uB,EAAAK,aAAAnvB,KAAA,0BACA8uB,EAAAK,aAAAnvB,KAAA,mBACA8uB,EAAAK,aAAAnvB,KAAA,2BAGA+uB,EAAAK,WAAA,IAGAjE,GACA4D,EAAAM,WAAA,GAtBAt/B,EACAuB,OAAA,OACA6B,OAAAy7B,GAEAA,EAAAv9B,SAAA,qBAAA,gBAAA,oBAAA,qBAAA,8CAsBAtB,SC7BA,WACA,YAOA,SAAAu/B,GAAAC,EAAApE,EAAAqE,EAAAC,EAAAC,EAAAC,GACAxxB,QAAAC,IAAA,2BAEAmxB,EAAAK,yBAAA,oBAGAL,EAAAM,sBACAl0B,QACAm0B,OAAA,QACAC,OAAA,gBAEAD,OAAA,QACAC,OAAA,gBAEAD,OAAA,QACAC,OAAA,iBAEAD,OAAA,QACAC,OAAA,oBAEAD,OAAA,QACAC,OAAA,sBAEAD,OAAA,QACAC,OAAA,iBAIAR,EAAA5D,kBAAA,MAGA6D,EAAAQ,iBAAA,IACAR,EAAAS,gBAAA,EAGAP,EAAAQ,YACAt9B,YAAA,8CAIAuL,QAAAC,IAAA,iBAAA+sB,GACAsE,EAAAU,kBAAA,GAEAV,EAAAW,0BAAA,GACAT,EAAAU,4BAAA,GvK8oQIf,EAAUj+B,SAAW,qBAAsB,qBAAsB,wBAAyB,mBAAoB,sBAAuB,cuK/rQzItB,QACAuB,OAAA,OACA6B,OAAAm8B,MCLA,WACA,YAMA,SAAAn9B,GAAAC,GACAA,EACAC,MAAA,SACAy5B,YAAA,EACAx5B,OAAA,OACAI,OACAs5B,WACAl6B,SAAA,mGACAF,YAAA,WAAA,UAAA,cAAA,SAAAq6B,EAAAlR,GACAppB,KAAAgxB,KAAAsJ,EACAt6B,KAAAmxB,aAAA/H,EAAAqI,WAAA,MAEArxB,aAAA,QACAc,SACAo5B,UAAA,OACA,SAAArJ,GACA,MAAAA,GAAAC,QAAA,kBAKAqJ,WACAt5B,YAAA,yCAGAC,SAEAs5B,SAAA,aAAA,SAAAl8B,GACAA,EAAAk8B,SAAA,OAIA95B,MAAA,eACAE,IAAA,SACAD,OAAA,QACAmE,WAAA,UxKitQItE,EAAYd,SAAW,kBwKxvQ3BtB,QAAAuB,OAAA,OACA6B,OAAAhB,MCJA,WACA,YAuBApC,SAAAuB,OAAA,OACAm4B,SAAA,eAAA,SAAAv3B,GACA,GAAA6tB,IACAztB,QACA8H,KAAAlI,EAAAsE,KACAlE,OAAAJ,EAAAI,OAAAJ,EAAAI,OAAA,QACAC,IAAAL,EAAA8jB,QACAvf,WAAAvE,EAAAsE,KAAA,QACAmlB,eACAC,MAAA,IAIAzL,MACA/V,KAAAlI,EAAAsE,KAAA,QACAlE,OAAAJ,EAAAsE,KACAjE,IAAA,gBACAL,QACAwN,MAAAsN,MAAA,IAAAsjB,SAAA,IAEA59B,SACAF,MACAC,UAAAP,EAAAikB,cAAA,cAEAwF,eACAjO,MAAAxb,EAAAikB,cAAA,eAGAC,QACAhc,KAAAlI,EAAAsE,KAAA,UACAlE,OAAAJ,EAAAsE,KACAjE,IAAA,SACAC,MACAC,UAAAP,EAAAikB,cAAA,eACAxhB,KAAA,UAEAjC,SACAipB,eACAjO,MAAAxb,EAAAikB,cAAA,eACA7jB,OAAAJ,EAAAsE,KAAA,SAGA3D,SAEA+2B,gBAAA,SAAA,SAAAl2B,GACA,MAAAA,GAAAxB,WAIA+C,MACAmF,KAAAlI,EAAAsE,KAAA,QACAlE,OAAAJ,EAAAsE,KACAjE,IAAA,cACAC,MACAC,UAAAP,EAAAikB,cAAA,aACAxhB,KAAA,QAEAjC,SACAipB,eACAjO,MAAAxb,EAAAikB,cAAA,aACA7jB,OAAAJ,EAAAq+B,SAAA,KAAAr+B,EAAAsE,KAAA,SAGA3D,SAEA+2B,gBAAA,SAAA,SAAAl2B,GACA,MAAAA,GAAAxB,WAyBA,OAnBAA,GAAAoW,OACApW,EAAAoW,KAAA,YAIAyX,EAAA5P,KAAAzd,MAAAR,EAAAoW,OACA1V,YAAAV,EAAA+jB,gBAAA,aACArkB,WAAAM,EAAAN,WACAE,SAAAI,EAAA02B,aAAA12B,EAAA02B,aAAAzrB,OACApL,aAAA,QAGAguB,EAAA3J,OAAA1jB,MAAAR,EAAAoW,MAAAyX,EAAA9qB,KAAAvC,MAAAR,EAAAoW,OACA1V,YAAAV,EAAA+jB,gBAAA,aACArkB,WAAAM,EAAAgkB,eACApkB,SAAAI,EAAA+2B,aAAA/2B,EAAA+2B,aAAA9rB,OACApL,aAAA,QAGAguB,OCnHA,WACA,YAEAhwB,SAAAuB,OAAA,OACAm4B,SAAA,kBAAA,sBAEAA,SAAA,2BAAAhqB,KAAA,QCNA,WACA,YAQA,SAAAtN,GAAAC,GACAA,EAAAC,MAAA,QACAy5B,YAAA,EACAt5B,MACAY,gBAEAP,SACAyP,WAAA,OAAA,SAAArK,GACA,MAAAA,GAAAqK,iBAdAvS,QACAuB,OAAA,OACA6B,OAAAhB,GAEAA,EAAAd,SAAA,qBCPA,WACA,YAEAtB,SACAuB,OAAA,OACAm4B,SAAA,sBAAA,MAGA,WAAA15B,QAAAuB,OAAA,OAAAC,KAAA,iBAAA,SAAAi/B,GAAAA,EAAAC,IAAA,uCAAA,iN5Ky1QAD,EAAeC,IAAI,0CAA0C,y4HAC7DD,EAAeC,IAAI,0CAA0C,2kIAC7DD,EAAeC,IAAI,gDAAgD,2pBACnED,EAAeC,IAAI,6CAA6C,i6DAChED,EAAeC,IAAI,yDAAyD,ixEAC5ED,EAAeC,IAAI,4CAA4C,q2FAC/DD,EAAeC,IAAI,4CAA4C;AAC/DD,EAAeC,IAAI,+CAA+C,6hDAClED,EAAeC,IAAI,6BAA6B,usCAChDD,EAAeC,IAAI,4DAA4D,ujCAC/ED,EAAeC,IAAI,8CAA8C,s8PACjED,EAAeC,IAAI,8CAA8C,w1HACjED,EAAeC,IAAI,sCAAsC,izEACzDD,EAAeC,IAAI,4CAA4C,2XAC/DD,EAAeC,IAAI,sCAAsC,8UACzDD,EAAeC,IAAI,qCAAqC,ykBACxDD,EAAeC,IAAI,gCAAgC,o1GACnDD,EAAeC,IAAI,mCAAmC,uHACtDD,EAAeC,IAAI,yCAAyC,sZAC5DD,EAAeC,IAAI,4CAA4C,oUAC/DD,EAAeC,IAAI,4CAA4C,wnOAC/DD,EAAeC,IAAI,oCAAoC;AACvDD,EAAeC,IAAI,qCAAqC,2GACxDD,EAAeC,IAAI,6DAA6D,2gCAChFD,EAAeC,IAAI,gEAAgE,qLACnFD,EAAeC,IAAI,sCAAsC,2YACzDD,EAAeC,IAAI,+BAA+B,6YAClDD,EAAeC,IAAI,uCAAuC,oEAC1DD,EAAeC,IAAI,iCAAiC,0aACpDD,EAAeC,IAAI,iCAAiC,y6CACpDD,EAAeC,IAAI,wCAAwC,yTAC3DD,EAAeC,IAAI,4BAA4B,oHAC/CD,EAAeC,IAAI,uCAAuC,upDAC1DD,EAAeC,IAAI,uCAAuC,khCAC1DD,EAAeC,IAAI,yDAAyD,0yBAC5ED,EAAeC,IAAI,iDAAiD,69BACpED,EAAeC,IAAI,4CAA4C,q6BAC/DD,EAAeC,IAAI,sDAAsD,0+BACzED,EAAeC,IAAI,oDAAoD,ybACvED,EAAeC,IAAI,4CAA4C,gkBAC/DD,EAAeC,IAAI,uCAAuC,muDAC1DD,EAAeC,IAAI,wDAAwD,yOAC3ED,EAAeC,IAAI,8CAA8C,wlCACjED,EAAeC,IAAI,oDAAoD,gcACvED,EAAeC,IAAI,8CAA8C,kdACjED,EAAeC,IAAI,2CAA2C,+8DAC9DD,EAAeC,IAAI,2CAA2C,0MAC9DD,EAAeC,IAAI,gDAAgD,+xCACnED,EAAeC,IAAI,yCAAyC,q5CAC5DD,EAAeC,IAAI,qDAAqD,+uGACxED,EAAeC,IAAI,yDAAyD,yiDAC5ED,EAAeC,IAAI,+CAA+C,qtCAClED,EAAeC,IAAI,qEAAqE,ssCACxFD,EAAeC,IAAI,kEAAkE;AACrFD,EAAeC,IAAI,+CAA+C,ymEAClED,EAAeC,IAAI,4DAA4D,iyFAC/ED,EAAeC,IAAI,uDAAuD,gIAC1ED,EAAeC,IAAI,oDAAoD,ogDACvED,EAAeC,IAAI,kDAAkD,ymCACrED,EAAeC,IAAI,kDAAkD,6sDACrED,EAAeC,IAAI,2CAA2C,mrGAC9DD,EAAeC,IAAI,gDAAgD,mvBACnED,EAAeC,IAAI,yCAAyC,2uBAC5DD,EAAeC,IAAI,iDAAiD,mGACpED,EAAeC,IAAI,8CAA8C,stGACjED,EAAeC,IAAI,sDAAsD,wOACzED,EAAeC,IAAI,2DAA2D,87CAC9ED,EAAeC,IAAI,kDAAkD,40CACrED,EAAeC,IAAI,+DAA+D,27DAClFD,EAAeC,IAAI,sEAAsE,2UACzFD,EAAeC,IAAI,sDAAsD,4fACzED,EAAeC,IAAI,0DAA0D,uyBAC7ED,EAAeC,IAAI,6DAA6D,yqFAChFD,EAAeC,IAAI,wEAAwE,oyFAC3FD,EAAeC,IAAI,8DAA8D;AACjFD,EAAeC,IAAI,+DAA+D,u/MAClFD,EAAeC,IAAI,sDAAsD","file":"app/app-41dd7a1ffc.js","sourcesContent":["(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app', [\r\n        'ui.bootstrap',\r\n        'ui.router',\r\n        'angular-loading-bar',\r\n        'angularjs-dropdown-multiselect',\r\n        'infinite-scroll',\r\n        'jcs-autoValidate',\r\n        'ncy-angular-breadcrumb',\r\n        'ngAnimate',\r\n        'ngCacheBuster',\r\n        'ngCookies',\r\n        'ngFileUpload',\r\n        'ngResource',\r\n        'ngStorage',\r\n        'ngTable',\r\n        'ngTagsInput',\r\n        'pascalprecht.translate',\r\n        'textAngular',\r\n        'ui.bootstrap',\r\n        'ui.bootstrap.datetimepicker',\r\n        'ui.calendar',\r\n        \"uiCropper\",\r\n        '720kb.socialshare'\r\n    ]).run(appRun);\r\n\r\n    /* @ngInject */\r\n    function appRun($rootScope, $translate, $localStorage, stateHandler, bootstrap3ElementModifier, validator, defaultErrorMessageResolver) {\r\n\r\n        stateHandler.initialize();\r\n\r\n        $rootScope.changeLanguage = function (key) {\r\n            if ($translate.use() !== key) {\r\n                $translate.use(key).then(function () {\r\n                    $translate.refresh();\r\n                });\r\n                $localStorage.lang = key;\r\n            }\r\n        };\r\n\r\n        // Mostrar iconos de validación\r\n        bootstrap3ElementModifier.enableValidationStateIcons(true);\r\n        // No resaltar elementos correctos\r\n        validator.setValidElementStyling(false);\r\n        // Validación sólo al hacer submit\r\n        validator.defaultFormValidationOptions.validateOnFormSubmit = true;\r\n\r\n        // Ubicación del fichero de mensajes de error\r\n        defaultErrorMessageResolver.setI18nFileRootPath('i18n');\r\n        defaultErrorMessageResolver.setCulture('es');\r\n    }\r\n})\r\n(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app', [\r\n        'ui.bootstrap',\r\n        'ui.router',\r\n        'angular-loading-bar',\r\n        'angularjs-dropdown-multiselect',\r\n        'infinite-scroll',\r\n        'jcs-autoValidate',\r\n        'ncy-angular-breadcrumb',\r\n        'ngAnimate',\r\n        'ngCacheBuster',\r\n        'ngCookies',\r\n        'ngFileUpload',\r\n        'ngResource',\r\n        'ngStorage',\r\n        'ngTable',\r\n        'ngTagsInput',\r\n        'pascalprecht.translate',\r\n        'textAngular',\r\n        'ui.bootstrap',\r\n        'ui.bootstrap.datetimepicker',\r\n        'ui.calendar',\r\n        \"uiCropper\",\r\n        '720kb.socialshare'\r\n    ]).run(appRun);\r\n\r\n    /* @ngInject */\r\n    function appRun($rootScope, $translate, $localStorage, stateHandler, bootstrap3ElementModifier, validator, defaultErrorMessageResolver) {\r\n\r\n        stateHandler.initialize();\r\n\r\n        $rootScope.changeLanguage = function (key) {\r\n            if ($translate.use() !== key) {\r\n                $translate.use(key).then(function () {\r\n                    $translate.refresh();\r\n                });\r\n                $localStorage.lang = key;\r\n            }\r\n        };\r\n\r\n        // Mostrar iconos de validación\r\n        bootstrap3ElementModifier.enableValidationStateIcons(true);\r\n        // No resaltar elementos correctos\r\n        validator.setValidElementStyling(false);\r\n        // Validación sólo al hacer submit\r\n        validator.defaultFormValidationOptions.validateOnFormSubmit = true;\r\n\r\n        // Ubicación del fichero de mensajes de error\r\n        defaultErrorMessageResolver.setI18nFileRootPath('i18n');\r\n        defaultErrorMessageResolver.setCulture('es');\r\n    }\r\n})\r\n(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('ProfesorDetailsController', ProfesorDetailsController);\r\n\r\n    /* @ngInject */\r\n    function ProfesorDetailsController(profesor) {\r\n        var vm = this;\r\n        vm.profesor = profesor;\r\n\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Botón para la creación de entidades dentro de otras. Usado para los formularios dentro de ventanas modales.\r\n\r\n    // click: Función que se va a llamar al pulsar el botón.\r\n    // params: Parámetros que se enviará a la función.\r\n\r\n    // Ejemplo de uso: FILO1701, traduccion-form.admin.*\r\n\r\n    angular\r\n        .module('app')\r\n        .component('buttonCreate', {\r\n            template: '<a ng-click=\"ctrl.click(ctrl.params)\" class=\"button-create\"' +\r\n            ' title=\"{{\\'admin.form.button.create\\' | translate}}\"><i class=\"fa fa-plus-square\"></i></a>',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                click: '<',\r\n                params: '<'\r\n            }\r\n        });\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/profesor/info', {\r\n                parent: 'miespacio',\r\n                url: '/busqueda-profesores/:id',\r\n                data: {\r\n                    pageTitle: 'global.menu.profesor.info'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        templateUrl: 'app/public/profesor/info/profesor.details.html',\r\n                        controller: 'ProfesorDetailsController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    profesor: function (User, $stateParams) {\r\n                        return User.getProfesorById({id: $stateParams.id}).$promise;\r\n                    }\r\n                 }\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/perfil', {\r\n                parent: 'miespacio',\r\n                url: '/perfil',\r\n                data: {\r\n                    authorities: ['ROLE_AUTHENTICATED'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        templateUrl: 'app/public/cuenta/miespacio/perfil/perfil.form.html',\r\n                        controller: 'PerfilFormController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    itemData: function (Principal) {\r\n                        return Principal.identity().then(function (data) {\r\n                            return data;\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n            .state('miespacio/perfil/contrasena', {\r\n                parent: 'miespacio',\r\n                url: '/perfil/modificar-contrasena',\r\n                views: {\r\n                    'contentEspacio': {\r\n                        template: \"<h1>{{'miespacio.miperfil.cambiarcontrasena' | translate}}</h1>\" +\r\n                        \"<change-password></change-password>\"\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('PerfilFormController', PerfilFormController);\r\n\r\n    /* @ngInject */\r\n    function PerfilFormController($timeout, $state, itemData, ModalService,\r\n                                  Usuario, EnumService, Principal, Capacidad, Idioma, Pais, Nivel, User) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group>input#nombre').focus();\r\n        });\r\n\r\n        vm.mode = 'create';\r\n\r\n        function initForm() {\r\n            vm.item = angular.copy(itemData);\r\n\r\n            initImagen();\r\n        }\r\n\r\n        initForm();\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            if (vm.item.centro) {\r\n                vm.item.centro.type = 'centro';\r\n            }\r\n\r\n            // FIXME: Apaño temporal para la edición de fechas...\r\n            if (angular.isNumber(vm.item.fechaNacimiento)) {\r\n                vm.item.fechaNacimiento = vm.item.fechaNacimiento / 1000;\r\n            }\r\n\r\n            Usuario.edit(vm.item).$promise.then(function (data) {\r\n                vm.item.fechaNacimiento = data.fechaNacimiento * 1000;\r\n                Principal.identity(true);\r\n            });\r\n        };\r\n\r\n        // Foto de perfil\r\n        function initImagen() {\r\n            if (!vm.item.imagen) {\r\n                vm.item.imagen = {};\r\n            }\r\n            if (vm.item.foto) {\r\n                vm.item.imagen.path = vm.item.foto;\r\n            }\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        Capacidad.findAll({sortProperty: 'nombre'}).$promise.then(function (data) {\r\n            vm.capacidades = data.content;\r\n        });\r\n\r\n        /*EnumService.get(\"disponibilidad\").then(function(data) {\r\n            vm.disponibilidades = data;\r\n        });*/\r\n\r\n        Nivel.query().$promise.then(function(data) {\r\n            vm.niveles = data;\r\n        });\r\n\r\n        vm.idiomaService = Idioma;\r\n        vm.nivelService = Nivel;\r\n        vm.paisService = Pais;\r\n\r\n        User.zonasHorarias().$promise.then(function(data) {\r\n            vm.zonasHorarias = data;\r\n        });\r\n\r\n        // Darse de baja\r\n        vm.confirmarBaja = function () {\r\n            ModalService.open({\r\n                templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                controller: 'ConfirmModalController',\r\n                controllerAs: 'ctrl',\r\n                resolve: {\r\n                    item: function () {\r\n                        return vm.item;\r\n                    },\r\n                    params: function () {\r\n                        return {\r\n                            title: 'miespacio.miperfil.baja.titulo',\r\n                            body: 'miespacio.miperfil.baja.confirmacion'\r\n                        };\r\n                    },\r\n                    /* @ngInject */\r\n                    tipo: function (Perfil) {\r\n                        return Perfil;\r\n                    },\r\n                    funcion: function () {\r\n                        return \"baja\";\r\n                    },\r\n                    parametros: function () {\r\n                        return {};\r\n                    }\r\n                }\r\n            }).result.then(function () {\r\n                $state.go(\"logout\");\r\n            });\r\n        }\r\n\r\n    }\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        var base = \"paquetecreditos\";\r\n\r\n        $stateProvider\r\n            .state(base, {\r\n                parent: 'public',\r\n                url: '/creditos',\r\n                redirectTo: base + '/list',\r\n                data: {\r\n                    authorities: ['ROLE_ANONYMOUS', 'ROLE_ALUMNO'],\r\n                    pageTitle: 'global.paquetescreditos'\r\n                }\r\n            })\r\n            .state(base + '/list', {\r\n                parent: base,\r\n                url: '/listar',\r\n                views: {\r\n                    'content@': {\r\n                        controllerAs: 'ctrl',\r\n                        template: '<paquetecreditos-list></paquetecreditos-list>',\r\n                        controller: function ($timeout, $state, Principal) {\r\n                            $timeout(function () {\r\n                                Principal.identity().then(function (data) {\r\n                                    // Si es un alumno con empresa asociada, redirigimos a inicio\r\n                                    if (data && data.rol === 'ROLE_ALUMNO' && data.empresa != null) {\r\n                                        $state.go(\"home\");\r\n                                    }\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            .state(base + '/comprar', {\r\n                parent: base,\r\n                url: '/comprar/:paqueteId',\r\n                views: {\r\n                    'content@': {\r\n                        controllerAs: 'ctrl',\r\n                        template: '<paquetecreditos-comprar paquete-creditos=\"$resolve.paqueteCreditos\" ' +\r\n                            'datos-facturacion=\"$resolve.datosFacturacion\"></paquetecreditos-comprar>'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    paqueteId: function ($stateParams) {\r\n                        return $stateParams.paqueteId;\r\n                    },\r\n                    /* @ngInject */\r\n                    paqueteCreditos: function (paqueteId, Paquetecreditos) {\r\n                        return Paquetecreditos.get({id: paqueteId}).$promise;\r\n                    },\r\n                    /* @ngInject */\r\n                    datosFacturacion: function (DatosFacturacion) {\r\n                        return DatosFacturacion.getDatosFacturacionDeUsuario().$promise;\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/miscompras', {\r\n                parent: 'miespacio',\r\n                url: '/mis-compras',\r\n                data: {\r\n                    authorities: ['ROLE_ALUMNO'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        template: '<compra-list usuario=\"$resolve.usuario\"></compra-list>',\r\n                        controllerAs: 'ctrl',\r\n                        controller: function ($timeout, $state, Principal) {\r\n                            $timeout(function () {\r\n                                Principal.identity().then(function (data) {\r\n                                    // Si es un alumno con empresa asociada, redirigimos a inicio\r\n                                    if (data && data.rol === 'ROLE_ALUMNO' && data.empresa != null) {\r\n                                        $state.go(\"home\");\r\n                                    }\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    usuario: function (Principal) {\r\n                        return Principal.identity().then(function (data) {\r\n                            return data;\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/misalumnos', {\r\n                parent: 'miespacio',\r\n                url: '/mis-alumnos',\r\n                data: {\r\n                    authorities: ['ROLE_EMPRESA'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        templateUrl: 'app/public/cuenta/miespacio/misalumnos/mis-alumnos.html',\r\n                        controllerAs: 'ctrl',\r\n                        /* @ngInject */\r\n                        controller: function (Principal) {\r\n                            var vm = this;\r\n                            Principal.identity().then(function (data) {\r\n                                vm.usuario = data;\r\n                            });\r\n                        }\r\n                    }\r\n                },\r\n                resolve: {}\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/miagenda', {\r\n                parent: 'miespacio',\r\n                url: '/mi-agenda',\r\n                redirectTo: 'miespacio/miagenda/estado',\r\n                data: {\r\n                    // Gestión de roles en el resolve\r\n                    authorities: ['ROLE_ALUMNO', 'ROLE_PROFESOR'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        templateUrl: 'app/public/cuenta/miespacio/miagenda/mi-agenda.html',\r\n                        /* @ngInject */\r\n                        controller: function (AlertService, Principal) {\r\n                            Principal.identity().then(function (data) {\r\n                                AlertService.info(\"profesor.zonahoraria\", {gmt: data.zonaHoraria.gmt});\r\n                            });\r\n                        },\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            })\r\n            .state('miespacio/miagenda/estado', {\r\n                parent: 'miespacio/miagenda',\r\n                url: '/canceladas-o-rechazadas/:canceladasRechazadas',\r\n                params: {\r\n                    canceladasRechazadas: 'false'\r\n                },\r\n                views: {\r\n                    'contentMiagenda': {\r\n                        template: '<mi-agenda usuario-autenticado=\"$resolve.usuarioAutenticado\"></mi-agenda>',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    usuarioAutenticado: function (Principal) {\r\n                        return Principal.identity().then(function (data) {\r\n                            return data;\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc controller\r\n     * @name app.controller:ConfirmModalController\r\n     * @description\r\n     * Controller que, asociado al archivo confirm.modal.html, permite abrir una ventana modal de confirmación que lanzará una acción.\r\n     *\r\n     * Es obligatorio indicar en el Resolve cada uno de los campos listados a continuación.\r\n     *\r\n     * @param {Object} item  Elemento del que se muestra información\r\n     * @param {Object} params JSON de la forma {title: '', body: '', property: ''}\r\n     * @param {Object} tipo Resource que tiene la función que se llamará\r\n     * @param {String} funcion Nombre de la función\r\n     * @param {Object} parametros Parameteros que se enviará la a función de confirmación\r\n     * @param {String}\r\n     */\r\n    angular.module('app')\r\n        .controller('ConfirmModalController', Controller);\r\n\r\n    /* @ngInject */\r\n    function Controller(item, params, tipo, funcion, parametros, ModalService) {\r\n        var vm = this;\r\n\r\n        vm.dismiss = ModalService.dismiss;\r\n        vm.item = item;\r\n        vm.params = params;\r\n\r\n        vm.confirm = function () {\r\n            tipo[funcion](parametros).$promise.then(function () {\r\n                ModalService.close(vm.item);\r\n            });\r\n        };\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('validar', {\r\n                parent: 'public',\r\n                url: '/validar?key',\r\n                data: {\r\n                    pageTitle: 'global.menu.activar'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/validar/validar.html',\r\n                        controller: 'ValidarController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('ValidarController', ValidarController);\r\n\r\n    /* @ngInject */\r\n    function ValidarController($stateParams, Auth) {\r\n        var vm = this;\r\n\r\n        Auth.validateAccount($stateParams.key).then(function (result) {\r\n            vm.error = null;\r\n            vm.success = true;\r\n            vm.rol = result.data;\r\n        }).catch(function () {\r\n            vm.error = 'ERROR';\r\n        });\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    // Solo se permite el tipo de registro 'ROLE_ALUMNO'\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('registro/info', {\r\n                parent: 'public',\r\n                url: '/entrar',\r\n                data: {\r\n                    authorities: ['ROLE_ANONYMOUS'],\r\n                    pageTitle: 'global.menu.registro'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/registro/registro.info.html'\r\n                    }\r\n                }\r\n            })\r\n            .state('registro', {\r\n                parent: 'public',\r\n                url: '/registro/:tipo',\r\n                data: {\r\n                    pageTitle: 'global.menu.registro'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/registro/registro.html',\r\n                        controller: 'RegistroController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('RegistroController', RegistroController);\r\n\r\n    /* @ngInject */\r\n    function RegistroController($timeout, $stateParams, Usuario, EnumService, AlertService) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group>input:eq(0)').focus();\r\n        });\r\n\r\n        vm.mode = 'create';\r\n\r\n        function initForm() {\r\n            vm.item = new Usuario();\r\n            vm.item.type = vm.tipo = $stateParams.tipo;\r\n            vm.confirmPassword = \"\";\r\n\r\n            initImagen();\r\n        }\r\n\r\n        initForm();\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            if (vm.item.contrasenaClaro !== vm.confirmPassword) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else if (!vm.acepto) {\r\n                AlertService.error(\"registro.error.acepto\");\r\n            } else {\r\n                vm.item.$register().then(function (data) {\r\n                    vm.success = true;\r\n                    initForm();\r\n                });\r\n            }\r\n        };\r\n\r\n        // Foto de perfil\r\n        function initImagen() {\r\n            if (!vm.item.imagen) {\r\n                vm.item.imagen = {};\r\n            }\r\n            if (vm.item.foto) {\r\n                vm.item.imagen.path = vm.item.foto;\r\n            }\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        vm.usuarioService = Usuario;\r\n\r\n    }\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('recuperar/init', {\r\n                parent: 'public',\r\n                url: '/recuperar-contrasena',\r\n                data: {\r\n                    pageTitle: 'recuperar.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/recuperar/recuperar.init.html',\r\n                        controller: 'RecuperarInitController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            })\r\n            .state('recuperar/finish', {\r\n                parent: 'public',\r\n                url: '/nueva-contrasena?key&email',\r\n                data: {\r\n                    pageTitle: 'recuperar.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/recuperar/recuperar.finish.html',\r\n                        controller: 'RecuperarFinishController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('RecuperarInitController', RecuperarInitController);\r\n\r\n    /* @ngInject */\r\n    function RecuperarInitController($timeout, Auth) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input').focus();\r\n        });\r\n\r\n        vm.recuperar = function (email) {\r\n            Auth.resetPasswordInit(email).then(function () {\r\n                vm.success = true;\r\n            });\r\n        }\r\n    }\r\n\r\n})(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('RecuperarFinishController', RecuperarFinishController);\r\n\r\n    /* @ngInject */\r\n    function RecuperarFinishController($timeout, $state, $stateParams, AlertService, Auth) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input').focus();\r\n        });\r\n\r\n        vm.save = function () {\r\n            if (vm.newPassword !== vm.confirmPassword) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                Auth.resetPasswordFinish({\r\n                    email: $stateParams.email,\r\n                    key: $stateParams.key,\r\n                    newPassword: vm.newPassword\r\n                }).then(function () {\r\n                    $state.go('home');\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/info', {\r\n                parent: 'public',\r\n                url: '/mi-espacio',\r\n                data: {\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        /* @ngInject */\r\n                        controller: function ($state, Principal) {\r\n                            if (Principal.isAuthenticated()) {\r\n                                Principal.identity().then(function (data) {\r\n                                    if (data && data.rol === 'ROLE_ALUMNO' || data.rol === 'ROLE_PROFESOR') {\r\n                                        $state.go('miespacio/miagenda');\r\n                                    } else if (data.rol === 'ROLE_EMPRESA') {\r\n                                        $state.go('miespacio/misalumnos');\r\n                                    } else {\r\n                                        $state.go('home');\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                $state.go('registro/info');\r\n                            }\r\n                        },\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            })\r\n            .state('miespacio', {\r\n                parent: 'public',\r\n                redirectTo: 'miespacio/miagenda',\r\n                url: '/mi-espacio',\r\n                data: {\r\n                    authorities: ['ROLE_AUTHENTICATED'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/miespacio/mi-espacio.template.html',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('logout', {\r\n            parent: 'public',\r\n            data: {\r\n                authorities: ['ROLE_AUTHENTICATED']\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    controller: 'LogoutController'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .controller('LogoutController', LogoutController);\r\n\r\n    /* @ngInject */\r\n    function LogoutController($state, Auth) {\r\n        Auth.logout();\r\n        // home\r\n        $state.go('registro/info');\r\n    }\r\n})();;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .component('imagenPerfilVer', {\r\n            templateUrl: \"app/components/form/archivos/imagenperfilver/imagen-perfil-ver.html\",\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                usuario: '<',\r\n                mini: '<'\r\n            }\r\n        });\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .component('imagenPerfil', {\r\n            bindings: {\r\n                ngModel: \"=\",\r\n                indice: \"=\",\r\n                imagenTemporal: \"=\",\r\n                rutaCarpetaImagen: \"@\", // Opcional\r\n                rutaImagenDefault: \"@\", // Opcional\r\n                onUploadedImage: '&',\r\n                onRemoveImage: '&'\r\n            },\r\n            templateUrl: \"app/components/form/archivos/imagenperfil/imagen-perfil.html\",\r\n            controllerAs: 'ctrl',\r\n            controller: ImagenPerfil\r\n        });\r\n\r\n    /* @ngInject */\r\n    function ImagenPerfil(Upload, AlertService) {\r\n\r\n        var vm = this;\r\n        vm.editPreview = false;\r\n        vm.myCroppedImage = '';\r\n        vm.myImage = '';\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            if (!vm.ngModel.rutaImagen) {\r\n                if (vm.ngModel.path) {\r\n                    vm.ngModel.rutaImagen = vm.rutaCarpetaImagen + \"/\" + vm.ngModel.path;\r\n                    vm.myCroppedImage = vm.ngModel.rutaImagen;\r\n                } else {\r\n                    vm.ngModel.rutaImagen = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        function onUploaded() {\r\n            vm.onUploadedImage();\r\n        }\r\n\r\n        vm.isSubmitted = function (form) {\r\n            while (!!form) {\r\n                if (form.$submitted) return true;\r\n                form = form.$$parentForm;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        vm.eliminarImagen = function () {\r\n            vm.ngModel.eliminar = true;\r\n            vm.ngModel.rutaImagen = null;\r\n            vm.ngModel.path = null;\r\n            vm.ngModel.archivoTemporal = null;\r\n            vm.myCroppedImage = '';\r\n\r\n            // Llamamos al callback para eliminar el elemento de la lista\r\n            vm.onRemoveImage({imagen: vm.ngModel});\r\n        };\r\n\r\n        function blobToFile(theBlob, fileName) {\r\n            // A Blob() is almost a File() - it's just missing the two\r\n            // properties below which we will add\r\n            theBlob.lastModifiedDate = new Date();\r\n            theBlob.name = fileName;\r\n            return theBlob;\r\n        }\r\n\r\n        function dataURItoBlob(dataURI, type) {\r\n            // convert base64 to raw binary data held in a string\r\n            var byteString = atob(dataURI.split(',')[1]);\r\n\r\n            // write the bytes of the string to an ArrayBuffer\r\n            var ab = new ArrayBuffer(byteString.length);\r\n            var ia = new Uint8Array(ab);\r\n            for (var i = 0; i < byteString.length; i++) {\r\n                ia[i] = byteString.charCodeAt(i);\r\n            }\r\n\r\n            // write the ArrayBuffer to a blob, and you're done\r\n            return new Blob([ab], {type: type});\r\n        }\r\n\r\n        vm.onImagenSelect = function (files, form) {\r\n            vm.editPreview = false;\r\n            vm.ngModel.eliminar = false;\r\n            if (files && files.length) {\r\n\r\n                vm.ngModel.path = null;\r\n                vm.progresoImagen = true;\r\n\r\n                form.$setValidity('imagenSubida', false);\r\n\r\n                // Subimos imagen\r\n                Upload.upload({\r\n                    url: \"api/archivos-temporales\",\r\n                    data: {\r\n                        file: blobToFile(dataURItoBlob(files, 'image/png'), vm.myImage.name),\r\n                        ext: \"jpeg,png,gif,jpg\"\r\n                    },\r\n                    method: 'POST'\r\n                }).success(function (response) {\r\n                    vm.progresoImagen = null;\r\n                    vm.ngModel.archivoTemporal = response.msg;\r\n                    vm.ngModel.path = vm.myImage.name;\r\n                    form.$setValidity('imagenSubida', true);\r\n                    onUploaded();\r\n                }).error(function (data) {\r\n                    vm.progresoImagen = null;\r\n                    form.$setValidity('imagenSubida', true);\r\n                    vm.eliminarImagen();\r\n                    if (data && data.msg === 'invalid extension') {\r\n                        AlertService.error(\"error.invalidextension\", {archivo: vm.myImage.name});\r\n                    } else {\r\n                        AlertService.error(\"admin.form.error.fail\");\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        vm.clickUpload = function () {\r\n            var indice = vm.indice ? vm.indice : '';\r\n            document.getElementById('inputFoto' + indice).click();\r\n        };\r\n\r\n        vm.preview = function (files) {\r\n            vm.myImage = files[0];\r\n            vm.editPreview = true;\r\n        }\r\n\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').directive('imagen', imagen);\r\n\r\n    function imagen() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                ngModel: \"=\",\r\n                indice: \"=\",\r\n                ngModelRadio: \"=\",\r\n                imagenTemporal: \"=\",\r\n                rutaCarpetaImagen: \"@\", // Opcional\r\n                rutaImagenDefault: \"@\", // Opcional\r\n                onUploadedImage: '&',\r\n                onRemoveImage: '&',\r\n                edicion: \"=\", // Opcional (default = true)\r\n                error: \"=\"\r\n            },\r\n            templateUrl: \"app/components/form/archivos/imagen/imagen.html\",\r\n            controllerAs: 'ctrl',\r\n            bindToController: true,\r\n            controller: 'ImagenController'\r\n        }\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').controller('ImagenController', ImagenController);\r\n\r\n    /* @ngInject */\r\n    function ImagenController($timeout, Upload, AlertService) {\r\n\r\n        var vm = this;\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            if (!vm.ngModel.rutaImagen) {\r\n                if (vm.ngModel.path) {\r\n                    vm.ngModel.rutaImagen = vm.rutaCarpetaImagen + \"/n_\" + vm.ngModel.path;\r\n                } else {\r\n                    vm.ngModel.rutaImagen = null;\r\n                }\r\n            }\r\n\r\n            if (vm.edicion === null || vm.edicion === undefined) {\r\n                vm.edicion = true;\r\n            }\r\n        }\r\n\r\n        function onUploaded() {\r\n            vm.onUploadedImage();\r\n        }\r\n\r\n        vm.isSubmitted = function (form) {\r\n            while (!!form) {\r\n                if (form.$submitted) return true;\r\n                form = form.$$parentForm;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        vm.eliminarImagen = function () {\r\n            vm.ngModel.eliminar = true;\r\n            vm.ngModel.rutaImagen = null;\r\n            vm.ngModel.path = null;\r\n            vm.ngModel.archivoTemporal = null;\r\n\r\n            // Llamamos al callback para eliminar el elemento de la lista\r\n            vm.onRemoveImage({imagen: vm.ngModel});\r\n        };\r\n\r\n        function generateThumb(file) {\r\n            if (file != null) {\r\n                if (file.type.indexOf('image') > -1) {\r\n                    $timeout(function () {\r\n                        var fileReader = new FileReader();\r\n                        fileReader.readAsDataURL(file);\r\n                        fileReader.onload = function (e) {\r\n                            $timeout(function () {\r\n                                vm.ngModel.rutaImagen = e.target.result;\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        vm.onImagenSelect = function (files, form, indice) {\r\n            vm.ngModel.eliminar = false;\r\n            if (files && files.length) {\r\n\r\n                vm.ngModel.path = null;\r\n                vm.progresoImagen = true;\r\n\r\n                form.$setValidity('imagenSubida', false);\r\n\r\n                // Previsualizamos imagen\r\n                generateThumb(files[0]);\r\n\r\n                // Subimos imagen\r\n                Upload.upload({\r\n                    url: \"api/archivos-temporales\",\r\n                    data: {\r\n                        file: files[0],\r\n                        ext: \"jpeg,png,gif,jpg\"\r\n                    },\r\n                    method: 'POST'\r\n                }).success(function (response) {\r\n                    vm.progresoImagen = null;\r\n                    vm.ngModel.archivoTemporal = response.msg;\r\n                    vm.ngModel.path = files[0].name;\r\n                    form.$setValidity('imagenSubida', true);\r\n                    onUploaded();\r\n                }).error(function (data) {\r\n                    vm.progresoImagen = null;\r\n                    form.$setValidity('imagenSubida', true);\r\n                    vm.eliminarImagen();\r\n                    if (data && data.msg === 'invalid extension') {\r\n                        AlertService.error(\"error.invalidextension\", {archivo: files[0].name});\r\n                    } else {\r\n                        AlertService.error(\"admin.form.error.fail\");\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        vm.clickUpload = function () {\r\n            document.getElementById('inputFoto' + vm.indice).click();\r\n        };\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').directive('fileUpload', fileUpload);\r\n\r\n    function fileUpload() {\r\n        return {\r\n            restrict: 'EA',\r\n            scope: {\r\n                id: '@',\r\n                archivo: \"=\",\r\n                archivoTemporal: \"=\",\r\n                accept: \"@\",  // Opcional (default === todas las extensiones)\r\n                error: \"=\", // Opcional\r\n                url: \"@\", // Opcional (si no se pasa, no se permite descargar el archivo)\r\n                authorities: \"@\", // Opcional (si no se indica ningún rol, será visible para todos. Ej:ROLE_ADMIN,ROLE_EDITOR_CONTENIDOS)\r\n                onSelected: \"<\"\r\n            },\r\n            templateUrl: 'app/components/form/archivos/fileupload/file-upload.html',\r\n            controllerAs: 'ctrl',\r\n            bindToController: true,\r\n            controller: 'FileUploadController'\r\n        }\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').controller('FileUploadController', FileUploadController);\r\n\r\n    /* @ngInject */\r\n    function FileUploadController(Upload, AlertService) {\r\n        var vm = this;\r\n\r\n        vm.onArchivoSelect = onArchivoSelect;\r\n        vm.eliminarArchivo = eliminarArchivo;\r\n\r\n        vm.isSubmitted = isSubmitted;\r\n\r\n        vm.upload = upload;\r\n\r\n        function upload() {\r\n            setTimeout(function () {\r\n                angular.element(\"input#\" + vm.id).trigger('click');\r\n            }, 0);\r\n        }\r\n\r\n        function isSubmitted(form) {\r\n            while (!!form) {\r\n                if (form.$submitted)\r\n                    return true;\r\n                form = form.$$parentForm;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function onArchivoSelect(files, form) {\r\n            console.log(form);\r\n\r\n            if (files && files.length) {\r\n                vm.progresoArchivo = true;\r\n                vm.archivo = files[0].name;\r\n                form.$setValidity('archivoSubido', false);\r\n                Upload.upload({\r\n                    url: \"api/archivos-temporales\",\r\n                    data: {\r\n                        file: files[0],\r\n                        ext: vm.accept\r\n                    },\r\n                    method: 'POST'\r\n                }).success(function (response) {\r\n                    console.log(\"Archivo subido\");\r\n                    vm.progresoArchivo = false;\r\n                    vm.archivoTemporal = response.msg;\r\n                    form.$setValidity('archivoSubido', true);\r\n\r\n                    if (vm.onSelected) {\r\n                        vm.onSelected(vm.archivoTemporal, vm.archivo);\r\n                    }\r\n\r\n                }).error(function (data) {\r\n                    console.log(\"Error subiendo\");\r\n                    vm.progresoArchivo = false;\r\n                    vm.archivo = null;\r\n                    form.$setValidity('archivoSubido', true);\r\n                    if (data && data.msg === 'invalid extension') {\r\n                        AlertService.error(\"error.invalidextension\", {archivo: files[0].name});\r\n                    } else {\r\n                        AlertService.error(\"admin.form.error.fail\");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function eliminarArchivo() {\r\n            vm.archivo = null;\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').directive('download', download);\r\n\r\n    function download() {\r\n\r\n        return {\r\n            restrict: 'EA',\r\n            scope: {\r\n                archivo: \"=\",\r\n                url: \"@\",\r\n                showLabel: \"=\"\r\n            },\r\n            templateUrl: 'app/components/form/archivos/download/download.html',\r\n            controllerAs: 'ctrl',\r\n            bindToController: true,\r\n            controller: 'DownloadController'\r\n        }\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').controller('DownloadController', DownloadController);\r\n\r\n    function DownloadController() {\r\n        var vm = this;\r\n\r\n        vm.descargarArchivo = descargarArchivo;\r\n\r\n        function descargarArchivo() {\r\n            window.open(vm.url + vm.archivo, '_blank');\r\n        }\r\n    }\r\n\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('ProfesorListController', ProfesorListController);\r\n\r\n    /* @ngInject */\r\n    function ProfesorListController(User, $state, $scope) {\r\n        var vm = this;\r\n\r\n        vm.profesores = [];\r\n\r\n        vm.filter = {\r\n            activos: true,\r\n            idioma: null,\r\n            nivel: null,\r\n            paises: [], /*disponibilidad: 'AMBOS',*/\r\n            capacidades: [],\r\n            horadia: null,\r\n            dia: null\r\n        };\r\n\r\n        $scope.$watch(function () {\r\n            return vm.filter;\r\n        }, function (newValue, oldValue) {\r\n            if (newValue.idioma === oldValue.idioma && newValue.nivel === oldValue.nivel &&\r\n                newValue.paises.length === oldValue.paises.length /*&& newValue.disponibilidad === oldValue.disponibilidad*/ &&\r\n                newValue.capacidades.length === oldValue.capacidades.length && newValue.horadia === oldValue.horadia &&\r\n                newValue.dia === oldValue.dia) {\r\n                return;\r\n            }\r\n            vm.filter.size = 10;\r\n            vm.filter.page = 0;\r\n            User.findAllProfesor(vm.filter).$promise.then(function (data) {\r\n                vm.profesores = data.content;\r\n            });\r\n        }, true);\r\n\r\n        vm.abrir = function (id) {\r\n            $state.go(\"profesor/info\", {id: id});\r\n        };\r\n\r\n        // Infinite scroll\r\n\r\n        vm.loading = false;\r\n        vm.loaded = false;\r\n\r\n        vm.filter.size = 10;\r\n        vm.filter.page = 0;\r\n\r\n        vm.cargar = function () {\r\n            if (vm.loading) return;\r\n            vm.loading = true;\r\n            User.findAllProfesor(vm.filter).$promise.then(function (data) {\r\n                for (var i = 0; i <= data.content.length - 1; i++) {\r\n                    vm.profesores.push(data.content[i]);\r\n                }\r\n                vm.filter.page += 1;\r\n                vm.loading = false;\r\n                if (data.content.length < vm.filter.size) vm.loaded = true;\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('buttons', {\r\n            templateUrl: 'app/components/form/buttons/buttons-form.template.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                canSave: '<',\r\n                mode: '<'\r\n            }\r\n        });\r\n\r\n    function Controller($rootScope, ModalService) {\r\n        var vm = this;\r\n\r\n        // Si hay una ventana modal abierta, se cierra\r\n        vm.back = function () {\r\n            if (ModalService.isOpen()) {\r\n                ModalService.dismiss();\r\n            } else {\r\n                $rootScope.back();\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('usuarioReserva', {\r\n            templateUrl: 'app/public/components/usuarioreserva/usuario-reserva.html',\r\n            controller: UsuarioReservaController,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                usuario: '<',\r\n                reserva: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function UsuarioReservaController() {\r\n        var vm = this;\r\n\r\n        vm.cancelada =\r\n            vm.reserva.estado === 'RECHAZADA'\r\n            || vm.reserva.estado === 'CANCELADA_POR_ALUMNO'\r\n            || vm.reserva.estado === 'CANCELADA_POR_PROFESOR';\r\n\r\n        vm.evaluada =\r\n            vm.reserva.estado === 'PENDIENTE'\r\n            || vm.reserva.estado === 'INCIDENCIA'\r\n            || vm.reserva.estado === 'REALIZADA';\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('profesor', {\r\n            templateUrl: 'app/public/components/profesor/profesor.html',\r\n            controller: ProfesorController,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                profesor: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function ProfesorController() {\r\n        var vm = this;\r\n        var d = new Date();\r\n        var minutos = '0';\r\n        if (d.getMinutes() < 10) {\r\n            minutos = minutos + d.getMinutes();\r\n        } else {\r\n            minutos = d.getMinutes();\r\n        }\r\n        if (vm.profesor.zonaHoraria) {\r\n            vm.now = d.getHours() + parseInt(vm.profesor.zonaHoraria.gmt.substring(3, 6)) + (d.getTimezoneOffset() / 60) + \":\" + minutos;\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Componente para modificar la contraseña\r\n\r\n    angular\r\n        .module('app')\r\n        .component('changePassword', {\r\n            templateUrl: 'app/public/components/password/password.html',\r\n            controller: PasswordController,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function PasswordController($timeout, Auth, AlertService) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.save = function () {\r\n            if (vm.form.newpassword !== vm.confirmPassword) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                Auth.changePassword(vm.form).then(function () {\r\n                    vm.form.password = \"\";\r\n                    vm.form.newpassword = \"\";\r\n                    vm.form.$setPristine();\r\n                    vm.confirmPassword = \"\";\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('paquetecreditosList', {\r\n            templateUrl: 'app/public/components/paquetecreditos/paquetecreditos-list.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, Paquetecreditos, Principal, $state, Auth) {\r\n        var vm = this;\r\n\r\n        Principal.identity().then(function (data) {\r\n            vm.usuarioAutenticado = data;\r\n        });\r\n\r\n        vm.item = Paquetecreditos;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.paquetecreditosId = $stateParams.paquetecreditosId;\r\n        vm.filter = {\r\n            key: undefined,\r\n            size: null\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {creditos: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Eliminar\r\n        vm.showRemoveConfirmation = function (id) {\r\n            ModalService.open({\r\n                    templateUrl: 'app/components/form/delete/entity.delete.modal.html',\r\n                    controller: 'EntityDeleteModalController',\r\n                    controllerAs: 'ctrl',\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        item: function () {\r\n                            return Paquetecreditos.get({id: id}).$promise;\r\n                        },\r\n                        params: function () {\r\n                            return {\r\n                                title: 'admin.paquetecreditos.delete.title',\r\n                                body: 'admin.paquetecreditos.delete.confirm',\r\n                                property: 'creditos'\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            ).result.then(function () {\r\n                vm.tableParams.reload();\r\n            });\r\n        };\r\n\r\n        vm.comprarPaquetecreditos = function (id) {\r\n            if (vm.usuarioAutenticado == null) {\r\n                Auth.authorize(false, \"ROLE_AUTHENTICATED\");\r\n            } else {\r\n                $state.go('paquetecreditos/comprar', {paqueteId: id});\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('paquetecreditosComprar', {\r\n            templateUrl: 'app/public/components/paquetecreditos/paquetecreditos-comprar.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                paqueteCreditos: '<',\r\n                datosFacturacion: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($state, $stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, Paquetecreditos, Principal, DatosFacturacion, Auth) {\r\n        var vm = this;\r\n\r\n        vm.solicitarFactura = false;\r\n\r\n        vm.item = {datosFacturacion: vm.datosFacturacion};\r\n\r\n        Principal.identity().then(function (data) {\r\n            vm.usuarioAutenticado = data;\r\n        });\r\n\r\n        vm.comprar = function () {\r\n            if (vm.usuarioAutenticado == null) {\r\n                Auth.authorize(false, \"ROLE_AUTHENTICATED\");\r\n            } else {\r\n                if (vm.solicitarFactura) {\r\n                    DatosFacturacion.save(vm.item.datosFacturacion).$promise.then(function () {\r\n                        comprar();\r\n                    });\r\n                } else {\r\n                    comprar();\r\n                }\r\n            }\r\n        };\r\n\r\n        function comprar() {\r\n            $state.go('compra/crear', {\r\n                paquetecreditosId: vm.paqueteCreditos.id,\r\n                usuario: vm.usuarioAutenticado,\r\n                solicitarFactura: vm.solicitarFactura\r\n            });\r\n        }\r\n\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('misAlumnosList', {\r\n            templateUrl: 'app/public/components/misalumnos/mis-alumnos-list.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($state, $stateParams, NG_TABLE_DEFAULT_PARAMS_PUBLIC, NgTableParams, NgTableHelper,\r\n                        User, Principal) {\r\n        var vm = this;\r\n\r\n        Principal.identity().then(function (data) {\r\n            vm.usuarioAutenticado = data;\r\n        });\r\n\r\n        vm.item = User;\r\n        vm.function = 'findAlumnosByCentro';\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS_PUBLIC.size;\r\n        vm.filter = {\r\n            key: undefined\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {nombre: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Reserva', Reserva);\r\n\r\n    /* @ngInject */\r\n    function Reserva(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"reserva\", {}, {\r\n            'save': {\r\n                method: 'POST',\r\n                url: 'api/public/reserva',\r\n                isArray: false\r\n            },\r\n            'findAll': {\r\n                method: 'GET',\r\n                url: 'api/public/reserva/findAll',\r\n                isArray: false\r\n            },\r\n            'filterByAdmin': {\r\n                method: 'GET',\r\n                url: 'api/admin/reserva/filterByAdmin',\r\n                isArray: false\r\n            },\r\n            'update': {\r\n                method: 'POST',\r\n                url: 'api/public/reserva/update',\r\n                isArray: false\r\n            },\r\n            'devolverCreditos': {\r\n                method: 'POST',\r\n                url: 'api/admin/reserva/devolverCreditos',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'rechazarCreditos': {\r\n                method: 'POST',\r\n                url: 'api/admin/reserva/rechazarCreditos',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('reservaCount', {\r\n            template: '<span class=\"reserva-count\" ng-if=\"ctrl.estados[ctrl.estado] > 0\">({{ctrl.estados[ctrl.estado]}})</span>',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                estado: '@',\r\n                estados: '='\r\n            }\r\n        });\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Calendario: http://angular-ui.github.io/ui-calendar/\r\n     */\r\n\r\n    angular\r\n        .module('app')\r\n        .component('miAgenda', {\r\n            templateUrl: 'app/public/components/miagenda/mi-agenda.list.html',\r\n            controller: MiAgendaController,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                usuarioAutenticado: '<',\r\n                admin: '<', // Boolean\r\n                initMonth: '<', // Integer: Del 1 al 12\r\n                initYear: '<' // Integer\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function MiAgendaController($scope, $compile, $timeout, $translate, $state, uiCalendarConfig,\r\n                                Reserva, ClaseLibre, ModalService, Principal, Auth, AlertService) {\r\n\r\n        // *********************************************** CONSTANTES ***********************************************\r\n        $scope.COLOR_CLASE_LIBRE = '#4ACF4A';\r\n        $scope.COLOR_CLASE_OCUPADA = 'lightgray';\r\n        $scope.COLOR_RESERVA_SIN_CONTESTAR = 'gold';\r\n        $scope.COLOR_RESERVA_CONFIRMADA = '#87CEFA';\r\n        $scope.COLOR_RESERVA_NO_CONTESTADA_RECHAZADA_CANCELADA_POR_ALUMNO_O_PROFESOR = '#FFB266';\r\n        $scope.COLOR_RESERVA_INCIDENCIA = '#FF6666';\r\n        $scope.COLOR_RESERVA_PENDIENTE = '#8866FF';\r\n        $scope.COLOR_RESERVA_REALIZADA = '#FF66FF';\r\n        var TREINTA_MINUTOS_EN_MS = 1800000;\r\n\r\n        // ********************************************* Inicialización *********************************************\r\n        var vm = this;\r\n\r\n        function cargarDatos(start, end) {\r\n            $scope.firstTiempoMinimo = true;\r\n            $scope.firstTiempoMaximo = true;\r\n            obtenerClasesLibres(start, end);\r\n        }\r\n\r\n        if ($state.params.id != null) {\r\n            vm.profesor = {};\r\n            vm.profesor.id = $state.params.id;\r\n        }\r\n\r\n        if (vm.usuarioAutenticado == null) {\r\n            Principal.identity().then(function (data) {\r\n                vm.usuarioAutenticado = data;\r\n                $scope.usuarioLogueado = vm.usuarioAutenticado != null;\r\n            });\r\n        } else {\r\n            $scope.usuarioLogueado = true;\r\n        }\r\n\r\n        if ($state.params.id != null) {\r\n            vm.usuarioObtenerClasesLibres = vm.profesor;\r\n            $scope.alumnoViendose = false;\r\n        } else {\r\n            vm.usuarioObtenerClasesLibres = vm.usuarioAutenticado;\r\n            $scope.alumnoViendose = true;\r\n        }\r\n\r\n        var defaultView = 'agendaWeek';\r\n        if (vm.admin) {\r\n            defaultView = 'month';\r\n        }\r\n\r\n        // En caso de que se indiquen un mes y un año, inicializamos el calendario\r\n        var today = new Date();\r\n        var defaultDate = new Date();\r\n        if (vm.initMonth) {\r\n            vm.initMonth = vm.initMonth - 1;\r\n            defaultDate.setMonth(vm.initMonth);\r\n        }\r\n        if (vm.initYear) {\r\n            defaultDate.setFullYear(vm.initYear);\r\n        } else {\r\n            if (vm.initMonth > today.getMonth()) {\r\n                defaultDate.setFullYear(today.getFullYear() - 1);\r\n            }\r\n        }\r\n\r\n        $scope.rol = vm.usuarioObtenerClasesLibres.rol;\r\n        $scope.canceladasRechazadas = $state.params.canceladasRechazadas;\r\n\r\n        $scope.firstTiempoMinimo = true;\r\n        $scope.firstTiempoMaximo = true;\r\n\r\n        // ***************************************** Funcionalidad *****************************************\r\n\r\n        function actualizarEvento(evento) {\r\n            if (evento != null) {\r\n                angular.element('.calendar').fullCalendar('updateEvent', evento);\r\n            }\r\n        }\r\n\r\n        function actualizarRangosTiempo() {\r\n            // FIXME: Para que funcionase lo de adaptar el calendario a las clases (no mostrar las 24 horas, si no solo las necesarias)\r\n            //  habría que encontrar la manera de que no se llamase a renderView al cambiar minTime y maxTime\r\n            // Actualizar minTime y maxTime (hora de inicio y de fin del calendario)\r\n            // if (!$scope.rol || $scope.rol === 'ROLE_ALUMNO') {\r\n            //     // vm.cambiandoTiempo = true;\r\n            //     $scope.uiConfig.calendar.minTime = $scope.tiempoMinimo.getHours() + ':' + $scope.tiempoMinimo.getMinutes();\r\n            //     $scope.uiConfig.calendar.maxTime = $scope.tiempoMaximo.getHours() + ':' + $scope.tiempoMaximo.getMinutes();\r\n            // }\r\n        }\r\n\r\n        function actualizarAgenda(eventos) {\r\n            uiCalendarConfig.calendars.myCalendar.fullCalendar('removeEvents');\r\n            uiCalendarConfig.calendars.myCalendar.fullCalendar('addEventSource', eventos);\r\n        }\r\n\r\n        var minutesOfDay = function (d) {\r\n            return d.getMinutes() + d.getHours() * 60;\r\n        };\r\n\r\n        function devolverColorEvento(evento) {\r\n            if (evento != null) {\r\n                if (evento.ocupada) {\r\n                    evento.backgroundColor = $scope.COLOR_CLASE_OCUPADA;\r\n                    evento.borderColor = $scope.COLOR_CLASE_OCUPADA;\r\n                } else {\r\n                    evento.backgroundColor = $scope.COLOR_CLASE_LIBRE;\r\n                    evento.borderColor = $scope.COLOR_CLASE_LIBRE;\r\n                }\r\n            }\r\n        }\r\n\r\n        function clasesLibresToBloque(response, start, end) {\r\n            var resultados = response.content;\r\n            if (resultados.length) {\r\n                var inicio = null;\r\n                var fin = null;\r\n                for (var i = 0; i < resultados.length; i++) {\r\n                    inicio = new Date(resultados[i].fecha * 1000);\r\n                    // Coger el tiempo mínimo para mostrar la agenda acotada\r\n                    if ($scope.firstTiempoMinimo || $scope.tiempoMinimo != null && (minutesOfDay($scope.tiempoMinimo) > minutesOfDay(inicio))) {\r\n                        $scope.tiempoMinimo = new Date(inicio.valueOf());\r\n                        $scope.firstTiempoMinimo = false;\r\n                    }\r\n                    fin = new Date(resultados[i].fecha * 1000 + TREINTA_MINUTOS_EN_MS);\r\n                    // Coger el tiempo máximo para mostrar la agenda acotada\r\n                    if ($scope.firstTiempoMaximo || $scope.tiempoMaximo != null && (minutesOfDay($scope.tiempoMaximo) < minutesOfDay(fin))) {\r\n                        $scope.tiempoMaximo = new Date(fin.valueOf());\r\n                        $scope.firstTiempoMaximo = false;\r\n                    }\r\n                    var className = '';\r\n                    if (inicio < today) {\r\n                        className = 'eventosPasados';\r\n                    }\r\n                    if (resultados[i].ocupada) {\r\n                        $scope.events.push({\r\n                            start: inicio,\r\n                            end: fin,\r\n                            backgroundColor: $scope.COLOR_CLASE_OCUPADA,\r\n                            borderColor: $scope.COLOR_CLASE_OCUPADA,\r\n                            ocupada: resultados[i].ocupada,\r\n                            id: resultados[i].id,\r\n                            className: className\r\n                        });\r\n                    } else {\r\n                        $scope.events.push({\r\n                            start: inicio,\r\n                            end: fin,\r\n                            backgroundColor: $scope.COLOR_CLASE_LIBRE,\r\n                            borderColor: $scope.COLOR_CLASE_LIBRE,\r\n                            ocupada: resultados[i].ocupada,\r\n                            id: resultados[i].id,\r\n                            className: className\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (vm.usuarioAutenticado == null) {\r\n                    actualizarRangosTiempo();\r\n                    actualizarAgenda($scope.events);\r\n                }\r\n            }\r\n        }\r\n\r\n        vm.countEstados = {};\r\n\r\n        function reservasToBloque(response, start, end, ocupada) {\r\n            vm.countEstados = {};\r\n            var resultados = response.content;\r\n            var inicio = null;\r\n            var fin = null;\r\n            var backgroundColor = null;\r\n            var borderColor = null;\r\n            var reservasAux = [];\r\n            for (var i = 0; i < resultados.length; i++) {\r\n                inicio = new Date(resultados[i].fecha * 1000);\r\n                // Coger el tiempo mínimo para mostrar la agenda acotada\r\n                if ($scope.firstTiempoMinimo || $scope.tiempoMinimo != null && (minutesOfDay($scope.tiempoMinimo) > minutesOfDay(inicio))) {\r\n                    $scope.tiempoMinimo = new Date(inicio.valueOf());\r\n                    $scope.firstTiempoMinimo = false;\r\n                }\r\n                fin = new Date(resultados[i].fecha * 1000 + TREINTA_MINUTOS_EN_MS);\r\n                // Coger el tiempo máximo para mostrar la agenda acotada\r\n                if ($scope.firstTiempoMaximo || $scope.tiempoMaximo != null && (minutesOfDay($scope.tiempoMaximo) < minutesOfDay(fin))) {\r\n                    $scope.tiempoMaximo = new Date(fin.valueOf());\r\n                    $scope.firstTiempoMaximo = false;\r\n                }\r\n\r\n                // Número de reservas en cada estado\r\n                if (vm.countEstados[resultados[i].estado]) {\r\n                    vm.countEstados[resultados[i].estado] = (vm.countEstados[resultados[i].estado] + 1);\r\n                } else {\r\n                    vm.countEstados[resultados[i].estado] = 1;\r\n                }\r\n\r\n                switch (resultados[i].estado) {\r\n                    case 'SIN_CONTESTAR':\r\n                        backgroundColor = $scope.COLOR_RESERVA_SIN_CONTESTAR;\r\n                        borderColor = $scope.COLOR_RESERVA_SIN_CONTESTAR;\r\n                        break;\r\n                    case 'CONFIRMADA':\r\n                        backgroundColor = $scope.COLOR_RESERVA_CONFIRMADA;\r\n                        borderColor = $scope.COLOR_RESERVA_CONFIRMADA;\r\n                        break;\r\n                    case 'NO_CONTESTADA':\r\n                    case 'RECHAZADA':\r\n                    case 'CANCELADA_POR_ALUMNO':\r\n                    case 'CANCELADA_POR_PROFESOR':\r\n                        backgroundColor = $scope.COLOR_RESERVA_NO_CONTESTADA_RECHAZADA_CANCELADA_POR_ALUMNO_O_PROFESOR;\r\n                        borderColor = $scope.COLOR_RESERVA_NO_CONTESTADA_RECHAZADA_CANCELADA_POR_ALUMNO_O_PROFESOR;\r\n                        break;\r\n                    case 'INCIDENCIA':\r\n                        backgroundColor = $scope.COLOR_RESERVA_INCIDENCIA;\r\n                        borderColor = $scope.COLOR_RESERVA_INCIDENCIA;\r\n                        break;\r\n                    case 'PENDIENTE':\r\n                        backgroundColor = $scope.COLOR_RESERVA_PENDIENTE;\r\n                        borderColor = $scope.COLOR_RESERVA_PENDIENTE;\r\n                        break;\r\n                    case 'REALIZADA':\r\n                        backgroundColor = $scope.COLOR_RESERVA_REALIZADA;\r\n                        borderColor = $scope.COLOR_RESERVA_REALIZADA;\r\n                        break;\r\n                }\r\n\r\n                //FIXME: Optimizar esto\r\n                for (var j = 0; j < $scope.events.length; j++) {\r\n                    if (resultados[i].claseLibre != null && $scope.events[j].id === resultados[i].claseLibre.id) {\r\n                        $scope.events.splice(j, 1);\r\n                    }\r\n                }\r\n\r\n                var titulo;\r\n                var persona;\r\n                var className = '';\r\n                if (vm.usuarioAutenticado.rol === 'ROLE_PROFESOR') {\r\n                    persona = resultados[i].alumno;\r\n                } else {\r\n                    persona = resultados[i].profesor;\r\n                }\r\n                // Mostramos el nombre del alumno/profesor con el que va a ser la clase\r\n                titulo = persona.nombre;\r\n                titulo += persona.apellidos ? ' ' + persona.apellidos : '';\r\n\r\n                // De las reservas pasadas, dejamos las pendientes resaltadas\r\n                if (inicio < today && (resultados[i].estado !== 'PENDIENTE' || vm.usuarioAutenticado.rol === 'ROLE_ALUMNO')) {\r\n                    className = 'eventosPasados';\r\n                }\r\n\r\n                reservasAux.push({\r\n                    start: inicio,\r\n                    end: fin,\r\n                    backgroundColor: backgroundColor,\r\n                    borderColor: borderColor,\r\n                    ocupada: ocupada,\r\n                    id: resultados[i].id,\r\n                    estado: resultados[i].estado,\r\n                    motivoProfesor: resultados[i].motivoProfesor,\r\n                    motivoAlumno: resultados[i].motivoAlumno,\r\n                    className: className,\r\n                    title: titulo\r\n                });\r\n            }\r\n\r\n            $scope.events.push.apply($scope.events, reservasAux);\r\n\r\n            actualizarRangosTiempo();\r\n            actualizarAgenda($scope.events);\r\n        }\r\n\r\n        // Función que muestra las clases libres y las reservas para rellenar la agenda (fullcalendar)\r\n        function obtenerClasesLibres(start, end) {\r\n            $scope.events = [];\r\n            ClaseLibre.findAll({\r\n                fechaInicio: start.toDate(),\r\n                fechaFin: end.toDate(),\r\n                ocupada: null,\r\n                id: vm.usuarioObtenerClasesLibres.id\r\n            }).$promise.then(\r\n                function (response) {\r\n                    if ($state.params.canceladasRechazadas == null || $state.params.canceladasRechazadas === 'false') {\r\n                        clasesLibresToBloque(response, start, end);\r\n                    }\r\n                    if (vm.usuarioAutenticado != null) {\r\n                        Reserva.findAll({\r\n                            id: vm.usuarioAutenticado.id,\r\n                            rol: vm.usuarioAutenticado.rol,\r\n                            fechaInicio: start.toDate(),\r\n                            fechaFin: end.toDate(),\r\n                            canceladasRechazadas: $state.params.canceladasRechazadas\r\n                        }).$promise.then(\r\n                            function (response) {\r\n                                reservasToBloque(response, start, end, true);\r\n                                vm.loading = false;\r\n                            },\r\n                            function (error) {\r\n                                vm.error = error.data.mensaje;\r\n                                vm.loading = false;\r\n                            }\r\n                        );\r\n                    } else {\r\n                        vm.loading = false;\r\n                    }\r\n                },\r\n                function (error) {\r\n                    vm.error = error.data.mensaje;\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        $scope.deseleccionarEvento = function () {\r\n            $scope.isCollapsed = false;\r\n            devolverColorEvento($scope.eventoSeleccionado);\r\n            actualizarEvento($scope.eventoSeleccionado);\r\n        };\r\n\r\n        $scope.duplicarSemana = function () {\r\n            ClaseLibre.duplicarsemana({\r\n                fechaInicio: $scope.start,\r\n                fechaFin: $scope.end,\r\n                id: vm.usuarioObtenerClasesLibres.id\r\n            }).$promise.then(function (data) {\r\n                AlertService.success(\"admin.reserva.duplicar.semana\");\r\n            })\r\n        };\r\n\r\n        $scope.dayClick = function (date, allDay, jsEvent, view) {\r\n            if (jsEvent.type === 'agendaWeek' && $scope.canceladasRechazadas == 'false') {\r\n                if (date.toDate() > today) {\r\n                    if (vm.usuarioAutenticado.rol === 'ROLE_PROFESOR') {\r\n                        $scope.events.push({\r\n                            start: date.toDate(),\r\n                            end: date.clone().add('30', 'm').toDate(),\r\n                            backgroundColor: $scope.COLOR_CLASE_LIBRE,\r\n                            borderColor: $scope.COLOR_CLASE_LIBRE\r\n                        });\r\n                        ClaseLibre.save({\r\n                            fecha: date,\r\n                            ocupada: false,\r\n                            profesor: {id: vm.usuarioAutenticado.id, type: vm.usuarioAutenticado.type}\r\n                        }).$promise.then(function () {\r\n                            cargarDatos(jsEvent.start, jsEvent.end);\r\n                        }).catch(function () {\r\n                            // Si se detecta un error, se recarga la página\r\n                            cargarDatos(jsEvent.start, jsEvent.end);\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.alertOnEventClick = function (clase, jsEvent, view) {\r\n            if (vm.admin) return;\r\n\r\n            if (vm.usuarioAutenticado == null) {\r\n                Auth.authorize(false, \"ROLE_AUTHENTICATED\");\r\n            }\r\n\r\n            if (vm.usuarioAutenticado != null) {\r\n                // Un profesor puede eliminar una hora libre si no está reservada\r\n                if (vm.usuarioAutenticado.rol === 'ROLE_PROFESOR' && !clase.ocupada && clase.start.toDate() > today) {\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                        controller: 'ConfirmModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            /* @ngInject */\r\n                            tipo: function (ClaseLibre) {\r\n                                return ClaseLibre;\r\n                            },\r\n                            funcion: function () {\r\n                                return \"subtract\";\r\n                            },\r\n                            parametros: function () {\r\n                                return {id: clase.id}\r\n                            },\r\n                            params: function () {\r\n                                return {\r\n                                    title: 'admin.claselibre.bloque.delete.title',\r\n                                    body: 'admin.claselibre.bloque.delete.confirm',\r\n                                    property: ''\r\n                                };\r\n                            },\r\n                            item: function () {\r\n                            },\r\n                            configuracion: function () {\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        for (var i = 0; i < $scope.events.length; i++) {\r\n                            if ($scope.events[i].id == clase.id) {\r\n                                $scope.events.splice(i, 1);\r\n                                actualizarAgenda($scope.events);\r\n                            }\r\n                        }\r\n                    });\r\n                } else\r\n                // Un alumno puede reservar una clase libre\r\n                // Un profesor puede confirmar o rechazar una reserva sin contestar\r\n                // Un profesor o alumno pueden cancelar una reserva confirmada a X horas de la realización de la misma\r\n                // Un profesor puede indicar si la clase se ha llevado a cabo o no (incidencia)\r\n                // Un alumno puede escribir un comentario en las clases realizadas\r\n                {\r\n                    if (clase.start.toDate() < today && (clase.estado === 'SIN_CONTESTAR' || !clase.ocupada)) {\r\n                        return;\r\n                    }\r\n                    if (clase.estado == null && clase.ocupada == true) {\r\n                        return;\r\n                    }\r\n                    $scope.eventoSeleccionado = angular.element('.calendar').fullCalendar('clientEvents', clase._id)[0];\r\n                    $scope.eventoSeleccionado.vistaInicio = view.start;\r\n                    $scope.eventoSeleccionado.vistaFin = view.end;\r\n                    $scope.anteriorEventoIdSeleccionado = clase._id;\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/reserva/reserva.modal.html',\r\n                        controller: 'ReservaModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            parametros: function () {\r\n                                return {\r\n                                    id: clase.id,\r\n                                    rolbd: vm.usuarioAutenticado.rol,\r\n                                    estadobd: clase.estado,\r\n                                    fechaPrimeraClase: clase.start.toDate(),\r\n                                    fechaUltimaClase: clase.end.toDate(),\r\n                                    alumnoId: vm.usuarioAutenticado.id,\r\n                                    creditosDisponibles: vm.usuarioAutenticado.creditosDisponibles,\r\n                                    motivoAlumno: clase.motivoAlumno,\r\n                                    motivoProfesor: clase.motivoProfesor\r\n                                }\r\n                            },\r\n                            item: function () {\r\n                                return clase;\r\n                            },\r\n                            /* @ngInject */\r\n                            usuarioModal: function (User) {\r\n                                if (clase.estado == null) {\r\n                                    return User.getProfesorPorClaseLibre({id: clase.id}).$promise.then(function (data) {\r\n                                        return data;\r\n                                    });\r\n                                } else {\r\n                                    return User.getUsuarioPorReserva({\r\n                                        id: clase.id,\r\n                                        rol: vm.usuarioAutenticado.rol\r\n                                    }).$promise.then(function (data) {\r\n                                        return data;\r\n                                    });\r\n                                }\r\n                            },\r\n                            /* @ngInject */\r\n                            configuracion: function (Configuracion) {\r\n                                return Configuracion.get({id: '0'}).$promise.then(function (data) {\r\n                                    return data;\r\n                                });\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        Principal.identity(true).then(function (data) {\r\n                            vm.usuarioAutenticado.creditosDisponibles = data.creditosDisponibles;\r\n                            vm.usuarioAutenticado.creditosConsumidos = data.creditosConsumidos;\r\n                        });\r\n                        cargarDatos(view.start, view.end);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.eventRender = function (event, element, view) {\r\n            element.attr({'uib-tooltip': event.tooltip, 'uib-tooltip-append-to-body': true});\r\n            $compile(element)($scope);\r\n        };\r\n\r\n        $scope.viewRender = function (view, element) {\r\n            if (!vm.loading) {\r\n                vm.loading = true;\r\n                $scope.start = view.start;\r\n                $scope.end = view.end;\r\n                cargarDatos(view.start, view.end);\r\n                if (view.intervalUnit === 'week') {\r\n                    angular.element(\".fc-duplicarSemana-button\").show();\r\n                } else {\r\n                    angular.element(\".fc-duplicarSemana-button\").hide();\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.eventAfterAllRender = function () {\r\n        };\r\n\r\n        // ***************************************** ui-calendar *****************************************\r\n        // https://fullcalendar.io/docs/display/\r\n        $scope.uiConfig = {\r\n            calendar: {\r\n                defaultDate: defaultDate,\r\n                height: 'auto',\r\n                editable: false,\r\n                allDaySlot: false,\r\n                defaultView: defaultView,\r\n                timezone: 'local',\r\n                minTime: '00:00',\r\n                maxTime: '24:00',\r\n                locale: 'es',\r\n                firstDay: 1,\r\n                eventOverlap: false,\r\n                eventStartEditable: false,\r\n                header: {left: 'agendaWeek,month', center: 'title', right: 'recargar duplicarSemana today prev,next'},\r\n                timeFormat: 'H:mm',\r\n                slotLabelFormat: 'H:mm',\r\n                dayClick: $scope.dayClick,\r\n                eventClick: $scope.alertOnEventClick,\r\n                eventDurationEditable: false,\r\n                eventRender: $scope.eventRender,\r\n                viewRender: $scope.viewRender,\r\n                eventAfterAllRender: $scope.eventAfterAllRender\r\n            }\r\n        };\r\n\r\n        // Botón de recarga\r\n        $scope.uiConfig.calendar.customButtons = {\r\n            recargar: {\r\n                icon: 'recargar fa fa-refresh',\r\n                click: function () {\r\n                    cargarDatos($scope.start, $scope.end);\r\n                }\r\n            }\r\n        };\r\n\r\n        // Botón para el duplicado de semanas\r\n        if (vm.usuarioAutenticado != null && vm.usuarioAutenticado.rol === 'ROLE_PROFESOR' && !vm.admin) {\r\n            $scope.uiConfig.calendar.editable = true;\r\n            angular.extend($scope.uiConfig.calendar.customButtons, {\r\n                duplicarSemana: {\r\n                    text: $translate.instant('admin.reserva.duplicar.title'),\r\n                    click: function () {\r\n                        $scope.duplicarSemana();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('ClaseLibre', ClaseLibre);\r\n\r\n    /* @ngInject */\r\n    function ClaseLibre(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"clase-libre\", {}, {\r\n            'save': {\r\n                method: 'POST',\r\n                url: 'api/public/clase-libre',\r\n                isArray: false\r\n            },\r\n            'findAll': {\r\n                method: 'GET',\r\n                url: 'api/public/clase-libre/findAll',\r\n                isArray: false\r\n            },\r\n            'subtract': {\r\n                method: 'POST',\r\n                url: 'api/public/clase-libre/subtract',\r\n                isArray: false\r\n            },\r\n            'addlist': {\r\n                method: 'POST',\r\n                url: 'api/public/clase-libre/add-list',\r\n                isArray: false\r\n            },\r\n            'duplicarsemana': {\r\n                method: 'POST',\r\n                url: 'api/public/clase-libre/duplicar-semana',\r\n                isArray: false\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('login', {\r\n            templateUrl: 'app/public/components/login/login.html',\r\n            controller: LoginController,\r\n            bindings: {\r\n                foco: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function LoginController($state, $timeout, Auth, AlertService, ADMIN_PRINCIPAL) {\r\n        var vm = this;\r\n\r\n        vm.user = {};\r\n        vm.rememberMe = false;\r\n\r\n        if (vm.foco) {\r\n            $timeout(function () {\r\n                angular.element('.form-group>input#username').focus();\r\n            });\r\n        }\r\n\r\n        vm.login = function () {\r\n            Auth.login({\r\n                username: vm.username,\r\n                password: vm.password,\r\n                rememberMe: vm.rememberMe\r\n            }).then(function (data) {\r\n                vm.authenticationError = false;\r\n                if (data.rol === 'ROLE_ADMIN') {\r\n                    $state.go(ADMIN_PRINCIPAL, {}, {reload: true});\r\n                } else {\r\n                    $state.go('miespacio/info', {}, {reload: true});\r\n                }\r\n            }).catch(function () {\r\n                AlertService.error(\"login.form.error.authentication\");\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('compraList', {\r\n            templateUrl: 'app/public/components/compra/compra-list.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                usuario: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, Compra) {\r\n        var vm = this;\r\n\r\n        vm.item = Compra;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        //vm.paquetecreditosId = $stateParams.paquetecreditosId;\r\n        vm.filter = {\r\n            key: undefined\r\n        };\r\n        vm.function = 'findAllByUsuarioActivo';\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {fecha: 'desc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Eliminar\r\n        vm.showRemoveConfirmation = function (id) {\r\n            ModalService.open({\r\n                    templateUrl: 'app/components/form/delete/entity.delete.modal.html',\r\n                    controller: 'EntityDeleteModalController',\r\n                    controllerAs: 'ctrl',\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        item: function () {\r\n                            return Compra.get({id: id}).$promise;\r\n                        },\r\n                        params: function () {\r\n                            return {\r\n                                title: 'admin.compra.delete.title',\r\n                                body: 'admin.compra.delete.confirm',\r\n                                property: 'fecha'\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            ).result.then(function () {\r\n                vm.tableParams.reload();\r\n            });\r\n        };\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .directive('sameAs', directive);\r\n\r\n    function directive() {\r\n        return {\r\n            require: '?ngModel',\r\n            restrict: 'A',\r\n            link: function (scope, elem, attrs, ngModel) {\r\n                ngModel.$parsers.unshift(validate);\r\n\r\n                scope.$watch(attrs.sameAs, function () {\r\n                    ngModel.$setViewValue(ngModel.$viewValue);\r\n                });\r\n\r\n                function validate(value) {\r\n                    var isValid = scope.$eval(attrs.sameAs) === value;\r\n                    ngModel.$setValidity('sameAs', isValid);\r\n                    return isValid ? value : undefined;\r\n                }\r\n            }\r\n        };\r\n    }\r\n})();\r\n;\n/* globals $ */\r\n(function () {\r\n    'use strict';\r\n\r\n    // Módulos requeridos:\r\n    //\r\n    // label: Etiqueta que se mostrará en el tooltip\r\n    // position: Posición del tooltip. Por defecto: right\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('tooltip', Tooltip);\r\n\r\n    function Tooltip() {\r\n        var directive = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            templateUrl: 'app/components/form/tooltip/tooltip.html',\r\n            scope: {\r\n                label: '@',\r\n                position: '@'\r\n            }\r\n        };\r\n        return directive;\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Botones propios del editor de texto textAngular\r\n\r\n    angular\r\n        .module('app')\r\n        .config(textAngularConfig);\r\n\r\n    /* @ngInject */\r\n    function textAngularConfig($provide) {\r\n\r\n        $provide.decorator('taOptions', ['taRegisterTool', '$delegate', function (taRegisterTool, taOptions) {\r\n\r\n            // Insertar un texto que se sustituirá por el código\r\n            taRegisterTool('codigo', {\r\n                iconclass: \"fa fa-pencil-square-o\",\r\n                buttontext: \"{{'textangular.codigo' | translate}}\",\r\n                action: function () {\r\n                    this.$editor().wrapSelection(\"insertHTML\", \"{CODIGO}\");\r\n                }\r\n            });\r\n\r\n            return taOptions;\r\n        }]);\r\n\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // id: Identificador.\r\n    // label: Etiqueta.\r\n    // model: Campo que se modificará.\r\n    // disabled: Boolean.\r\n    // required: Boolean.\r\n    // tipo: String que identifica el tipo de editor (los botones que incluye). Tipos: codigo\r\n\r\n    // TODO: Lo ideal sería que al pulsar el submit no se enviase la información y se activasen los textareas con errores.\r\n    // TODO: i18n\r\n\r\n    angular\r\n        .module('app')\r\n        .component('textArea', {\r\n            template: '<label-form key=\"{{ctrl.label}}\" for=\"{{ctrl.id}}\" required=\"ctrl.required\"></label-form>' +\r\n            '<text-angular ng-model=\"ctrl.model\" id=\"{{ctrl.id}}\" ta-toolbar=\"{{ctrl.toolbar}}\" ng-required=\"{{ctrl.required}}\"></text-angular>',\r\n            bindings: {\r\n                id: '@',\r\n                label: '@',\r\n                model: '=', // required\r\n                disabled: '<',\r\n                required: '<',\r\n                tipo: '@'\r\n            },\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout) {\r\n        var vm = this;\r\n\r\n        vm.toolbar = [\r\n            ['html', 'bold', 'italics', 'underline'],\r\n            ['undo', 'redo']\r\n        ];\r\n\r\n        switch (vm.tipo) {\r\n            case 'codigo':\r\n                vm.toolbar.push(['codigo']);\r\n                break;\r\n            case 'estatica':\r\n                vm.toolbar.push(['h1', 'h2', 'p']);\r\n                vm.toolbar.push(['ul', 'ol']);\r\n                vm.toolbar.push(['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent']);\r\n                vm.toolbar.push(['insertLink']);\r\n                break;\r\n        }\r\n\r\n        $timeout(function () {\r\n            angular.element(\"text-angular#\" + vm.id).blur(function (data) {\r\n                var element = angular.element(data.target);\r\n                if (data.target.classList.contains(\"ng-invalid-required\")) {\r\n                    element.addClass(\"error\");\r\n                } else {\r\n                    element.removeClass(\"error\");\r\n                }\r\n            });\r\n            angular.element(\"text-angular#\" + vm.id).focus(function (data) {\r\n                angular.element(data.target).removeClass(\"error\");\r\n            });\r\n        });\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Requiere: label-form\r\n    // Módulos requeridos:\r\n    // \"ng-tags-input\": \"3.0.0\"\r\n    // \"angular-bootstrap\": \"1.3.3\"\r\n\r\n    // id: ID del input.\r\n    // multiple: Boolean. True para usar las etiquetas y false para usar un autcompletado simple.\r\n    // as-list: Boolean. Añadir clase as-list a los elementos para mostrarlos uno debajo de otro.\r\n    // restricted: Boolean. Solo permite añadir elementos que están en el autocompletado.\r\n    // disabled: Boolean. Permite deshabilitar los inputs.\r\n    // minLength: Número de caracteres requeridos para mostrar el autocompletado.\r\n    // key: Clave para el track by\r\n    // display: Propiedad que se va a mostrar (por defecto 'nombre')\r\n    // method: Método del servicio (por defecto 'query')\r\n    // parameters: Parámetros que se pueden añadir a la petición\r\n    // required: Campo obligatorio.\r\n    // resource: Tipo $resource del tesauro. El servicio tiene que implementar la operación query en el controlador.\r\n    //      Ej: IdiomaService. (/idioma/query?query=x)\r\n    // queryParam: Atributo en el que va a ir la query (por defecto 'query')\r\n    // templateUrl: URL a un archivo HTML, o nombre del ID del HTML. En app/templates/tesauro.templates.html se pueden definir las que se utilicen más de una vez.\r\n    // eliminable: Muestra el botón de eliminar en los tesauros simples.\r\n\r\n    // Nota: El campo restricted debería ser siempre a TRUE, ya que no vamos a hacer eso de crear los tesauros de manera dinámica\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('tesauro', Tesauro);\r\n\r\n    function Tesauro() {\r\n        return {\r\n            replace: true,\r\n            restrict: 'E',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindToController: true,\r\n            templateUrl: 'app/components/form/tesauro/tesauro.html',\r\n            scope: {\r\n                id: '@',\r\n                label: '@',\r\n                placeholder: '@',\r\n                tooltip: '@',\r\n                resource: '=',\r\n                ngModel: '=',\r\n                multiple: '=',\r\n                asList: '=',\r\n                key: '@',\r\n                display: '@',\r\n                method: '@',\r\n                parameters: '=',\r\n                restricted: '=',\r\n                disabled: '=',\r\n                minLength: '@',\r\n                required: '=',\r\n                queryParam: '@',\r\n                templateUrl: '@',\r\n                eliminable: '='\r\n            }\r\n        };\r\n    }\r\n\r\n    function Controller() {\r\n        var vm = this;\r\n\r\n        if (!vm.key) {\r\n            vm.key = \"nombre\";\r\n        }\r\n\r\n        if (!vm.display) {\r\n            vm.display = \"nombre\";\r\n        }\r\n\r\n        if (!vm.method) {\r\n            vm.method = \"query\";\r\n        }\r\n\r\n        if (!vm.minLength) {\r\n            vm.minLength = 1;\r\n        }\r\n\r\n        if (!vm.queryParam) {\r\n            vm.queryParam = \"query\";\r\n        }\r\n\r\n        vm.clear = function () {\r\n            vm.ngModel = null;\r\n        };\r\n\r\n        vm.resetElement = function () {\r\n            vm.ngModel = null;\r\n        };\r\n\r\n        vm.setElement = function (item) {\r\n            if (item.id && !vm.multiple) {\r\n                vm.ngModel.id = item.id;\r\n            }\r\n        };\r\n\r\n        vm.loadTags = function (query) {\r\n            var params = !vm.parameters ? {} : vm.parameters;\r\n            params[vm.queryParam] = query;\r\n            // angular.merge(params, {query: query});\r\n            return vm.resource[vm.method](params).$promise.then(function (data) {\r\n                if (Array.isArray(data)) {\r\n                    return data;\r\n                } else {\r\n                    return data.content;\r\n                }\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Requiere: label-form\r\n\r\n    // id: Identificador del select.\r\n    // label: etiqueta\r\n    // model: Campo que se modificará.\r\n    // disabled\r\n    // required\r\n    // options: Opciones del select.\r\n    // base: Clave base para los enumerados.\r\n    // display: Propiedad del objeto que se usará para internacionalizar el contenido.\r\n\r\n    // FORMATEADO: Se acepta dar un formato especial a los selects. Para esto habrá que pasar listas de elementos, separadas por comas, en display y base, además del campo format.\r\n    // Este campo tendrá un _ en cada variable que se quiera rellenar (uno por cada display).\r\n\r\n    angular\r\n        .module('app')\r\n        .component('selectForm', {\r\n            templateUrl: 'app/components/form/select/select-form.html',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                id: '@',\r\n                label: '@',\r\n                tooltip: '@',\r\n                model: '=', // required\r\n                change: '=',\r\n                display: '@', // required\r\n                format: '@',\r\n                disabled: '=',\r\n                required: '=',\r\n                options: '=', // required\r\n                base: '@', // required\r\n                empty: '@'\r\n            },\r\n            /* @ngInject */\r\n            controller: function ($translate) {\r\n                var vm = this;\r\n\r\n                if (!vm.display) {\r\n                    vm.display = \"nombre\";\r\n                }\r\n                var list = vm.display.split(\",\");\r\n\r\n                if (!vm.base) {\r\n                    vm.base = \"\";\r\n                }\r\n                var base = vm.base.split(\",\");\r\n\r\n                if (!vm.format) {\r\n                    vm.format = \"_\";\r\n                }\r\n\r\n                // FIXME: Esta operación se llama cada vez que se interactúa con un select para recalcular el valor de TODOS los options de todos los selects.\r\n                vm.formatElement = function (element) {\r\n                    var formated = vm.format;\r\n                    angular.forEach(list, function (elementDisplay, index) {\r\n                        var baseText = base[index] ? base[index].trim() : \"\";\r\n                        var translated = $translate.instant(baseText + element[elementDisplay.trim()]);\r\n                        formated = formated.replace(\"_\", translated);\r\n                    });\r\n                    return formated;\r\n                }\r\n            }\r\n        });\r\n\r\n})();\r\n;\n/* globals $ */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('passwordStrengthBar', passwordStrengthBar);\r\n\r\n    function passwordStrengthBar() {\r\n        var directive = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            template: '<div id=\"strength\">' +\r\n            '<small translate=\"admin.register.password.strength\">Password strength:</small>' +\r\n            '<ul id=\"strengthBar\">' +\r\n            '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\r\n            '</ul>' +\r\n            '</div>',\r\n            scope: {\r\n                passwordToCheck: '='\r\n            },\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        /* private helper methods*/\r\n\r\n        function linkFunc(scope, iElement) {\r\n            var strength = {\r\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\r\n                mesureStrength: function (p) {\r\n\r\n                    var _force = 0;\r\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\r\n\r\n                    var _lowerLetters = /[a-z]+/.test(p);\r\n                    var _upperLetters = /[A-Z]+/.test(p);\r\n                    var _numbers = /[0-9]+/.test(p);\r\n                    var _symbols = _regex.test(p);\r\n\r\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\r\n                    var _passedMatches = $.grep(_flags, function (el) {\r\n                        return el === true;\r\n                    }).length;\r\n\r\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\r\n                    _force += _passedMatches * 10;\r\n\r\n                    // penality (short password)\r\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\r\n\r\n                    // penality (poor variety of characters)\r\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\r\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\r\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\r\n\r\n                    return _force;\r\n\r\n                },\r\n                getColor: function (s) {\r\n\r\n                    var idx = 0;\r\n                    if (s <= 10) {\r\n                        idx = 0;\r\n                    }\r\n                    else if (s <= 20) {\r\n                        idx = 1;\r\n                    }\r\n                    else if (s <= 30) {\r\n                        idx = 2;\r\n                    }\r\n                    else if (s <= 40) {\r\n                        idx = 3;\r\n                    }\r\n                    else {\r\n                        idx = 4;\r\n                    }\r\n\r\n                    return {idx: idx + 1, col: this.colors[idx]};\r\n                }\r\n            };\r\n            scope.$watch('passwordToCheck', function (password) {\r\n                if (password) {\r\n                    var c = strength.getColor(strength.mesureStrength(password));\r\n                    iElement.removeClass('ng-hide');\r\n                    iElement.find('ul').children('li')\r\n                        .css({'background-color': '#DDD'})\r\n                        .slice(0, c.idx)\r\n                        .css({'background-color': c.col});\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // http://dotansimha.github.io/angularjs-dropdown-multiselect/docs\r\n    // Requiere: label-form, tooltip, ficheros de mensaje\r\n\r\n    // id: ID del elemento\r\n    // label: Etiqueta a mostrar\r\n    // tooltip: Tooltip que se añade a la etiqueta\r\n    // model: Objeto que se actualizará\r\n    // options: Lista de opciones\r\n    // display: Propiedad que se mostrará al seleccionar\r\n    // template: Información que se va a mostrar. Tiene que ir entre comillas. Ej: '{{option.nombre}} <span ng-if=\\'option.pais.nombre\\'>({{option.pais.nombre}})</span>'\r\n    // enum-base: Texto base del enumerado. Con este String se sabe si se está mostrando un enumerado o un objeto. Ej: enum.idiomas.\r\n    // extra: Propiedades para sobreescribir en formato json. Sobreescriben las indicadas anteriormente\r\n    // empty: Propiedad que sobreescribirá al valor por defecto del componente cuando ninguna opción está seleccionada\r\n\r\n    // Rendimiento:\r\n    // Hasta 50 no se nota ningún tiempo de espera. Sin embargo, a partir de 100 se nota que le cuesta abrir, pero es asumible.\r\n    // Con 1000 elementos ya tarda varios segundos.\r\n\r\n    var component = {\r\n        templateUrl: 'app/components/form/multiselect/multi-select.html',\r\n        bindings: {\r\n            id: '@',\r\n            label: '@',\r\n            tooltip: '@',\r\n            model: '=',\r\n            options: '<',\r\n            display: '@',\r\n            template: '<',\r\n            enum: '<',\r\n            enumBase: '@',\r\n            extra: '<',\r\n            empty: '@'\r\n        },\r\n        controller: Controller,\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    /* @ngInject */\r\n    function Controller($translate) {\r\n        var vm = this;\r\n\r\n        if (!vm.model) {\r\n            vm.model = [];\r\n        }\r\n\r\n        vm.extraSettings = {\r\n            smartButtonMaxItems: 4,\r\n\r\n            enableSearch: true,\r\n            clearSearchOnClose: true,\r\n\r\n            selectedToTop: true,\r\n            showUncheckAll: false,\r\n            showCheckAll: false\r\n        };\r\n\r\n        if (!vm.enumBase) {\r\n            angular.merge(vm.extraSettings, {\r\n                displayProp: vm.display ? vm.display : 'nombre',\r\n                searchField: vm.display ? vm.display : 'nombre',\r\n                idProperty: 'id'\r\n            });\r\n        } else {\r\n            // Enumerados\r\n            angular.merge(vm.extraSettings, {\r\n                // Función para personalizar el texto que se muestra en el botón\r\n                smartButtonTextProvider: function (selectionArray) {\r\n                    var text = \"\";\r\n                    selectionArray.forEach(function (element, index) {\r\n                        text += $translate.instant(vm.enumBase + element);\r\n                        if (index + 1 < selectionArray.length) {\r\n                            text += \", \";\r\n                        }\r\n                    });\r\n                    return text;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (vm.template) {\r\n            vm.extraSettings.template = vm.template;\r\n        }\r\n\r\n        if (vm.extra) {\r\n            angular.merge(vm.extraSettings, vm.extra);\r\n        }\r\n\r\n        // Traducciones de los textos\r\n        vm.translations = {\r\n            buttonDefaultText: $translate.instant(\"multiselect.default\"),\r\n            searchPlaceholder: $translate.instant(\"multiselect.search\"),\r\n            selectionCount: $translate.instant(\"multiselect.selectioncount\")\r\n        };\r\n        if (vm.empty != null && vm.empty.length) {\r\n            vm.translations.buttonDefaultText = $translate.instant(vm.empty);\r\n        }\r\n\r\n        // Elemento seleccionado\r\n        vm.onItemSelect = function (item) {\r\n\r\n        };\r\n\r\n    }\r\n\r\n    angular\r\n        .module('app')\r\n        .component('multiSelect', component);\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Lista de elementos dinámicos. Este componente incluye la gestión: añadir y eliminar.\r\n\r\n    // label: Texto para la etiqueta.\r\n    // tooltip: Texto para el tooltip.\r\n    // list: Lista de elementos que se modificará.\r\n    // resolve: Información del controller desde donde es invocado el componente. Ej: resolve=\"{agenteService: ctrl.agenteService, openAgenteModal: ctrl.openAgenteModal}\"\r\n    // templateUrl: Plantilla HTML que se mostrará, con los diferentes inputs.\r\n    // required: Boolean. Si es true, siempre habrá al menos un elemento en la lista.\r\n    // acordeon: Boolean. Indica si cada elemento se incluye en un acordeón. Se usa para ajustar el botón de eliminar.\r\n\r\n    // Ejemplo: original-form.admin.html\r\n    // Hay que trabajar sobre la variable element, ya que será así como se llame a cada objeto sobre el que se itere en el array.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('listForm', {\r\n            templateUrl: 'app/components/form/listform/list-form.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                label: '@',\r\n                tooltip: '@',\r\n                list: '=',\r\n                resolve: '<',\r\n                templateUrl: '@',\r\n                required: '<',\r\n                acordeon: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller() {\r\n        var vm = this;\r\n\r\n        function initList() {\r\n            if (!vm.list) {\r\n                vm.list = [];\r\n                if (vm.required) {\r\n                    vm.list.push({});\r\n                }\r\n            } else if (!vm.list.length && vm.required) {\r\n                vm.list.push({});\r\n            }\r\n        }\r\n\r\n        vm.addElement = function () {\r\n            vm.list.push({desplegado: true});\r\n        };\r\n\r\n        vm.removeElement = function (element) {\r\n            vm.list.splice(vm.list.indexOf(element), 1);\r\n            initList();\r\n        };\r\n\r\n        initList();\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Requiere: tooltip\r\n\r\n    // key: Clave del fichero de mensajes.\r\n    // for: ID del input asociado.\r\n    // tooltip: Mensaje mostrado como ayuda\r\n    // required: Muestra u oculta el * en función de si es obligatorio o no.\r\n\r\n    var labelForm = {\r\n        template: '<label ng-if=\"ctrl.key\" class=\"control-label\" ng-class=\"{\\'required\\' : ctrl.required}\" for=\"{{ctrl.for}}\">' +\r\n            '{{ctrl.key | translate}}{{ctrl.sufijo}}<span ng-if=\"ctrl.required\">*</span>' +\r\n            '</label><tooltip ng-if=\"ctrl.tooltip\" label=\"{{ctrl.tooltip}}\"></tooltip>',\r\n        bindings: {\r\n            key: '@', // required\r\n            for: '@',\r\n            tooltip: '@',\r\n            required: '=',\r\n            sufijo: '@'\r\n        },\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('labelForm', labelForm);\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    var filter = {\r\n        templateUrl: 'app/components/form/filter/filter.input.template.html',\r\n        bindings: {\r\n            filter: '='\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('filter', filter);\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Componente que mete en una variable el día, mes y año de nacimiento/muerte/fecha genérica.\r\n    // Es importante que las variables en el modelo se llamen prefijoX para que se pueda utilizar este componente.\r\n\r\n    // model: Campo que se modificará.\r\n    // prefijo: String. nacimiento | muerte | fecha. Se concatena este prefijo con el campo. Ej: nacimientoDia.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('fecha', {\r\n            templateUrl: 'app/components/form/fecha/fecha.html',\r\n            bindings: {\r\n                model: '=',\r\n                prefijo: '@',\r\n                label: '@'\r\n            },\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // id: Identificador del select.\r\n    // label: etiqueta\r\n    // model: Campo que se modificará.\r\n    // disabled\r\n    // required\r\n    // options: Opciones del select.\r\n    // base: Clave base para los enumerados.\r\n    // display: Propiedad del objeto que se usará para internacionalizar el contenido.\r\n    // empty: Clave de mensaje para mostrar en la opción vacía\r\n\r\n    // Nota: Para utilizar como un campo booleano (Null/Sí/No), pasar como options: [true, false].\r\n\r\n    angular\r\n        .module('app')\r\n        .component('enumSelect', {\r\n            templateUrl: 'app/components/form/enum/enum-select.html',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                id: '@',\r\n                label: '@',\r\n                model: '=',\r\n                change: '=',\r\n                display: '@',\r\n                empty: '@',\r\n                disabled: '=',\r\n                required: '=',\r\n                options: '=',\r\n                base: '@'\r\n            }\r\n        });\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // id: Identificador del select.\r\n    // label: etiqueta\r\n    // model: Campo que se modificará.\r\n    // disabled\r\n    // required\r\n    // empty: Clave de mensaje para mostrar en la opción vacía\r\n\r\n    // Nota: Para utilizar como un campo booleano (Null/Sí/No), pasar como options: [true, false].\r\n\r\n    angular\r\n        .module('app')\r\n        .component('enumSelectBoolean', {\r\n            templateUrl: 'app/components/form/enum/enum-select-boolean.html',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                id: '@',\r\n                label: '@',\r\n                model: '=',\r\n                change: '=',\r\n                empty: '@',\r\n                disabled: '=',\r\n                required: '='\r\n            }\r\n        });\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .controller('EntityDeleteModalController', Controller);\r\n\r\n    /* @ngInject */\r\n    function Controller(item, params, ModalService) {\r\n        var vm = this;\r\n\r\n        vm.dismiss = ModalService.dismiss;\r\n        vm.item = item;\r\n        vm.params = params;\r\n\r\n        vm.confirmRemove = function () {\r\n            vm.item.$remove({id: vm.item.id}).then(function () {\r\n                ModalService.close(vm.item);\r\n            });\r\n        };\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // id: Identificador del select.\r\n    // label: etiqueta\r\n    // model: Campo que se modificará.\r\n    // disabled\r\n    // required\r\n    // options: Opciones del select.\r\n    // format: Formato de la fecha\r\n    // change: Función que se llamará al cambiar el input.\r\n    // showBar: Booleano para mostrar u ocultar la barra inferior del DatePicker. (default: true)\r\n    // readonly: Booleano para deshabilitar el input (default: false)\r\n    // disabled: No permite modificar el input.\r\n\r\n    var datePicker = {\r\n        templateUrl: 'app/components/form/date/date-picker.html',\r\n        bindings: {\r\n            id: '@',\r\n            label: '@',\r\n            model: '=', // required\r\n            disabled: '<',\r\n            required: '<',\r\n            options: '<',\r\n            format: '@',\r\n            change: '<',\r\n            showBar: '<?', // opcional\r\n            readonly: '<?' // opcional\r\n        },\r\n        controller: Controller,\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('datePicker', datePicker);\r\n\r\n    /* @ngInject */\r\n    function Controller() {\r\n        var vm = this;\r\n\r\n        function init() {\r\n            // Si recibimos la fecha del servidor, convertimos segundos a milisegundos\r\n            if (angular.isNumber(vm.model)) {\r\n                vm.model = vm.model * 1000;\r\n            }\r\n        }\r\n\r\n        vm.opened = false;\r\n        if (!vm.format) {\r\n            vm.format = 'dd/MM/yyyy';\r\n        }\r\n\r\n        if (typeof(vm.showBar) === 'undefined') {\r\n            vm.showBar = true;\r\n        }\r\n\r\n        if (typeof(vm.readonly) === 'undefined') {\r\n            vm.readonly = false;\r\n        }\r\n\r\n        if (vm.options && vm.options.minDate === 'today') {\r\n            vm.options.minDate = new Date();\r\n        }\r\n\r\n        vm.dateOptions = {\r\n            datepickerMode: 'year',\r\n            formatYear: 'yyyy',\r\n            maxDate: new Date(),\r\n            startingDay: 1,\r\n            showWeeks: false\r\n        };\r\n        angular.merge(vm.dateOptions, vm.options);\r\n\r\n        vm.openDatePicker = function () {\r\n            vm.opened = true;\r\n        };\r\n\r\n        init();\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // base: Clave base para el fichero de mensajes.\r\n    // value: Valor.\r\n\r\n    var enumerado = {\r\n        template: '<span ng-if=\"ctrl.value\">{{ctrl.base + \".\" + ctrl.value | translate}}</span>',\r\n        controllerAs: 'ctrl',\r\n        bindings: {\r\n            value: '@',\r\n            base: '@'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('enumerado', enumerado);\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .controller('AdminFormController', AdminFormController);\r\n\r\n    /* @ngInject */\r\n    function AdminFormController($timeout, $state, AlertService, Auth) {\r\n        var vm = this;\r\n\r\n        vm.registerAccount = {};\r\n        vm.roles = [];\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input')[0].focus();\r\n        });\r\n\r\n        vm.register = function () {\r\n            if (vm.registerAccount.password !== vm.confirmPassword) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                //En caso de que más roles sean admin, añadir al enumerado Rol y obtenerlos\r\n                vm.registerAccount.rol = 'ROLE_ADMIN';\r\n                vm.registerAccount.email = vm.registerAccount.login;\r\n                Auth.createAccount(vm.registerAccount).then(function () {\r\n                    $state.go(\"admin/admin/list\");\r\n                });\r\n            }\r\n        };\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER) {\r\n        var base = \"admin/admin\";\r\n        var params = {\r\n            base: base,\r\n            parent: 'admin',\r\n            baseUrl: \"/admin\",\r\n            templateUrlBase: \"app/admin/user/admin/admin\",\r\n            controller: 'AdminAdminController',\r\n            controllerForm: 'AdminFormController',\r\n            translateBase: \"admin.admin.\"\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n\r\n        // Crear\r\n        angular.merge(state.create, {\r\n            resolve: {\r\n                /* @ngInject */\r\n                itemData: function (User) {\r\n                    return new User();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create);\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('AdminAdminController', AdminAdminController);\r\n\r\n    /* @ngInject */\r\n    function AdminAdminController($timeout, $stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                                  ModalService, User) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input').focus();\r\n        });\r\n\r\n        vm.item = User;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.filter = {\r\n            key: undefined,\r\n            rol: 'ROLE_ADMIN'\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {login: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Eliminar\r\n        vm.showRemoveConfirmation = function (user) {\r\n            ModalService.open({\r\n                templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                controller: 'ConfirmModalController',\r\n                controllerAs: 'ctrl',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (User) {\r\n                        return User.get({email: user.email}).$promise;\r\n                    },\r\n                    params: function () {\r\n                        return {\r\n                            title: 'admin.list-users.delete.title',\r\n                            body: 'admin.list-users.delete.confirmadmin',\r\n                            property: 'email'\r\n                        };\r\n                    },\r\n                    /* @ngInject */\r\n                    tipo: function (User) {\r\n                        return User;\r\n                    },\r\n                    funcion: function () {\r\n                        return \"eliminar\";\r\n                    },\r\n                    parametros: function () {\r\n                        return {id: user.id};\r\n                    }\r\n                }\r\n            }).result.then(function () {\r\n                vm.tableParams.reload();\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        // Nuevo usuario\r\n            .state('social-register', {\r\n                parent: 'public',\r\n                url: '/social-register/:provider',\r\n                views: {\r\n                    'content@': {\r\n                        /* @ngInject */\r\n                        controller: function login(SocialService) {\r\n                            SocialService.loginWithToken(true);\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            // Login de un usuario ya existente\r\n            .state('social-auth', {\r\n                parent: 'public',\r\n                url: '/social-auth',\r\n                views: {\r\n                    'content@': {\r\n                        /* @ngInject */\r\n                        controller: function login(SocialService) {\r\n                            SocialService.loginWithToken(false);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('SocialService', SocialService);\r\n\r\n    /* @ngInject */\r\n    function SocialService($http, $cookies, $state, Auth, AlertService) {\r\n        var socialService = {\r\n            loginWithToken: loginWithToken,\r\n            getProviderSetting: getProviderSetting,\r\n            getProviderURL: getProviderURL,\r\n            getCSRF: getCSRF\r\n        };\r\n\r\n        return socialService;\r\n\r\n        function loginWithToken(registro) {\r\n            var token = $cookies.get('social-authentication');\r\n\r\n            Auth.loginWithToken(token, false).then(function () {\r\n                console.log(\"login con exito\");\r\n                if (registro) {\r\n                    AlertService.success(\"social.success.registro\");\r\n                }\r\n                $cookies.remove('social-authentication');\r\n                Auth.authorize(true);\r\n                $state.go(\"miespacio/miagenda\");\r\n            }, function () {\r\n                console.log(\"login sin exito\");\r\n                if (registro) {\r\n                    AlertService.error(\"social.error.registro\");\r\n                } else {\r\n                    AlertService.error(\"social.error.login\");\r\n                }\r\n                $state.go('registro/info');\r\n            });\r\n        }\r\n\r\n        function getProviderSetting(provider) {\r\n            switch (provider) {\r\n                case 'google':\r\n                    return 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email';\r\n                case 'facebook':\r\n                    return 'public_profile,email';\r\n                default:\r\n                    return 'Provider setting not defined';\r\n            }\r\n        }\r\n\r\n        function getProviderURL(provider) {\r\n            return 'signin/' + provider;\r\n        }\r\n\r\n        function getCSRF() {\r\n            return $cookies.get($http.defaults.xsrfCookieName);\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('Principal', Principal);\r\n\r\n    /* @ngInject */\r\n    function Principal($q, Account, $rootScope) {\r\n        var _identity,\r\n            _authenticated = false;\r\n\r\n        var service = {\r\n            authenticate: authenticate,\r\n            hasAnyAuthority: hasAnyAuthority,\r\n            hasAuthority: hasAuthority,\r\n            identity: identity,\r\n            isAuthenticated: isAuthenticated,\r\n            isIdentityResolved: isIdentityResolved\r\n        };\r\n\r\n        return service;\r\n\r\n        function authenticate(identity) {\r\n            _identity = identity;\r\n            _authenticated = identity !== null;\r\n            $rootScope.$broadcast('changedIdentity');\r\n        }\r\n\r\n        function hasAnyAuthority(authorities) {\r\n            if (authorities.indexOf(\"ROLE_ANONYMOUS\") >= 0 && !_authenticated && !_identity) {\r\n                return true;\r\n            }\r\n\r\n            if (!_authenticated || !_identity || !_identity.authorities) {\r\n                return false;\r\n            }\r\n\r\n            if (authorities.indexOf(\"ROLE_AUTHENTICATED\") >= 0\r\n                && _identity.authorities && _identity.authorities.length > 0) {\r\n                return true;\r\n            }\r\n\r\n            for (var i = 0; i < authorities.length; i++) {\r\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function hasAuthority(authority) {\r\n            if (!_authenticated) {\r\n                return $q.when(false);\r\n            }\r\n\r\n            return this.identity().then(function (_id) {\r\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\r\n            }, function () {\r\n                return false;\r\n            });\r\n        }\r\n\r\n        function identity(force, login) {\r\n            var deferred = $q.defer();\r\n\r\n            if (force === true) {\r\n                _identity = undefined;\r\n            }\r\n\r\n            // check and see if we have retrieved the identity data from the server.\r\n            // if we have, reuse it by immediately resolving\r\n            if (angular.isDefined(_identity)) {\r\n                deferred.resolve(_identity);\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            // retrieve the identity data from the server, update the identity object, and then resolve.\r\n            Account.get({login: login}).$promise\r\n                .then(getAccountThen)\r\n                .catch(getAccountCatch);\r\n\r\n            return deferred.promise;\r\n\r\n            function getAccountThen(account) {\r\n                _identity = account.data;\r\n                _authenticated = true;\r\n                deferred.resolve(_identity);\r\n                $rootScope.$broadcast('changedIdentity');\r\n            }\r\n\r\n            function getAccountCatch() {\r\n                _identity = null;\r\n                _authenticated = false;\r\n                deferred.resolve(_identity);\r\n                $rootScope.$broadcast('changedIdentity');\r\n            }\r\n        }\r\n\r\n        function isAuthenticated() {\r\n            return _authenticated;\r\n        }\r\n\r\n        function isIdentityResolved() {\r\n            return angular.isDefined(_identity);\r\n        }\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Auth', Auth);\r\n\r\n    /* ngInject */\r\n    function Auth($rootScope, $state, $sessionStorage, $q, $http, AuthServerProvider, Principal, User, Perfil, Account, ADMIN_PRINCIPAL) {\r\n        return {\r\n            login: login,\r\n            loginWithToken: loginWithToken,\r\n            logout: logout,\r\n            authorize: authorize,\r\n            createAccount: createAccount,\r\n            validateAccount: validateAccount,\r\n            changePassword: changePassword,\r\n            resetPasswordInit: resetPasswordInit,\r\n            resetPasswordFinish: resetPasswordFinish\r\n        };\r\n\r\n        function validateAccount(key) {\r\n            return $http({\r\n                method: 'GET',\r\n                url: 'api/public/cuenta/validar',\r\n                params: {key: key}\r\n            });\r\n        }\r\n\r\n        function login(credentials, callback) {\r\n            /* jshint validthis:true */\r\n            var cb = callback || angular.noop;\r\n            var deferred = $q.defer();\r\n\r\n            var login = credentials.username;\r\n\r\n            AuthServerProvider.login(credentials).then(function (jwt) {\r\n                // retrieve the logged account information\r\n                Principal.identity(true, login).then(function (account) {\r\n                    // After the login the language will be changed to\r\n                    // the language selected by the user during his registration\r\n\r\n                    // $translate.use(account.langKey);\r\n\r\n                    if (account.empresa != null) {\r\n                        angular.element(\".menu [ui-sref='paquetecreditos']\").parent().hide();\r\n                    }\r\n                    if (account.rol === 'ROLE_PROFESOR') {\r\n                        angular.element(\".menu [ui-sref='paquetecreditos']\").parent().hide();\r\n                        angular.element(\".menu [ui-sref='profesor/list']\").parent().hide();\r\n                    }\r\n                    deferred.resolve(account);\r\n                });\r\n                return cb();\r\n            }).catch(function (err) {\r\n                this.logout();\r\n                deferred.reject(err);\r\n                return cb(err);\r\n            }.bind(this));\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function loginWithToken(jwt, rememberMe) {\r\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\r\n        }\r\n\r\n        function logout() {\r\n            AuthServerProvider.logout();\r\n            Principal.authenticate(null);\r\n            angular.element(\".menu [ui-sref='paquetecreditos']\").parent().show();\r\n            angular.element(\".menu [ui-sref='profesor/list']\").parent().show();\r\n        }\r\n\r\n        function authorize(force, authorities) {\r\n            var authReturn = Principal.identity(force).then(authThen);\r\n\r\n            return authReturn;\r\n\r\n            function authThen() {\r\n                var isAuthenticated = Principal.isAuthenticated();\r\n\r\n                // an authenticated user can't access to login and register pages\r\n                if (isAuthenticated && $rootScope.toState.parent === 'account'\r\n                    && ($rootScope.toState.name === 'login'\r\n                    || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth'\r\n                    || $rootScope.toState.name === 'recuperar/init' || $rootScope.toState.name === 'recuperar/finish')) {\r\n                    $state.go('home');\r\n                }\r\n\r\n                // recover and clear previousState after external login redirect (e.g. oauth2)\r\n                if (isAuthenticated && (!$rootScope.fromState || !$rootScope.fromState.name) && $sessionStorage.previousStateName) {\r\n                    var previousStateName = $sessionStorage.previousStateName;\r\n                    var previousStateParams = $sessionStorage.previousStateParams;\r\n                    delete $sessionStorage.previousStateName;\r\n                    delete $sessionStorage.previousStateParams;\r\n                    $state.go(previousStateName, previousStateParams);\r\n                }\r\n\r\n                // Si estamos autenticados y nos dirigimos a la pantalla de login/registro\r\n                if (isAuthenticated && $rootScope.toState.name === \"registro/info\") {\r\n\r\n                    // Obtenemos el usuario autenticado\r\n                    Account.get().$promise\r\n                        .then(getAccountThen);\r\n\r\n                    function getAccountThen(account) {\r\n                        // Teniendo en cuenta el rol del usuario autenticado,\r\n                        // nos dirigimos a un estado u otro\r\n                        if (account && account.data && account.data.rol) {\r\n                            switch (account.data.rol) {\r\n                                case 'ROLE_ADMIN':\r\n                                    $state.go(ADMIN_PRINCIPAL);\r\n                                    break;\r\n                                case 'ROLE_ALUMNO':\r\n                                case 'ROLE_PROFESOR':\r\n                                    $state.go('miespacio/info');\r\n                                    break;\r\n                                case 'ROLE_EMPRESA':\r\n                                    $state.go('miespacio/misalumnos');\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities))\r\n                    || (authorities && authorities.length > 0 && !Principal.hasAnyAuthority(authorities))) {\r\n                    if (isAuthenticated) {\r\n                        // user is signed in but not authorized for desired state\r\n                        $state.go('accessdenied');\r\n                    } else {\r\n                        // user is not authenticated. stow the state they wanted before you\r\n                        // send them to the login service, so you can return them when you're done\r\n                        $sessionStorage.previousStateName = $rootScope.toState.name;\r\n                        $sessionStorage.previousStateParams = $rootScope.toStateParams;\r\n\r\n                        if ($rootScope.toState.name.startsWith(\"admin/\")) {\r\n                            // now, send them to the signin state so they can log in\r\n                            $state.go('login');\r\n                        } else {\r\n                            $state.go('registro/info');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function createAccount(account, callback) {\r\n            /* jshint validthis:true */\r\n            var cb = callback || angular.noop;\r\n\r\n            return User.save(account,\r\n                function () {\r\n                    return cb(account);\r\n                },\r\n                function (err) {\r\n                    // this.logout();\r\n                    return cb(err);\r\n                }.bind(this)).$promise;\r\n        }\r\n\r\n        function changePassword(newPassword, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Perfil.changePassword(newPassword, function () {\r\n                return cb();\r\n            }, function (err) {\r\n                return cb(err);\r\n            }).$promise;\r\n        }\r\n\r\n        function resetPasswordInit(email) {\r\n            return $http({\r\n                method: 'GET',\r\n                url: 'api/public/cuenta/reset-contrasena/init',\r\n                params: {email: email}\r\n            });\r\n        }\r\n\r\n        function resetPasswordFinish(keyAndPassword) {\r\n            return $http({\r\n                method: 'GET',\r\n                url: 'api/public/cuenta/reset-contrasena/finish',\r\n                params: {\r\n                    email: keyAndPassword.email,\r\n                    key: keyAndPassword.key,\r\n                    newPassword: keyAndPassword.newPassword\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('AuthServerProvider', AuthServerProvider);\r\n\r\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\r\n\r\n    function AuthServerProvider($http, $localStorage, $sessionStorage, $q) {\r\n        var service = {\r\n            getToken: getToken,\r\n            hasValidToken: hasValidToken,\r\n            login: login,\r\n            loginWithToken: loginWithToken,\r\n            storeAuthenticationToken: storeAuthenticationToken,\r\n            logout: logout\r\n        };\r\n\r\n        return service;\r\n\r\n        function getToken() {\r\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\r\n        }\r\n\r\n        function hasValidToken() {\r\n            var token = this.getToken();\r\n            return token && token.expires && token.expires > new Date().getTime();\r\n        }\r\n\r\n        function login(credentials) {\r\n            var data = {\r\n                username: credentials.username,\r\n                password: credentials.password,\r\n                rememberMe: credentials.rememberMe\r\n            };\r\n            return $http.post('api/account/authenticate', data).then(authenticateSuccess);\r\n\r\n            function authenticateSuccess(data) {\r\n                var status = data.status;\r\n                var headers = data.headers;\r\n                var bearerToken = headers('Authorization');\r\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\r\n                    var jwt = bearerToken.slice(7, bearerToken.length);\r\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\r\n                    return jwt;\r\n                }\r\n            }\r\n        }\r\n\r\n        function loginWithToken(jwt, rememberMe) {\r\n            var deferred = $q.defer();\r\n\r\n            if (angular.isDefined(jwt)) {\r\n                this.storeAuthenticationToken(jwt, rememberMe);\r\n                deferred.resolve(jwt);\r\n            } else {\r\n                deferred.reject();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function storeAuthenticationToken(jwt, rememberMe) {\r\n            if (true) {\r\n                $localStorage.authenticationToken = jwt;\r\n            } else {\r\n                $sessionStorage.authenticationToken = jwt;\r\n            }\r\n        }\r\n\r\n        function logout() {\r\n            delete $localStorage.authenticationToken;\r\n            delete $sessionStorage.authenticationToken;\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Account', Account);\r\n\r\n    /* @ngInject */\r\n    function Account($resource) {\r\n        return $resource('api/account/account', {}, {\r\n            'get': {\r\n                method: 'GET',\r\n                params: {login: '@login'},\r\n                isArray: false,\r\n                interceptor: {\r\n                    response: function (response) {\r\n                        // expose response\r\n                        return response;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('profesor/list', {\r\n                parent: 'public',\r\n                url: '/busqueda-profesores',\r\n                data: {\r\n                    pageTitle: 'global.profesores'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/profesor/list/profesor.list.html',\r\n                        controller: 'ProfesorListController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    idiomas: function (Idioma) {\r\n                        return Idioma.findAll({sortProperty: 'nombre'}).$promise.then(function (data) {\r\n                            return data.content;\r\n                        });\r\n                    },\r\n                    /* @ngInject */\r\n                    niveles: function (Nivel) {\r\n                        return Nivel.query().$promise;\r\n                    },\r\n                    /* @ngInject */\r\n                    paises: function (Pais) {\r\n                        return Pais.getAllWithProfesores().$promise;\r\n                    },\r\n                    /* @ngInject */\r\n                    /*disponibilidades: function (EnumService) {\r\n                        return EnumService.get('disponibilidad');\r\n                    },*/\r\n                    /* @ngInject */\r\n                    capacidades: function (Capacidad) {\r\n                        return Capacidad.findAll({sortProperty: 'nombre'}).$promise.then(function (data) {\r\n                            return data.content;\r\n                        });\r\n                    },\r\n                    /* @ngInject */\r\n                    horadias: function (EnumService) {\r\n                        return EnumService.get('horadia');\r\n                    },\r\n                    /* @ngInject */\r\n                    dias: function (EnumService) {\r\n                        return EnumService.get('dia');\r\n                    }\r\n                 }\r\n\r\n            })\r\n            .state('profesor/info', {\r\n                parent: 'profesor/list',\r\n                url: '/:id',\r\n                data: {\r\n                    pageTitle: 'global.menu.profesor.info'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/profesor/info/profesor.details.html',\r\n                        controller: 'ProfesorDetailsController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    profesor: function (User, $stateParams) {\r\n                        return User.getProfesorById({id: $stateParams.id}).$promise;\r\n                    }\r\n                 }\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    function stateConfig($stateProvider) {\r\n    \t/*\r\n        $stateProvider.state('home', {\r\n            parent: 'public',\r\n            url: '/',\r\n            data: {\r\n                pageTitle: 'global.title'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/public/home/home.html',\r\n                    controller: 'HomeController',\r\n                    controllerAs: 'ctrl'\r\n                }\r\n            }\r\n        });\r\n        */\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('HomeController', HomeController);\r\n\r\n    /* @ngInject */\r\n    function HomeController() {\r\n        var vm = this;\r\n\r\n    }\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('compra', {\r\n            parent: 'public',\r\n            redirectTo: 'compra/get',\r\n            url: '/compra',\r\n            params: {\r\n                compra: null\r\n            },\r\n            data: {\r\n                authorities: ['ROLE_AUTHENTICATED'],\r\n                pageTitle: 'global.menu.compra'\r\n            }\r\n        }).state('compra/crear', {\r\n            parent: 'compra',\r\n            params: {\r\n                paquetecreditosId: null,\r\n                solicitarFactura: false,\r\n                usuario: null\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    controllerAs: 'ctrl',\r\n                    template: '<div class=\"text-center\">' +\r\n                        '<div class=\"lead\" translate=\"comun.cargando\"></div>' +\r\n                        '<loading is-loading=\"true\" class=\"text-center\"></divloading></div>'\r\n                }\r\n            },\r\n            resolve: {\r\n                /* @ngInject */\r\n                foo: function ($state, $stateParams, Compra, $window, AlertService) {\r\n                    console.log(\"Creando compra:\", $stateParams);\r\n                    Compra.crear({\r\n                        paquetecreditosId: $stateParams.paquetecreditosId,\r\n                        solicitarFactura: $stateParams.solicitarFactura\r\n                    }).$promise.then(function (result) {\r\n                        Compra.iniciarPaypal({compraId: result.id}).$promise.then(function (result) {\r\n                            if (!result.msg) {\r\n                                // Mensaje de error\r\n                                AlertService.error(\"compra.error.paypal\");\r\n                            } else {\r\n                                $window.location.href = result.msg;\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }).state('compra/paypal', {\r\n            parent: 'compra',\r\n            url: '/confirmar-paypal?compraId&paymentId&token',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/public/compra/compra.success.html',\r\n                    /* @ngInject */\r\n                    controller: function ($state, $stateParams, Compra, Principal) {\r\n                        var vm = this;\r\n                        vm.loading = true;\r\n                        console.log(\"Finalizando compra\");\r\n\r\n                        Compra.confirmarPaypal({\r\n                            compraId: $stateParams.compraId,\r\n                            paymentId: $stateParams.paymentId,\r\n                            token: $stateParams.token\r\n                        }).$promise.then(function (result) {\r\n                            vm.loading = false;\r\n                            console.log(\"Compra terminada:\" + result);\r\n                            Principal.identity(true).then(function (data) {\r\n                                $state.go(\"miespacio/miscompras\");\r\n                            });\r\n                        }, function () {\r\n                            vm.loading = false;\r\n                            vm.error = true;\r\n                        });\r\n                    },\r\n                    controllerAs: 'ctrl'\r\n                }\r\n            }\r\n        }).state('compra/cancel', {\r\n            parent: 'compra',\r\n            url: '/cancelar?compraId&token',\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/public/compra/compra.success.html',\r\n                    /* @ngInject */\r\n                    controller: function ($state, $stateParams, Compra, AlertService) {\r\n                        console.log(\"Cancelando compra\");\r\n\r\n                        Compra.cancelar({compraId: $stateParams.compraId}).$promise.then(function (result) {\r\n                            console.log(\"Compra cancelada: \" + result);\r\n                            AlertService.warning(\"compra.cancel\");\r\n                            $state.go('paquetecreditos');\r\n                        });\r\n                    },\r\n                    controllerAs: 'ctrl'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('HeaderController', Controller);\r\n\r\n    /* @ngInject */\r\n    function Controller($scope, Principal) {\r\n        var vm = this;\r\n\r\n        // Información de usuario\r\n\r\n        function updateUser() {\r\n            Principal.identity().then(function (data) {\r\n                vm.usuario = data;\r\n            });\r\n        }\r\n\r\n        updateUser();\r\n\r\n        $scope.$on('changedIdentity', function () {\r\n            updateUser();\r\n        });\r\n\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('error', {\r\n                parent: 'site',\r\n                url: '/error',\r\n                data: {\r\n                    authorities: [],\r\n                    pageTitle: 'error.error.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/layouts/error/error.html'\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    skip: true\r\n                }\r\n            })\r\n            .state('accessdenied', {\r\n                parent: 'public',\r\n                url: '/acceso-denegado',\r\n                data: {\r\n                    authorities: [],\r\n                    pageTitle: 'error.accessdenied.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/layouts/error/accessdenied.html'\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    skip: true\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('ResourceHelper', ResourceHelper);\r\n\r\n    // La ruta para las operaciones de crear, actualizar y eliminar es la de admin.\r\n\r\n    /* @ngInject */\r\n    function ResourceHelper($resource) {\r\n\r\n        return {\r\n            getResource: getResource\r\n        };\r\n\r\n        function getResource(entidad, params, newFunctions, publico) {\r\n            var functions = {\r\n                'query': {\r\n                    method: 'GET',\r\n                    url: 'api/public/' + entidad + '/query',\r\n                    isArray: true\r\n                },\r\n                'get': {\r\n                    method: 'GET',\r\n                    url: 'api/public/' + entidad + '/:id',\r\n                    isArray: false\r\n                },\r\n                'findAll': {\r\n                    method: 'GET',\r\n                    url: 'api/public/' + entidad + '/findAll',\r\n                    isArray: false\r\n                }\r\n            };\r\n            angular.extend(functions, newFunctions);\r\n\r\n            var baseUrl = 'admin';\r\n            if (publico) {\r\n                baseUrl = 'public';\r\n            }\r\n\r\n            return $resource('api/' + baseUrl + '/' + entidad + '/:id', params, functions);\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('DescargaUtil', Service);\r\n\r\n    /* @ngInject */\r\n    function Service($http) {\r\n        return {\r\n            descargar: descargar\r\n        };\r\n\r\n        function descargar(url, params, type) {\r\n            $http({\r\n                method: 'GET',\r\n                url: url,\r\n                params: params,\r\n                responseType: \"arraybuffer\"\r\n            }).then(function (result) {\r\n                var file = new Blob([result.data], {type: type});\r\n                var contentDisposition = result.headers(\"Content-Disposition\");\r\n                var filename = contentDisposition.split(\";\")[1].trim().split('=')[1].replace(/\"/g, '');\r\n                saveAs(file, filename);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('notificationInterceptor', notificationInterceptor);\r\n\r\n    notificationInterceptor.$inject = ['AlertService'];\r\n\r\n    function notificationInterceptor(AlertService) {\r\n        var service = {\r\n            response: response\r\n        };\r\n\r\n        return service;\r\n\r\n        function response(response) {\r\n            var alertKey = response.headers('X-app-alert');\r\n            if (angular.isString(alertKey)) {\r\n                AlertService.success(alertKey, {param: response.headers('X-app-params')});\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\r\n\r\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\r\n\r\n    function errorHandlerInterceptor($q, $rootScope) {\r\n        return {\r\n            responseError: responseError\r\n        };\r\n\r\n        function responseError(response) {\r\n            if (!(response.status === 401 && response.data &&\r\n                (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account/account') === 0 )))) {\r\n                $rootScope.$emit('app.httpError', response);\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('authInterceptor', authInterceptor);\r\n\r\n    authInterceptor.$inject = ['$localStorage', '$sessionStorage'];\r\n\r\n    function authInterceptor($localStorage, $sessionStorage) {\r\n        var service = {\r\n            request: request\r\n        };\r\n\r\n        return service;\r\n\r\n        function request(config) {\r\n            /*jshint camelcase: false */\r\n            config.headers = config.headers || {};\r\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\r\n\r\n            if (token) {\r\n                config.headers.Authorization = 'Bearer ' + token;\r\n            }\r\n\r\n            return config;\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\r\n\r\n\r\n    authExpiredInterceptor.$inject = ['$q', '$injector', '$localStorage', '$sessionStorage'];\r\n\r\n    function authExpiredInterceptor($q, $injector, $localStorage, $sessionStorage) {\r\n        var service = {\r\n            responseError: responseError\r\n        };\r\n\r\n        return service;\r\n\r\n        function responseError(response) {\r\n            if (response.status === 401) {\r\n                delete $localStorage.authenticationToken;\r\n                delete $sessionStorage.authenticationToken;\r\n                var Principal = $injector.get('Principal');\r\n                if (Principal.isAuthenticated()) {\r\n                    var Auth = $injector.get('Auth');\r\n                    Auth.authorize(true);\r\n                }\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .service('ParseLinks', ParseLinks);\r\n\r\n    /* @ngInject */\r\n    function ParseLinks() {\r\n        this.parse = function (header) {\r\n            if (angular.isUndefinedOrNull(header)) {\r\n                return {};\r\n            }\r\n\r\n            if (header.length === 0) {\r\n                throw new Error('input must not be of zero length');\r\n            }\r\n\r\n            // Split parts by comma\r\n            var parts = header.split(',');\r\n            var links = {};\r\n            // Parse each part into a named link\r\n            angular.forEach(parts, function (p) {\r\n                var section = p.split(';');\r\n                if (section.length !== 2) {\r\n                    throw new Error('section could not be split on \";\"');\r\n                }\r\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\r\n                var queryString = {};\r\n                url.replace(\r\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\r\n                    function ($0, $1, $2, $3) {\r\n                        queryString[$1] = $3;\r\n                    }\r\n                );\r\n                var page = queryString.page;\r\n                if (angular.isString(page)) {\r\n                    page = parseInt(page);\r\n                }\r\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\r\n                links[name] = page;\r\n            });\r\n\r\n            return links;\r\n        };\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('compile', ['$compile', function ($compile) {\r\n            return function (scope, element, attrs) {\r\n                scope.$watch(\r\n                    function (scope) {\r\n                        // watch the 'compile' expression for changes\r\n                        return scope.$eval(attrs.compile);\r\n                    },\r\n                    function (value) {\r\n                        // when the 'compile' expression changes\r\n                        // assign it into the current DOM\r\n                        element.html(value);\r\n\r\n                        // compile the new DOM and link it to the current\r\n                        // scope.\r\n                        // NOTE: we only compile .childNodes so that\r\n                        // we don't get into infinite loop compiling ourselves\r\n                        $compile(element.contents())(scope);\r\n                    }\r\n                );\r\n            };\r\n        }])\r\n})(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Añade un checkbox para mostrar/ocultar los usuarios eliminados.\r\n     */\r\n    angular\r\n        .module('app')\r\n        .component('usuarioGestionEliminados', {\r\n            bindings: {\r\n                filter: '<'\r\n            },\r\n            templateUrl: 'app/components/usuariogestion/usuario-gestion-eliminados.html',\r\n            controllerAs: 'ctrl',\r\n            /* @ngInject */\r\n            controller: function () {\r\n                var vm = this;\r\n\r\n                vm.onChangeEliminados = function () {\r\n                    if (vm.eliminados) {\r\n                        vm.filter.activos = null;\r\n                    } else {\r\n                        vm.filter.activos = true;\r\n                    }\r\n                };\r\n\r\n            }\r\n        });\r\n})(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Añade los botones de editar, desactivar/activar y baja.\r\n     */\r\n    angular\r\n        .module('app')\r\n        .component('usuarioGestionColumna', {\r\n            bindings: {\r\n                tableParams: '<',\r\n                element: '<',\r\n                entidad: '@'\r\n            },\r\n            templateUrl: 'app/components/usuariogestion/usuario-gestion-columna.html',\r\n            controllerAs: 'ctrl',\r\n            /* @ngInject */\r\n            controller: function (ModalService) {\r\n                var vm = this;\r\n\r\n                // Desactivar, eliminar y recuperar\r\n\r\n                vm.showDesactivarConfirmation = function (usuario) {\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                        controller: 'ConfirmModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            item: function () {\r\n                                return usuario;\r\n                            },\r\n                            params: function () {\r\n                                var mensaje = 'admin.list-users.desactivar.confirm';\r\n                                if (usuario.rol === 'ROLE_EMPRESA') {\r\n                                    mensaje = 'admin.list-users.desactivar.confirmempresa';\r\n                                }\r\n                                return {\r\n                                    title: 'admin.list-users.desactivar.title',\r\n                                    body: mensaje,\r\n                                    property: 'email'\r\n                                };\r\n                            },\r\n                            /* @ngInject */\r\n                            tipo: function (User) {\r\n                                return User;\r\n                            },\r\n                            funcion: function () {\r\n                                return \"remove\";\r\n                            },\r\n                            parametros: function () {\r\n                                return {id: usuario.id};\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        vm.tableParams.reload();\r\n                    });\r\n                };\r\n\r\n                vm.showBajaConfirmation = function (usuario) {\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                        controller: 'ConfirmModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            item: function () {\r\n                                return usuario;\r\n                            },\r\n                            params: function () {\r\n                                var mensaje = 'admin.list-users.delete.confirm';\r\n                                if (usuario.rol === 'ROLE_EMPRESA') {\r\n                                    mensaje = 'admin.list-users.delete.confirmempresa';\r\n                                }\r\n                                return {\r\n                                    title: 'admin.list-users.delete.title',\r\n                                    body: mensaje,\r\n                                    property: 'email'\r\n                                };\r\n                            },\r\n                            /* @ngInject */\r\n                            tipo: function (User) {\r\n                                return User;\r\n                            },\r\n                            funcion: function () {\r\n                                return \"baja\";\r\n                            },\r\n                            parametros: function () {\r\n                                return {email: usuario.email};\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        vm.tableParams.reload();\r\n                    });\r\n                };\r\n\r\n                vm.showRestaurarConfirmation = function (usuario) {\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                        controller: 'ConfirmModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            item: function () {\r\n                                return usuario;\r\n                            },\r\n                            params: function () {\r\n                                return {\r\n                                    title: 'admin.list-users.restaurar.title',\r\n                                    body: 'admin.list-users.restaurar.confirm',\r\n                                    property: 'email'\r\n                                };\r\n                            },\r\n                            /* @ngInject */\r\n                            tipo: function (User) {\r\n                                return User;\r\n                            },\r\n                            funcion: function () {\r\n                                return \"restaurar\";\r\n                            },\r\n                            parametros: function () {\r\n                                return {id: usuario.id};\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        vm.tableParams.reload();\r\n                    });\r\n                };\r\n\r\n            }\r\n        });\r\n})(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app').config(config);\r\n\r\n    config.$inject = ['$stateProvider'];\r\n\r\n    function config($stateProvider) {\r\n        $stateProvider.state('static', {\r\n            parent: 'site',\r\n            url: '/estatica/:id',\r\n            params: {\r\n                language: ['Language',\r\n                    function (Language) {\r\n                        return Language.getCurrent();\r\n                    }\r\n                ]\r\n            },\r\n            data: {\r\n                authorities: []\r\n            },\r\n            // FIXME: Se puede comprobar si existe la página? En caso de que no exista, apuntar a una que sí. Si no, la página se queda en blanco sin dar error.\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: function (params) {\r\n                        return 'statics/' + params.id + '/' + params.id + '.' + params.language + '.html';\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n})(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .service('StaticModal', StaticModal);\r\n\r\n    // Mejora: Se podría refactorizar haciendo que la plantilla fuese el header y footer del modal y el contenido un include de la página en concreto.\r\n\r\n    /* @ngInject */\r\n    function StaticModal(ModalService, Language) {\r\n        return {\r\n            open: open\r\n        };\r\n\r\n        /**\r\n         * @param id nombre del archivo\r\n         */\r\n        function open(id) {\r\n            ModalService.open({\r\n                    templateUrl: function () {\r\n                        return 'statics/' + id + '/' + id + '.' + Language.getCurrent() + '.html';\r\n                    },\r\n                    controller: 'StaticModalController',\r\n                    controllerAs: 'ctrl',\r\n                    resolve: {\r\n                        title: function () {\r\n                            return 'static.' + id + \".title\"\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n})(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('StaticModalController', StaticModalController);\r\n\r\n    /* @ngInject */\r\n    function StaticModalController(ModalService, title) {\r\n        var vm = this;\r\n\r\n        vm.title = title;\r\n\r\n        vm.close = function () {\r\n            ModalService.dismiss();\r\n        };\r\n\r\n    }\r\n})\r\n(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    // id: Identificador de la página estática. (Nombre del archivo o identificador de BD).\r\n    // carpeta: Ruta a la página en caso de que haya alguna carpeta intermedia.\r\n    // bd: Boolean. Si se obtiene de BD, se carga el archivo static.html y se muestra el contenido.\r\n\r\n    // FIXME: Recargar página estática cuando se cambia de idioma.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('static', {\r\n            bindings: {\r\n                id: '@', // required\r\n                carpeta: '@',\r\n                bd: '<'\r\n            },\r\n            /* @ngInject */\r\n            templateUrl: function ($element, $attrs, Language) {\r\n                if ($attrs.bd === \"true\") {\r\n                    return 'app/components/statics/static.html';\r\n                } else {\r\n                    var carpeta = \"\";\r\n                    if ($attrs.carpeta) {\r\n                        carpeta = $attrs.carpeta + \"/\";\r\n                    }\r\n                    return 'statics/' + carpeta + $attrs.id + '/' + $attrs.id + '.' + Language.getCurrent() + '.html';\r\n                }\r\n            },\r\n            /* @ngInject */\r\n            controller: function (Estatica, Language, $attrs) {\r\n                var vm = this;\r\n                Estatica.getByNombreIdioma({\r\n                    'nombre': $attrs.id,\r\n                    'idioma': Language.getCurrent()\r\n                }).$promise.then(function (data) {\r\n                    vm.estaticai18n = data;\r\n                });\r\n            },\r\n            controllerAs: 'ctrl'\r\n        });\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('social', social);\r\n\r\n    /* @ngInject */\r\n    function social($filter, SocialService) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            scope: {\r\n                provider: '@',\r\n                mini: '@'\r\n            },\r\n            templateUrl: 'app/components/social/social.html',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope) {\r\n            scope.label = $filter('capitalize')(scope.provider);\r\n            scope.providerSetting = SocialService.getProviderSetting(scope.provider);\r\n            scope.providerURL = SocialService.getProviderURL(scope.provider);\r\n            scope.csrf = SocialService.getCSRF();\r\n        }\r\n\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('hasNoAuthority', hasNoAuthority);\r\n\r\n    function hasNoAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            var authority = attrs.hasNoAuthority.replace(/\\s+/g, '');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    Principal.hasAuthority(authority)\r\n                        .then(function (result) {\r\n                            console.log(\"Result: \" + result);\r\n                            if (result) {\r\n                                setHidden();\r\n                            } else {\r\n                                setVisible();\r\n                            }\r\n                        });\r\n                };\r\n\r\n            if (authority.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function () {\r\n                    return Principal.isAuthenticated();\r\n                }, function () {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('hasAuthority', hasAuthority);\r\n\r\n    function hasAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    Principal.hasAuthority(authority)\r\n                        .then(function (result) {\r\n                            if (result) {\r\n                                setVisible();\r\n                            } else {\r\n                                setHidden();\r\n                            }\r\n                        });\r\n                };\r\n\r\n            if (authority.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function () {\r\n                    return Principal.isAuthenticated();\r\n                }, function () {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('hasAnyAuthority', hasAnyAuthority);\r\n\r\n    function hasAnyAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            if (attrs.hasAnyAuthority === \"\") {\r\n                return;\r\n            }\r\n\r\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n                    var result;\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    result = Principal.hasAnyAuthority(authorities);\r\n                    if (result) {\r\n                        setVisible();\r\n                    } else {\r\n                        setHidden();\r\n                    }\r\n                };\r\n\r\n            if (authorities.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function () {\r\n                    return Principal.isAuthenticated();\r\n                }, function () {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('hasAnyAuthorityOrState', hasAnyAuthorityOrState);\r\n\r\n    function hasAnyAuthorityOrState(Principal, $state) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc,\r\n            replace: false,\r\n            scope: {\r\n                authorities: \"=\",\r\n                states: \"=\"\r\n            }\r\n        };\r\n        return directive;\r\n\r\n        function linkFunc(scope, element) {\r\n\r\n            var setVisible = function () {\r\n                element.removeClass('hidden');\r\n            };\r\n            var setHidden = function () {\r\n                element.addClass('hidden');\r\n            };\r\n\r\n            var defineVisibility = function (reset) {\r\n                var result = true;\r\n\r\n                if (reset) {\r\n                    setVisible();\r\n                }\r\n\r\n                if (scope.authorities) {\r\n                    var authorities = scope.authorities.replace(/\\s+/g, '').split(',');\r\n                    result = result && Principal.hasAnyAuthority(authorities);\r\n\r\n                }\r\n                if (scope.states) {\r\n                    var states = scope.states.replace(/\\s+/g, '').split(',');\r\n                    var results = states.filter(function (state) {\r\n                        return $state.includes(state);\r\n                    });\r\n                    result = result && results.length;\r\n                }\r\n\r\n                if (result) {\r\n                    setVisible();\r\n                } else {\r\n                    setHidden();\r\n                }\r\n            };\r\n\r\n            if (scope.authorities) {\r\n                scope.$watch(function () {\r\n                    return Principal.isAuthenticated();\r\n                }, function () {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n\r\n            if (scope.states) {\r\n                scope.$on('$stateChangeSuccess',\r\n                    function () {\r\n                        defineVisibility(true);\r\n                    }\r\n                );\r\n            }\r\n\r\n            if (scope.authorities || scope.states) {\r\n                defineVisibility(true);\r\n            }\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Todos los elementos del resolve son necesarios.\r\n\r\n    angular.module('app')\r\n        .controller('ReservaModalController', Controller);\r\n\r\n    /* @ngInject */\r\n    function Controller(item, parametros, ModalService, Reserva, usuarioModal, configuracion) {\r\n        var vm = this;\r\n\r\n        vm.dismiss = ModalService.dismiss;\r\n        vm.item = item;\r\n        vm.parametros = parametros;\r\n        vm.usuarioModal = usuarioModal;\r\n        vm.configuracion = configuracion;\r\n        vm.ahora = new Date();\r\n\r\n        vm.comienzoMenosHoras = angular.copy(vm.item.start.toDate());\r\n        vm.comienzoMenosHoras.setHours(vm.comienzoMenosHoras.getHours() - vm.configuracion.tiempoAntesInicioCancelar);\r\n\r\n        // Tipos de ventanas\r\n        vm.tipos = {\r\n            SIN_CONTESTAR: 1,\r\n            CANCELAR_PROFESOR: 2,\r\n            CANCELAR_ALUMNO: 3,\r\n            RESPONDER_PROFESOR: 4,\r\n            RESPONDER_ALUMNO: 5,\r\n            RESPONDER_ALUMNO_PENDIENTE: 6\r\n        };\r\n        vm.tipo = null;\r\n\r\n        if (vm.parametros.rolbd === 'ROLE_PROFESOR'\r\n            && vm.parametros.estadobd === 'SIN_CONTESTAR' && vm.item.start.toDate() > vm.ahora) {\r\n            vm.tipo = vm.tipos.SIN_CONTESTAR;\r\n        } else if (vm.parametros.rolbd === 'ROLE_PROFESOR'\r\n            && vm.parametros.estadobd === 'CONFIRMADA' && vm.comienzoMenosHoras > vm.ahora) {\r\n            vm.tipo = vm.tipos.CANCELAR_PROFESOR;\r\n        } else if (vm.parametros.rolbd === 'ROLE_ALUMNO'\r\n            && (vm.parametros.estadobd === 'SIN_CONTESTAR' || vm.parametros.estadobd === 'CONFIRMADA') && vm.comienzoMenosHoras > vm.ahora) {\r\n            vm.tipo = vm.tipos.CANCELAR_ALUMNO;\r\n        } else if (vm.parametros.rolbd === 'ROLE_PROFESOR'\r\n            && vm.parametros.estadobd === 'PENDIENTE') {\r\n            vm.tipo = vm.tipos.RESPONDER_PROFESOR;\r\n        } else if (vm.parametros.rolbd === 'ROLE_ALUMNO'\r\n            && (vm.parametros.estadobd === 'REALIZADA' || vm.parametros.estadobd === 'INCIDENCIA')) {\r\n            vm.tipo = vm.tipos.RESPONDER_ALUMNO;\r\n        } else if (vm.parametros.rolbd === 'ROLE_ALUMNO'\r\n            && vm.parametros.estadobd === 'PENDIENTE') {\r\n            vm.tipo = vm.tipos.RESPONDER_ALUMNO_PENDIENTE;\r\n        }\r\n\r\n        vm.mostrarFooter = (vm.parametros.estadobd !== 'RECHAZADA' && vm.parametros.estadobd !== 'CANCELADA_POR_ALUMNO'\r\n            && vm.parametros.estadobd !== 'CANCELADA_POR_PROFESOR' && vm.parametros.estadobd !== 'NO_CONTESTADA'\r\n            && vm.tipo !== vm.tipos.RESPONDER_ALUMNO_PENDIENTE);\r\n\r\n        vm.confirm = function () {\r\n            if (vm.parametros.rolbd === 'ROLE_ALUMNO' && vm.parametros.estado == null) {\r\n                Reserva.save({\r\n                    alumnoId: vm.parametros.alumnoId,\r\n                    profesorId: vm.usuarioModal.id,\r\n                    claseLibreId: vm.parametros.id\r\n                }).$promise.then(function () {\r\n                    ModalService.close(vm.item);\r\n                });\r\n            } else {\r\n                vm.parametros.fecha = vm.parametros.fechaPrimeraClase;\r\n                Reserva.update(vm.parametros).$promise.then(function () {\r\n                    ModalService.close(vm.item);\r\n                });\r\n            }\r\n        };\r\n\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    // Componente para la paginación. Se modifica el parámetro :page del estado.\r\n    // El nº de elementos por página va en una constante.\r\n\r\n    // currentPage: Página activa.\r\n    // totalElements: Número de elementos totales.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('pagination', {\r\n            bindings: {\r\n                currentPage: \"<\",\r\n                totalElements: \"<\"\r\n            },\r\n            templateUrl: 'app/components/pagination/pagination.html',\r\n            /* @ngInject */\r\n            controller: function ($state, NG_LIST_DEFAULT_PARAMS_PUBLIC) {\r\n                var vm = this;\r\n\r\n                vm.itemsPerPage = NG_LIST_DEFAULT_PARAMS_PUBLIC.size;\r\n\r\n                vm.pageChanged = function () {\r\n                    var params = angular.copy($state.params);\r\n                    params.page = vm.currentPage;\r\n                    $state.go($state.current, params);\r\n                };\r\n\r\n            },\r\n            controllerAs: 'ctrl'\r\n        });\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('NgTableHelper', NgTableHelper);\r\n\r\n    /* @ngInject */\r\n    function NgTableHelper($state) {\r\n        return {\r\n            settings: settings\r\n        };\r\n\r\n        function settings(vm) {\r\n            var firstLoad = true;\r\n\r\n            if (!vm.function) {\r\n                vm.function = \"findAll\";\r\n            }\r\n\r\n            return {\r\n                defaultSort: 'asc',\r\n                counts: [],\r\n                getData: function (params) {\r\n                    if (firstLoad || vm.reload) {\r\n                        vm.loading = true;\r\n                    }\r\n                    firstLoad = false;\r\n\r\n                    var sortProperty = null;\r\n                    var sortDir = null;\r\n                    if (params.orderBy()[0]) {\r\n                        sortProperty = params.orderBy()[0].replace(\"-\", \"\").replace(\"+\", \"\");\r\n                        sortDir = params.sorting()[sortProperty].toUpperCase();\r\n                    }\r\n\r\n                    var request = {\r\n                        size: vm.elementosPorPagina,\r\n                        page: params.page() - 1,\r\n                        sortProperty: sortProperty,\r\n                        sortDirection: sortDir,\r\n                        genericFilter: vm.filter.key\r\n                    };\r\n\r\n                    angular.extend(request, vm.filter);\r\n\r\n                    // Modificamos la URL con el nuevo número de página\r\n                    $state.go('.', {page: params.page()}, {notify: false});\r\n\r\n                    return vm.item[vm.function](request).$promise.then(function (data) {\r\n                        vm.loading = false;\r\n                        if (Array.isArray(data)) {\r\n                            params.total(data.length);\r\n                            params.count(data.length);\r\n                            vm.empty = !data || data.length == 0;\r\n                            return data;\r\n                        } else {\r\n                            params.total(data.totalElements);\r\n                            vm.empty = !data.content || data.content.length == 0;\r\n                            return data.content;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    // Gestión de ventanas modales.\r\n    // Permite tener varias abiertas e ir cerrándolas por orden inverso de apertura.\r\n\r\n    angular.module('app')\r\n        .service('ModalService', ModalService);\r\n\r\n    /* @ngInject */\r\n    function ModalService($state, $uibModal, AlertService) {\r\n        var opened = 0;\r\n        var modals = [];\r\n\r\n        return {\r\n            isOpen: function () {\r\n                return opened;\r\n            },\r\n            open: open,\r\n            openComponent: openComponent,\r\n            closeComponent: closeComponent,\r\n            close: close,\r\n            dismiss: dismiss\r\n        };\r\n\r\n        function open(params) {\r\n            opened = opened + 1;\r\n            var modal = $uibModal.open(params);\r\n            modals.push(modal);\r\n\r\n            // En caso de que se pulse fuera de la modal, hacemos un dismiss\r\n            modal.result.catch(function (data) {\r\n                if (data === 'backdrop click') {\r\n                    dismiss(data);\r\n                }\r\n            });\r\n\r\n            AlertService.clear();\r\n            return modal;\r\n        }\r\n\r\n        /**\r\n         * Abrir componente en una ventana modal.\r\n         * @param title Título de la ventana modal.\r\n         * @param configEntity Constante de donde se obtendrá el component y el resolve. (Ej: AGENTE_FORM_ADMIN)\r\n         * @param params Parámetros adicionales (Ej: {size: 'lg'})\r\n         */\r\n        function openComponent(title, configEntity, params) {\r\n            if (!params) params = {};\r\n\r\n            var config = configEntity(true);\r\n            params.resolve = config.resolve;\r\n            params.resolve.component = function () {\r\n                return config.component;\r\n            };\r\n\r\n            angular.merge(params, {\r\n                backdrop: 'static',\r\n                component: 'entityModal',\r\n                resolve: {\r\n                    title: function () {\r\n                        return title;\r\n                    }\r\n                }\r\n            });\r\n            return open(params);\r\n        }\r\n\r\n        // Submit del componente. Se cierra la ventana modal o se cambia de estado.\r\n        function closeComponent(result, state, params) {\r\n            if (opened) {\r\n                AlertService.clear();\r\n                close(result);\r\n            } else {\r\n                $state.go(state, params);\r\n            }\r\n        }\r\n\r\n        function close(data) {\r\n            subOpened();\r\n            modals[modals.length - 1].close(data);\r\n            modals.pop();\r\n        }\r\n\r\n        function dismiss(data) {\r\n            subOpened();\r\n            modals[modals.length - 1].dismiss(data);\r\n            modals.pop();\r\n        }\r\n\r\n        function subOpened() {\r\n            opened = opened - 1;\r\n            if (opened < 0) {\r\n                opened = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Este componente permite establecer una estructura básica para abrir un formulario o cualquier otro componente dentro de una ventana modal.\r\n\r\n    // resolve.component: String que se convertirá en el componente (Ej: <pais-form-admin item=\\'ctrl.resolve.item\\'></pais-form-admin>)\r\n    // resolve: Información que tiene que recibir el componente. En el componente se accederá a través de ctrl.resolve.\r\n    // resolve.title: Título de la ventana modal\r\n\r\n    // Ejemplo de uso: ciudad-form.admin.component.js\r\n\r\n    angular\r\n        .module('app')\r\n        .component('entityModal', {\r\n            templateUrl: 'app/components/modal/entity.modal.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                resolve: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller(ModalService) {\r\n        var vm = this;\r\n\r\n        vm.dismiss = function () {\r\n            ModalService.dismiss();\r\n        }\r\n    }\r\n\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('submenu', submenuDirective);\r\n\r\n    submenuDirective.$inject = [];\r\n\r\n    function submenuDirective() {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                menu: '='\r\n            },\r\n            templateUrl: 'app/components/menu/submenu.html'\r\n        };\r\n    }\r\n})(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('Menu', Menu);\r\n\r\n    Menu.$inject = ['$q', '$http'];\r\n\r\n    function Menu($q, $http) {\r\n        return {\r\n            getMenu: getMenu\r\n        };\r\n\r\n        function getMenu(position) {\r\n            var deferred = $q.defer();\r\n            $http.get('menu/' + position + '.json').then(function (response) {\r\n                deferred.resolve(response.data);\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }\r\n})(angular);\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Requires directives:\r\n     *   * has-any-authority-or-state\r\n     *   * uib-dropdown-toggle\r\n     */\r\n    angular\r\n        .module('app')\r\n        .component('miMenu', {\r\n            bindings: {\r\n                menu: '<',\r\n                navCollapsed: '<',\r\n                modal: '&',\r\n                lateral: '<'\r\n            },\r\n            templateUrl: 'app/components/menu/menu.html',\r\n            /* @ngInject */\r\n            controller: function ($window, $state, StaticModal) {\r\n                var vm = this;\r\n\r\n                vm.checkActiveStates = function (activeStates) {\r\n                    var active = false;\r\n                    if (activeStates) {\r\n                        var states = activeStates.replace(/\\s+/g, '').split(',');\r\n                        states.forEach(function (state) {\r\n                            if ($state.includes(state)) {\r\n                                active = true;\r\n                            }\r\n                        });\r\n                    }\r\n                    return active;\r\n                };\r\n\r\n                vm.modal = function (id) {\r\n                    StaticModal.open(id);\r\n                };\r\n\r\n                vm.collapse = function () {\r\n                    if ($window.innerWidth < 768) {\r\n                        vm.navCollapsed = !vm.navCollapsed;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})(angular);\r\n;\n/**\r\n * Based on:\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2015 Eugenio Lentini\r\n * https://github.com/blackat/ui-navbar\r\n */\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('menuItem', menuItemDirective);\r\n\r\n    menuItemDirective.$inject = ['$compile'];\r\n\r\n    function menuItemDirective($compile) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            templateUrl: 'app/components/menu/menu-item.html',\r\n            link: function (scope, element, attrs) {\r\n                if (angular.isArray(scope.leaf.subtree)) {\r\n                    element.append('<submenu menu=\"leaf.subtree\"></submenu>');\r\n\r\n                    // find the parent of the element\r\n                    var parent = element.parent();\r\n                    var classFound = false;\r\n\r\n                    // check if in the hierarchy of the element exists a dropdown with class navbar-right\r\n                    while (parent.length > 0 && !classFound) {\r\n                        // check if the dropdown has been push to right\r\n                        if (parent.hasClass('navbar-right')) {\r\n                            classFound = true;\r\n                        }\r\n                        parent = parent.parent();\r\n                    }\r\n\r\n                    // add a different class according to the position of the dropdown\r\n                    if (classFound) {\r\n                        element.addClass('dropdown-submenu-right');\r\n                    } else {\r\n                        element.addClass('dropdown-submenu');\r\n                    }\r\n\r\n                    $compile(element.contents())(scope);\r\n                }\r\n            },\r\n            scope: {\r\n                leaf: '='\r\n            }\r\n        };\r\n    }\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Campos:\r\n    // isLoading: Campo para saber si está oculto o no.\r\n    // class: Clase a mayores de la de por defecto.\r\n    // img: Ruta al icono de carga. Por defecto loading.svg\r\n\r\n    var loading = {\r\n        template: '<img ng-show=\"$ctrl.isLoading\" ' +\r\n        'ng-src=\"{{$ctrl.img || \\'assets/images/loading.svg\\'}}\" ' +\r\n        'class=\"loading {{$ctrl.class}}\"/>',\r\n        bindings: {\r\n            isLoading: '<',\r\n            class: '@',\r\n            img: '@'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('loading', loading);\r\n\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    // Componente para la selección del idioma de la aplicación (Español e inglés).\r\n    // Métodos relacionados: app.module.js y app.config.js\r\n\r\n    // TODO: Mejorar haciendo que obtenga los idiomas de un enumerado del servidor.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('idiomas', {\r\n            templateUrl: 'app/components/idiomas/idiomas.html',\r\n            /* @ngInject */\r\n            controller: function ($rootScope, $localStorage) {\r\n                var vm = this;\r\n\r\n                vm.changeLanguage = function (lang) {\r\n                    if (lang) {\r\n                        $rootScope.changeLanguage(lang);\r\n                    }\r\n                    vm.lang = $localStorage.lang;\r\n                };\r\n\r\n                vm.changeLanguage();\r\n\r\n            },\r\n            controllerAs: 'ctrl'\r\n        });\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .directive('showValidation', showValidation);\r\n\r\n    function showValidation() {\r\n        var directive = {\r\n            require: 'form',\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element) {\r\n            element.find('.form-group').each(function () {\r\n                var $formGroup = angular.element(this);\r\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\r\n\r\n                if ($inputs.length > 0) {\r\n                    $inputs.each(function () {\r\n                        var $input = angular.element(this);\r\n                        scope.$watch(function () {\r\n                            return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');\r\n                        }, function (isInvalid) {\r\n                            $formGroup.toggleClass('has-error', isInvalid);\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n;\n/* globals $ */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('radio', radio);\r\n\r\n    function radio() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                id: '@',\r\n                name: '@',\r\n                model: '=',\r\n                change: '=',\r\n                value: '=',\r\n                disabled: '=',\r\n                label: '@',\r\n                text: '='\r\n            },\r\n            template: '' +\r\n            '<label ng-click=\"disabled || (model=value)\" for=\"{{id}}\">' +\r\n            '<input type=\"radio\" id=\"{{id}}\" name=\"{{name}}\" ng-model=\"model\" ng-value=\"value\"' +\r\n            ' ng-checked=\"model==value\" ng-click=\"model=value\" ng-change=\"change(model)\" ng-disabled=\"disabled\"/>' +\r\n            '<span class=\"texto\" ng-if=\"label\">{{label | translate}}</span>' +\r\n            '<span class=\"texto\" ng-if=\"text\" ng-bind-html=\"text\"></span>' +\r\n            '</label>',\r\n\r\n            compile: function (tElt) {\r\n                // tElt.addClass('sm-radio');\r\n            }\r\n        };\r\n    }\r\n\r\n})();\r\n;\n/**\r\n * Filters out all duplicate items from an array by checking the specified key\r\n * @param [key] {string} the name of the attribute of each object to compare for uniqueness\r\n if the key is empty, the entire object will be compared\r\n if the key === false then no filtering will be performed\r\n * @return {array}\r\n */\r\n// Acepta dos niveles de filtrado. Ejemplo en fuentes.form.modal.html\r\nangular.module('app').filter('unique', function () {\r\n\r\n    return function (items, filterOn, filterOnSecondLevel) {\r\n\r\n        if (filterOn === false) {\r\n            return items;\r\n        }\r\n\r\n        if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {\r\n            var hashCheck = {}, newItems = [];\r\n\r\n            var extractValueToCompare = function (item) {\r\n                if (angular.isObject(item) && angular.isString(filterOn)) {\r\n                    if (filterOnSecondLevel && angular.isString(filterOnSecondLevel)) {\r\n                        if (item[filterOn]) {\r\n                            return item[filterOn][filterOnSecondLevel];\r\n                        } else {\r\n                            return item[filterOn];\r\n                        }\r\n                        // FIXME: Creo que está añadiendo los elementos vacíos también\r\n                    } else {\r\n                        return item[filterOn];\r\n                    }\r\n                } else {\r\n                    return item;\r\n                }\r\n            };\r\n\r\n            angular.forEach(items, function (item) {\r\n                var valueToCheck, isDuplicate = false;\r\n\r\n                for (var i = 0; i < newItems.length; i++) {\r\n                    if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {\r\n                        isDuplicate = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isDuplicate) {\r\n                    newItems.push(item);\r\n                }\r\n\r\n            });\r\n            items = newItems;\r\n        }\r\n        return items;\r\n    };\r\n});\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    // String to Int\r\n    angular.module('app').filter('num', function () {\r\n        return function (input) {\r\n            return parseInt(input, 10);\r\n        }\r\n    });\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Filtro para convertir minutos a: Xh Ym\r\n\r\n    // Podría ser interesante utilizar Moment para que sea más genérico... https://github.com/jsmreese/moment-duration-format\r\n\r\n    angular\r\n        .module('app')\r\n        .filter('minutos', minutos);\r\n\r\n    function minutos() {\r\n        return calcular;\r\n\r\n        function calcular(time) {\r\n            time = Math.floor(time);\r\n            if (time < 60) {\r\n                return (time) + 'm';\r\n            } else if (time % 60 == 0) {\r\n                return (time - time % 60) / 60 + 'h';\r\n            } else {\r\n                return ((time - time % 60) / 60 + 'h' + ' ' + time % 60 + 'm');\r\n            }\r\n        }\r\n\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .filter('capitalize', capitalize);\r\n\r\n    function capitalize() {\r\n        return capitalizeFilter;\r\n\r\n        function capitalizeFilter(input) {\r\n            if (input && input !== null) {\r\n                input = input.toLowerCase();\r\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\r\n            }\r\n            return input;\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    //\r\n\r\n    var date = {\r\n        template: '{{ctrl.result | date:ctrl.format}}',\r\n        bindings: {\r\n            model: '<', // required\r\n            format: '@',\r\n            fecha: '<',\r\n            hora: '<'\r\n        },\r\n        /* @ngInject */\r\n        controller: function ($scope) {\r\n            var vm = this;\r\n            if (!vm.format) {\r\n                if (vm.fecha) {\r\n                    vm.format = 'dd/MM/yyyy';\r\n                } else {\r\n                    if (vm.hora) {\r\n                        vm.format = 'HH:mm';\r\n                    } else {\r\n                        vm.format = 'dd/MM/yyyy, HH:mm';\r\n                    }\r\n                }\r\n            }\r\n\r\n            function init() {\r\n                // Si recibimos la fecha del servidor, convertimos segundos a milisegundos\r\n                if (angular.isNumber(vm.model)) {\r\n                    vm.result = vm.model * 1000;\r\n                }\r\n            }\r\n\r\n            $scope.$watch(function () {\r\n                return vm.model;\r\n            }, function () {\r\n                init();\r\n            });\r\n        },\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('date', date);\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    var buttonTop = {\r\n        template: '<button id=\"button-top\" ng-click=\"ctrl.topFunction()\"><span class=\"glyphicon glyphicon-arrow-up\"></span></button>',\r\n        bindings: {\r\n            mote: '@'\r\n        },\r\n        controller: Controller,\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    /* @ngInject */\r\n    function Controller($window) {\r\n        var vm = this;\r\n\r\n        // Botón ir arriba\r\n        $window.onscroll = function () {\r\n            scrollFunction();\r\n        };\r\n\r\n        function scrollFunction() {\r\n            if (document.getElementById(\"button-top\") != undefined) {\r\n                if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {\r\n                    document.getElementById(\"button-top\").style.display = \"block\";\r\n                } else {\r\n                    document.getElementById(\"button-top\").style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n\r\n        vm.topFunction = function () {\r\n            $(\"html, body\").animate({scrollTop: \"0px\"}, 1000);\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('app')\r\n        .component('buttonTop', buttonTop);\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // value: Valor booleano (true/false -> Sí/No).\r\n\r\n    var booleano = {\r\n        template: '{{\"enum.boolean.\" + ctrl.value | translate}}',\r\n        controllerAs: 'ctrl',\r\n        bindings: {\r\n            value: '@'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('booleano', booleano);\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .provider('AlertService', AlertService);\r\n\r\n    function AlertService() {\r\n        this.toast = false;\r\n        /*jshint validthis: true */\r\n        this.$get = getService;\r\n\r\n        this.showAsToast = function (isToast) {\r\n            this.toast = isToast;\r\n        };\r\n\r\n        getService.$inject = ['$timeout', '$sce', '$translate'];\r\n\r\n        function getService($timeout, $sce, $translate) {\r\n            var toast = this.toast,\r\n                alertId = 0, // unique id for each alert. Starts from 0.\r\n                alerts = [],\r\n                timeout = 5000; // default timeout\r\n\r\n            return {\r\n                factory: factory,\r\n                isToast: isToast,\r\n                add: addAlert,\r\n                closeAlert: closeAlert,\r\n                closeAlertByIndex: closeAlertByIndex,\r\n                clear: clear,\r\n                clearPermanent: clearPermanent,\r\n                get: get,\r\n                success: success,\r\n                error: error,\r\n                info: info,\r\n                warning: warning\r\n            };\r\n\r\n            function isToast() {\r\n                return toast;\r\n            }\r\n\r\n            function getTimeout(time) {\r\n                if (time == null) return timeout;\r\n                return time;\r\n            }\r\n\r\n            function clear() {\r\n                alerts.splice(0, alerts.length);\r\n            }\r\n\r\n            function clearPermanent() {\r\n                // Ocultamos alertas permanentes y las de error también\r\n                alerts.forEach(function (alert, index) {\r\n                    if (alert.timeout == 0) {\r\n                        alerts.splice(index, 1);\r\n                    }\r\n                    if (alert.type === 'danger') {\r\n                        alerts.splice(index, 1);\r\n                    }\r\n                });\r\n            }\r\n\r\n            function get() {\r\n                return alerts;\r\n            }\r\n\r\n            /**\r\n             * Añadir un nuevo mensaje de éxito. La documentación es igual para el resto de tipos de alert.\r\n             *\r\n             * @param msg Clave del mensaje.\r\n             * @param params Objeto json con las propiedades que se incluirán en el mensaje. Ej: {id: 16}.\r\n             * En el mensaje tendrá que ir {{id}} donde se quiera hacer la sustitución.\r\n             * @param time Tiempo que se mostrará el mensaje. Por defecto 5 segundos. Si se pone 0, el mensaje será permanente.\r\n             * @param position Posición del mensaje. Sólo funciona cuando está en modo toast.\r\n             */\r\n            function success(msg, params, time, position) {\r\n                return this.add({\r\n                    type: 'success',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: getTimeout(time),\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function error(msg, params, time, position) {\r\n                return this.add({\r\n                    type: 'danger',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: getTimeout(time),\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function warning(msg, params, time, position) {\r\n                return this.add({\r\n                    type: 'warning',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: getTimeout(time),\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function info(msg, params, time, position) {\r\n                return this.add({\r\n                    type: 'info',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: getTimeout(time),\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function factory(alertOptions) {\r\n                if (!alertOptions.params) {\r\n                    alertOptions.params = {};\r\n                }\r\n                var alert = {\r\n                    type: alertOptions.type,\r\n                    msg: $sce.trustAsHtml(alertOptions.msg),\r\n                    id: alertOptions.alertId,\r\n                    timeout: alertOptions.timeout,\r\n                    toast: alertOptions.params.toast ? alertOptions.params.toast : alertOptions.toast,\r\n                    position: alertOptions.params.position ? alertOptions.params.position : 'top right',\r\n                    scoped: alertOptions.scoped,\r\n                    close: function (alerts) {\r\n                        return closeAlert(this.id, alerts);\r\n                    }\r\n                };\r\n                if (!alert.scoped) {\r\n                    alerts.push(alert);\r\n                }\r\n                return alert;\r\n            }\r\n\r\n            function addAlert(alertOptions, extAlerts) {\r\n                alertOptions.alertId = alertId++;\r\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\r\n                var that = this;\r\n                var alert = this.factory(alertOptions);\r\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\r\n                    $timeout(function () {\r\n                        that.closeAlert(alertOptions.alertId, extAlerts);\r\n                    }, alertOptions.timeout);\r\n                }\r\n                return alert;\r\n            }\r\n\r\n            function closeAlert(id, extAlerts) {\r\n                var thisAlerts = extAlerts ? extAlerts : alerts;\r\n                return closeAlertByIndex(thisAlerts.map(function (e) {\r\n                    return e.id;\r\n                }).indexOf(id), thisAlerts);\r\n            }\r\n\r\n            function closeAlertByIndex(index, thisAlerts) {\r\n                return thisAlerts.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(alertServiceConfig);\r\n\r\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\r\n\r\n    function alertServiceConfig(AlertServiceProvider) {\r\n        // set below to true to make alerts look like toast\r\n        AlertServiceProvider.showAsToast(false);\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    var alert = {\r\n        template: '<div class=\"alerts\" ng-cloak=\"\" ng-show=\"!$ctrl.modalService() || ($ctrl.modal && $ctrl.modalService())\">' +\r\n        '<div ng-repeat=\"alert in $ctrl.alerts track by alert.id\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\r\n        '<div uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" ng-class=\"\\'alert-\\' + alert.type\" close=\"alert.close($ctrl.alerts)\">' +\r\n        '<span ng-bind-html=\"alert.msg\"></span></div>' +\r\n        '</div>' +\r\n        '</div>',\r\n        controller: alertController,\r\n        bindings: {\r\n            modal: '<'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('alert', alert);\r\n\r\n    /* @ngInject */\r\n    function alertController($scope, AlertService, ModalService, $rootScope, $translate) {\r\n        var vm = this;\r\n\r\n        vm.alerts = AlertService.get();\r\n        vm.modalService = ModalService.isOpen;\r\n\r\n        function addErrorAlert(message, key, data) {\r\n            key = key && key !== null ? key : message;\r\n            vm.alerts.push(\r\n                AlertService.add(\r\n                    {\r\n                        type: 'danger',\r\n                        msg: key,\r\n                        params: data,\r\n                        timeout: 5000,\r\n                        toast: AlertService.isToast(),\r\n                        scoped: true\r\n                    },\r\n                    vm.alerts\r\n                )\r\n            );\r\n            // Si se produce un error se sube al principio de la página para ver el alert\r\n            angular.element(\"html, body\").animate({scrollTop: 0}, \"slow\");\r\n        }\r\n\r\n        var cleanHttpErrorListener = $rootScope.$on('app.httpError', function (event, httpResponse) {\r\n\r\n            if (!!vm.modalService() !== vm.modal) {\r\n                return;\r\n            }\r\n            var i;\r\n            event.stopPropagation();\r\n\r\n            switch (httpResponse.status) {\r\n                // connection refused, server not reachable\r\n                case 0:\r\n                    addErrorAlert('Server not reachable', 'error.servernotreachable');\r\n                    break;\r\n\r\n                case 400:\r\n                    var errorHeader = httpResponse.headers('X-app-error');\r\n                    var entityKey = httpResponse.headers('X-app-params');\r\n\r\n                    if (errorHeader) {\r\n                        var entityName = $translate.instant('global.menu.entities.' + entityKey);\r\n                        addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\r\n\r\n                    } else if (httpResponse.data && httpResponse.data.fieldErrors) {\r\n                        for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\r\n                            var fieldError = httpResponse.data.fieldErrors[i];\r\n                            // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\r\n                            var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\r\n                            var fieldName = $translate.instant('jhipsterJwtApp.' + fieldError.objectName + '.' + convertedField);\r\n                            addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\r\n                        }\r\n\r\n                    } else if (httpResponse.data && httpResponse.data.message) {\r\n                        if (httpResponse.data.errors) {\r\n                            // Estos errores nunca deberían llegar a mostrarse a no ser que se salten las restricciones del cliente\r\n                            if (httpResponse.data.errors[0].code === 'NotNull') {\r\n                                addErrorAlert(\"error.notnulls\", null, null);\r\n                            } else if (httpResponse.data.errors[0].code === 'Size') {\r\n                                addErrorAlert(\"error.size\", null, null);\r\n                            }\r\n                        } else {\r\n                            addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\r\n                        }\r\n                    }\r\n                    break;\r\n                case 401:\r\n                    break;\r\n\r\n                case 403:\r\n                    addErrorAlert('Access is denied', 'error.accessdenied.title');\r\n                    break;\r\n\r\n                case 404:\r\n                    addErrorAlert('Not found', 'error.notfound');\r\n                    break;\r\n\r\n                default:\r\n                    if (httpResponse.data && httpResponse.data.message) {\r\n                        if (httpResponse.data.error === 'Internal Server Error') {\r\n                            addErrorAlert('Internal server error', 'error.internalservererror');\r\n                        } else {\r\n                            addErrorAlert(httpResponse.data.message);\r\n                        }\r\n                    }\r\n            }\r\n        });\r\n\r\n        $scope.$on('$destroy', function () {\r\n            if (angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null) {\r\n                cleanHttpErrorListener();\r\n                vm.alerts = [];\r\n            }\r\n            vm.alerts = [];\r\n        });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('contrasena', {\r\n            parent: 'admin',\r\n            url: '/admin/modificar-contrasena',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'admin.register.title'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    template: '<div class=\"row\"><div class=\"col-md-8 col-md-offset-2\">' +\r\n                    '<h1 translate=\"admin.changepassword.title\"></h1><change-password></change-password>' +\r\n                    '</div></div>'\r\n                }\r\n            },\r\n            ncyBreadcrumb: {\r\n                skip: true\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER) {\r\n        var base = \"admin/reserva\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.reserva.\",\r\n            templateList: '<reserva-list estados=\"$resolve.estados\"></reserva-list>',\r\n            parent: 'admin'\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            params: {\r\n                revisadas: null\r\n            },\r\n            resolve: {\r\n                /* @ngInject */\r\n                estados: function (EnumService) {\r\n                    return EnumService.get('estado');\r\n                }\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list);\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n//TODO: Mover a componentes\r\n    angular\r\n        .module('app')\r\n        .component('reservaList', {\r\n            templateUrl: 'app/admin/reserva/reserva-list.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                estados: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, Reserva, Principal, $state) {\r\n        var vm = this;\r\n\r\n        vm.item = Reserva;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.revisadas = $stateParams.revisadas;\r\n        vm.filter = {\r\n            key: undefined,\r\n            estado: undefined,\r\n            revisadas: $stateParams.revisadas\r\n        };\r\n        vm.function = 'filterByAdmin';\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {fecha: 'desc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Acciones\r\n\r\n        vm.devolver = function (id) {\r\n            Reserva.devolverCreditos({id: id}).$promise.then(function () {\r\n                $state.go('admin/reserva/list', {revisadas: false}, {reload: true});\r\n            });\r\n        };\r\n\r\n        vm.rechazar = function (id) {\r\n            Reserva.rechazarCreditos({id: id}).$promise.then(function () {\r\n                $state.go('admin/reserva/list', {revisadas: false}, {reload: true});\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, PROFESOR_FORM_ADMIN) {\r\n        var config = PROFESOR_FORM_ADMIN();\r\n        var base = \"admin/profesor\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.profesor.\",\r\n            templateList: '<profesor-list-admin></profesor-list-admin>',\r\n            templateForm: config.component\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, {resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (User, $stateParams) {\r\n                    return User.getById({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('profesorListAdmin', {\r\n            templateUrl: 'app/admin/profesor/profesor-list.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, User, DescargaUtil) {\r\n        var vm = this;\r\n\r\n        vm.item = User;\r\n        vm.function = 'findProfesoresAdmin';\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.filter = {\r\n            key: undefined,\r\n            rol: 'ROLE_PROFESOR',\r\n            activos: true\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {nombre: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Descarga\r\n\r\n        vm.profesoresExcel = function () {\r\n            DescargaUtil.descargar('api/admin/user/profesorExcel', {\r\n                    activos: vm.filter.activos,\r\n                    mes: vm.filter.mes,\r\n                    ano: vm.filter.ano\r\n                },\r\n                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8');\r\n        };\r\n\r\n        // Lista de años\r\n        vm.years = [];\r\n        for (var i = 2017; i <= (new Date()).getFullYear(); i++) {\r\n            vm.years.push(i);\r\n        }\r\n\r\n        // Lista de meses\r\n        vm.months = [];\r\n        for (var j = 1; j <= 12; j++) {\r\n            vm.months.push(j);\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('PROFESOR_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<profesor-form-admin' +\r\n                ' item=\"' + resolve + 'item\"' +\r\n                ' previous-params=\"' + resolve + 'previousParams\"' +\r\n                '\"></profesor-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (User) {\r\n                        return new User();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('profesorFormAdmin', {\r\n            templateUrl: 'app/admin/profesor/profesor-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, EnumService, Capacidad, Idioma, Pais, Nivel, Usuario, User, AlertService, ModalService, CAPACIDAD_FORM_ADMIN) {\r\n        var vm = this;\r\n\r\n        if (!vm.item.imagen) {\r\n            vm.item.imagen = {};\r\n        }\r\n        if (vm.item.foto) {\r\n            vm.item.imagen.path = vm.item.foto;\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        vm.openCapacidadModal = function () {\r\n            ModalService.openComponent('admin.capacidad.create.title', CAPACIDAD_FORM_ADMIN, {size: 'lg'}).result.then(function (result) {\r\n                // Añadimos el nuevo elemento al select\r\n                vm.capacidades.push(result);\r\n                // Asociamos el nuevo elemento a la entidad\r\n                vm.item.capacidades.push(result);\r\n            });\r\n        };\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            vm.item.type = \"profesor\";\r\n            if (vm.item.imagen) {\r\n                vm.item.foto = vm.item.imagen.path;\r\n            }\r\n            // FIXME: Apaño temporal para la edición de fechas...\r\n            if (angular.isNumber(vm.item.fechaNacimiento)) {\r\n                vm.item.fechaNacimiento = vm.item.fechaNacimiento / 1000;\r\n            }\r\n            if ((vm.item.contrasenaClaro) && (vm.item.contrasenaClaro !== vm.confirmPassword)) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                if (vm.item.id) {\r\n                    Usuario.edit(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/profesor/list');\r\n                    });\r\n                } else {\r\n                    Usuario.register(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/profesor/list');\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        Capacidad.findAll({sortProperty: 'nombre'}).$promise.then(function (data) {\r\n            vm.capacidades = data.content;\r\n        });\r\n\r\n        /*EnumService.get(\"disponibilidad\").then(function(data) {\r\n            vm.disponibilidades = data;\r\n        });*/\r\n\r\n        Nivel.query().$promise.then(function(data) {\r\n            vm.niveles = data;\r\n        });\r\n\r\n        vm.idiomaService = Idioma;\r\n        vm.nivelService = Nivel;\r\n        vm.paisService = Pais;\r\n\r\n        User.zonasHorarias().$promise.then(function(data) {\r\n            vm.zonasHorarias = data;\r\n        });\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, PAQUETECREDITOS_FORM_ADMIN) {\r\n        var config = PAQUETECREDITOS_FORM_ADMIN();\r\n        var base = \"admin/paquetecreditos\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.paquetecreditos.\",\r\n            templateList: '<paquetecreditos-list></paquetecreditos-list>',\r\n            templateForm: config.component,\r\n            parent: 'admin'\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, { resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (Paquetecreditos, $stateParams) {\r\n                    return Paquetecreditos.get({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('PAQUETECREDITOS_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<paquetecreditos-form-admin' +\r\n                ' item=\"' + resolve + 'item\"' +\r\n                ' previous-params=\"' + resolve + 'previousParams\"' +\r\n                '\"></paquetecreditos-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (Paquetecreditos) {\r\n                        return new Paquetecreditos();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('paquetecreditosFormAdmin', {\r\n            templateUrl: 'app/admin/paquetecreditos/paquetecreditos-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, Paquetecreditos, ModalService, $stateParams) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            if ($stateParams.paquetecreditosId) {\r\n                vm.item.paquetecreditos = {};\r\n                vm.item.paquetecreditos.id = $stateParams.empresaId;\r\n            }\r\n            Paquetecreditos.save(vm.item).$promise.then(function(data) {\r\n                $state.go('admin/paquetecreditos/list');\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('login', {\r\n            parent: 'admin',\r\n            url: '/login',\r\n            data: {\r\n                authorities: [],\r\n                pageTitle: 'login.title'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/login/login.html',\r\n                    controller: 'LoginController',\r\n                    controllerAs: 'loginCtrl'\r\n                }\r\n            },\r\n            ncyBreadcrumb: {\r\n                skip: true\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('LoginController', LoginController);\r\n\r\n    /* @ngInject */\r\n    function LoginController($state, $timeout, Auth, Principal, AlertService, ADMIN_PRINCIPAL) {\r\n        var vm = this;\r\n\r\n        vm.user = {};\r\n        vm.rememberMe = false;\r\n\r\n        Principal.identity().then(function () {\r\n            $state.go(ADMIN_PRINCIPAL);\r\n        });\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input').focus();\r\n        });\r\n\r\n        vm.login = function () {\r\n            Auth.login({\r\n                username: vm.username,\r\n                password: vm.password,\r\n                rememberMe: vm.rememberMe\r\n            }).then(function () {\r\n                vm.authenticationError = false;\r\n                $state.go(ADMIN_PRINCIPAL);\r\n            }).catch(function () {\r\n                AlertService.error(\"login.form.error.authentication\");\r\n            });\r\n        }\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('admin/estaticas', {\r\n                parent: 'admin',\r\n                url: '/admin/estaticas/:nombre',\r\n                data: {\r\n                    authorities: ['ROLE_ADMIN'],\r\n                    pageTitle: 'estaticas.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        template: '<estatica-form estatica=\"$resolve.estatica\" idiomas=\"$resolve.idiomas\"></estatica-form>',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    estatica: function (Estatica, $stateParams) {\r\n                        return Estatica.getByNombre({nombre: $stateParams.nombre}).$promise.then(function (data) {\r\n                            return data;\r\n                        });\r\n                    },\r\n                    /* @ngInject */\r\n                    idiomas: function (EnumService) {\r\n                        return EnumService.get('estaticas-idioma');\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    label: 'estaticas.title'\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Estatica', Service);\r\n\r\n    /* @ngInject */\r\n    function Service($resource) {\r\n        return $resource('api/admin/estaticas/:id', {}, {\r\n            'get': {\r\n                method: 'GET',\r\n                url: 'api/public/estaticas/:id'\r\n            },\r\n            'getByNombre': {\r\n                method: 'GET',\r\n                url: 'api/public/estaticas/nombre/:nombre'\r\n            },\r\n            'getByNombreIdioma': {\r\n                method: 'GET',\r\n                url: 'api/public/estaticas/getByNombreIdioma'\r\n            },\r\n            'findAll': {\r\n                method: 'GET',\r\n                isArray: true,\r\n                url: 'api/public/estaticas/findAll'\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('EstaticaIdiomaService', EstaticaIdiomaService);\r\n\r\n    /* @ngInject */\r\n    function EstaticaIdiomaService($resource) {\r\n        return $resource('api/public/estaticas/idioma', {}, {\r\n            'get': {\r\n                method: 'GET',\r\n                isArray: true\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    // estatica: Objeto a modificar.\r\n    // idiomas: Idiomas en los que pueden estar las páginas estáticas.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('estaticaForm', {\r\n            bindings: {\r\n                estatica: '<',\r\n                idiomas: '<'\r\n            },\r\n            templateUrl: 'app/admin/estaticas/estatica-form.admin.html',\r\n            controllerAs: 'ctrl',\r\n            controller: function (Estatica) {\r\n                var vm = this;\r\n\r\n                vm.mode = 'edit';\r\n                vm.canSave = true;\r\n\r\n                vm.init = function (estatica, index, idioma) {\r\n                    if (!estatica.estaticasI18n[index]) estatica.estaticasI18n[index] = {};\r\n\r\n                    if (!estatica.estaticasI18n[index].idioma) {\r\n                        estatica.estaticasI18n[index].idioma = idioma;\r\n                    }\r\n                };\r\n\r\n                vm.save = function () {\r\n                    // FIXME: La validación dejó de funcionar al utilizar el required. Intentar utilizar la librería de validación para cambiar la pestaña activa\r\n                    var hayPrimeraEstaticaSinTitulo = false;\r\n\r\n                    vm.idiomas.forEach(function (idioma, index) {\r\n                        vm.estatica.estaticasI18n.forEach(function (estaticaI18n) {\r\n                            if (estaticaI18n.idioma === idioma && estaticaI18n.titulo === undefined && !hayPrimeraEstaticaSinTitulo) {\r\n                                vm.active = index;\r\n                                hayPrimeraEstaticaSinTitulo = true;\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    if (!hayPrimeraEstaticaSinTitulo) {\r\n                        Estatica.save(vm.estatica).$promise.then(function (data) {\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n        });\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, ALUMNO_FORM_ADMIN) {\r\n        var config = ALUMNO_FORM_ADMIN();\r\n        var base = \"admin/empresa/alumno\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/:empresaId/alumno\",\r\n            translateBase: \"admin.alumno.\",\r\n            templateList: '<alumno-list-admin empresa=\"$resolve.empresa\"></alumno-list-admin>',\r\n            templateForm: config.component,\r\n            parent: 'admin/empresa'\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                empresa: function (User, $stateParams) {\r\n                    return User.getEmpresaDTO({id: $stateParams.empresaId}).$promise.then(function(data) {\r\n                        return data;\r\n                    });\r\n                }\r\n            }),\r\n            ncyBreadcrumb: {\r\n                parent: 'admin/empresa/list'\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {\r\n\r\n        });\r\n        // Crear\r\n        angular.merge(state.create, { resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (User, $stateParams) {\r\n                    return User.getById({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, EMPRESA_FORM_ADMIN) {\r\n        var config = EMPRESA_FORM_ADMIN();\r\n        var base = \"admin/empresa\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.empresa.\",\r\n            templateList: '<empresa-list-admin></empresa-list-admin>',\r\n            templateForm: config.component\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, {resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (User, $stateParams) {\r\n                    return User.getById({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('empresaListAdmin', {\r\n            templateUrl: 'app/admin/empresa/empresa-list.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, User, DescargaUtil) {\r\n        var vm = this;\r\n\r\n        vm.item = User;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.filter = {\r\n            key: undefined,\r\n            rol: 'ROLE_EMPRESA',\r\n            activos: true\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {email: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Descargar\r\n\r\n        vm.empresasExcel = function () {\r\n            DescargaUtil.descargar('api/admin/user/empresasExcel', null,\r\n                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8');\r\n        };\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('EMPRESA_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<empresa-form-admin' +\r\n                ' item=\"' + resolve + 'item\"' +\r\n                ' previous-params=\"' + resolve + 'previousParams\"' +\r\n                '\"></empresa-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (User) {\r\n                        return new User();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('empresaFormAdmin', {\r\n            templateUrl: 'app/admin/empresa/empresa-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, EnumService, Capacidad, Idioma, Pais, Nivel, Usuario, AlertService, ModalService, CAPACIDAD_FORM_ADMIN) {\r\n        var vm = this;\r\n\r\n        if (!vm.item.imagen) {\r\n            vm.item.imagen = {};\r\n        }\r\n        if (vm.item.foto) {\r\n            vm.item.imagen.path = vm.item.foto;\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            vm.item.type = \"empresa\";\r\n            if (vm.item.imagen) {\r\n                vm.item.foto = vm.item.imagen.path;\r\n            }\r\n            if ((vm.item.contrasenaClaro) && (vm.item.contrasenaClaro !== vm.confirmPassword)) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                if (vm.item.id) {\r\n                    Usuario.edit(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/empresa/list');\r\n                    });\r\n                } else {\r\n                    Usuario.register(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/empresa/list');\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, CAPACIDAD_FORM_ADMIN) {\r\n        var config = CAPACIDAD_FORM_ADMIN();\r\n        var base = \"admin/capacidad\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.capacidad.\",\r\n            templateList: '<capacidad-list-admin></capacidad-list-admin>',\r\n            templateForm: config.component\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, {resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (Capacidad, $stateParams) {\r\n                    return Capacidad.get({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('CAPACIDAD_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<capacidad-form-admin ' +\r\n                'item=\"' + resolve + 'item\" ' +\r\n                'previous-params=\"' + resolve + 'previousParams\"></capacidad-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (Capacidad) {\r\n                        return new Capacidad();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('capacidadFormAdmin', {\r\n            templateUrl: 'app/admin/capacidad/capacidad-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, ModalService) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            vm.item.$save().then(function () {\r\n                ModalService.closeComponent(vm.item, 'admin/profesor/create', vm.previousParams);\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('ConfiguracionController', ConfiguracionController);\r\n\r\n    /* @ngInject */\r\n    function ConfiguracionController(configuracion, Configuracion, AlertService) {\r\n        var vm = this;\r\n        vm.configuracion = configuracion;\r\n\r\n        vm.save = function() {\r\n            Configuracion.save(vm.configuracion).$promise;\r\n        }\r\n\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('admin/configuracion', {\r\n                parent: 'admin',\r\n                url: '/admin/configuracion',\r\n                data: {\r\n                    authorities: ['ROLE_ADMIN'],\r\n                    pageTitle: 'admin.configuracion.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/admin/configuracion/configuracion.html',\r\n                        controller: 'ConfiguracionController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    configuracion: function (Configuracion) {\r\n                        return Configuracion.get({id: '0'}).$promise.then(function (data) {\r\n                            return data;\r\n                        });\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    label: 'admin.configuracion.title'\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, ALUMNO_FORM_ADMIN) {\r\n        var config = ALUMNO_FORM_ADMIN();\r\n        var base = \"admin/alumno\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.alumno.\",\r\n            templateList: '<alumno-list-admin></alumno-list-admin>',\r\n            templateForm: config.component\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, {resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (User, $stateParams) {\r\n                    return User.getById({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit)\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('alumnoListAdmin', {\r\n            templateUrl: 'app/admin/alumno/alumno-list.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                empresa: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, User, DescargaUtil) {\r\n        var vm = this;\r\n\r\n        vm.estadoEditar = vm.empresa != null ? 'empresa/alumno' : 'alumno';\r\n\r\n        vm.item = User;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.empresaId = $stateParams.empresaId;\r\n\r\n        vm.filter = {\r\n            key: undefined,\r\n            rol: 'ROLE_ALUMNO',\r\n            activos: true,\r\n            empresa: vm.empresaId\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {nombre: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Descargar\r\n\r\n        vm.empresaAlumnosExcel = function (id) {\r\n            DescargaUtil.descargar('api/admin/user/empresaAlumnosExcel', {id: id},\r\n                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8');\r\n        };\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('ALUMNO_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<alumno-form-admin' +\r\n                ' item=\"' + resolve + 'item\"' +\r\n                ' previous-params=\"' + resolve + 'previousParams\"' +\r\n                ' empresa=\"' + resolve + 'empresa\"' +\r\n                '></alumno-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (User) {\r\n                        return new User();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('alumnoFormAdmin', {\r\n            templateUrl: 'app/admin/alumno/alumno-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<',\r\n                empresa: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, EnumService, Usuario, AlertService, ModalService, $stateParams) {\r\n        var vm = this;\r\n\r\n        if (!vm.item.imagen) {\r\n            vm.item.imagen = {};\r\n        }\r\n        if (vm.item.foto) {\r\n            vm.item.imagen.path = vm.item.foto;\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        if (vm.empresa != null) {\r\n            var creditosIniciales = vm.item.creditosDisponibles;\r\n            vm.creditosMaximos = creditosIniciales + vm.empresa.creditosDisponibles;\r\n        }\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            vm.item.type = \"alumno\";\r\n            if (vm.item.imagen) {\r\n                vm.item.foto = vm.item.imagen.path;\r\n            }\r\n            if ($stateParams.empresaId) {\r\n                vm.item.empresa = {};\r\n                vm.item.empresa.id = $stateParams.empresaId;\r\n                vm.item.empresa.type = 'empresa';\r\n            }\r\n            if ((vm.item.contrasenaClaro) && (vm.item.contrasenaClaro !== vm.confirmPassword)) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                if (vm.item.id) {\r\n                    Usuario.edit(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/empresa/alumno', {empresaId: vm.item.empresa.id});\r\n                    });\r\n                } else {\r\n                    Usuario.register(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/empresa/alumno', {empresaId: vm.item.empresa.id});\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('admin/profesor/agenda', {\r\n                parent: 'admin/profesor',\r\n                url: '/agenda/:usuarioId?:mes&:ano',\r\n                data: {\r\n                    authorities: ['ROLE_ADMIN']\r\n                },\r\n                params: {\r\n                    // canceladasRechazadas: 'false'\r\n                    usuarioId: null,\r\n                    mes: null,\r\n                    ano: null\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        template: '<h1>{{$resolve.usuario.nombre}} {{$resolve.usuario.apellidos}} <small>({{$resolve.usuario.email}})</small></h1>' +\r\n                            '<mi-agenda usuario-autenticado=\"$resolve.usuario\" admin=\"true\"' +\r\n                            ' init-month=\"$resolve.mes\" init-year=\"$resolve.ano\"></mi-agenda>',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    usuario: function ($stateParams, User) {\r\n                        return User.getById({id: $stateParams.usuarioId}).$promise;\r\n                    },\r\n                    /* @ngInject */\r\n                    mes: function ($stateParams) {\r\n                        return $stateParams.mes;\r\n                    },\r\n                    /* @ngInject */\r\n                    ano: function ($stateParams) {\r\n                        return $stateParams.ano;\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    label: \"admin.profesor.agenda.title\",\r\n                    parent: 'admin/profesor/list'\r\n                }\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('RutasService', RutasService);\r\n\r\n    /* @ngInject */\r\n    function RutasService($location, DEBUG_INFO_ENABLED) {\r\n        var cacheUrl = \"\";\r\n\r\n        return {\r\n            getBaseUrl: getBaseUrl,\r\n            getAgenteCvUrl: getAgenteCvUrl,\r\n            getAgenteImagenUrl: getAgenteImagenUrl\r\n        };\r\n\r\n        function getBaseUrl() {\r\n            // En desarrollo utilizamos la de pre porque si no hay problemas al compartir con Facebook\r\n            if (!cacheUrl) {\r\n                if (DEBUG_INFO_ENABLED) {\r\n                    cacheUrl = \"http://localhost:8080\";\r\n                } else {\r\n                    cacheUrl = $location.protocol() + \"://\" + $location.host();\r\n                    if ($location.port() !== 80) {\r\n                        cacheUrl = cacheUrl + \":\" + $location.port();\r\n                    }\r\n                }\r\n            }\r\n            return cacheUrl;\r\n        }\r\n\r\n        function getAgenteCvUrl(id) {\r\n            return '/upload/agentes/' + id + '/cv/';\r\n        }\r\n\r\n        function getAgenteImagenUrl(id) {\r\n            return '/upload/agentes/' + id + '/imagen/';\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app').factory('Language', factory);\r\n\r\n    /* @ngInject */\r\n    function factory($translate) {\r\n        return {\r\n            getCurrent: getCurrent\r\n        };\r\n\r\n        function getCurrent() {\r\n            if ($translate.use()) return $translate.use();\r\n            return $translate.preferredLanguage();\r\n        }\r\n    }\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('EnumService', EnumService);\r\n\r\n    /* @ngInject */\r\n    function EnumService($http, $q) {\r\n        var cache = {};\r\n\r\n        return {\r\n            get: get\r\n        };\r\n\r\n        function get(tipo) {\r\n            if (cache[tipo]) {\r\n                var defered = $q.defer();\r\n                var promise = defered.promise;\r\n                defered.resolve(cache[tipo]);\r\n                return promise;\r\n            }\r\n\r\n            // FIXME: Así sea cachea durante la sesión. Una vez se recarga la página la caché se pierde. Se puede también cachear la petición cambiando la URL base (lo que está en /api no se cachea)\r\n            return $http.get('api/public/enum/' + tipo, {cache: true}).then(function (result) {\r\n                cache[tipo] = result.data;\r\n                return result.data;\r\n            });\r\n        }\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('public', {\r\n            abstract: true,\r\n            parent: 'site',\r\n            views: {\r\n                'header@': {\r\n                    templateUrl: 'app/layouts/header/header.html',\r\n                    controller: \"HeaderController\",\r\n                    controllerAs: 'ctrl'\r\n                },\r\n                'navbar@': {\r\n                    template: '<mi-menu menu=\"$ctrl.menu\" nav-collapsed=\"$ctrl.navCollapsed\" modal=\"$ctrl.modal(id)\"></mi-menu>',\r\n                    /* @ngInject */\r\n                    controller: function (menuData, $timeout, $window, Principal) {\r\n                        this.menu = menuData;\r\n                        this.navCollapsed = $window.innerWidth < 992;\r\n\r\n                        $timeout(function () {\r\n                            Principal.identity().then(function (data) {\r\n                                // Si es un alumno con empresa asociada, eliminamos la sección Mis compras\r\n                                if (data && data.rol === 'ROLE_ALUMNO' && data.empresa != null) {\r\n                                    angular.element(\".menu [ui-sref='paquetecreditos']\").parent().remove();\r\n                                    angular.element(\".menu [ui-sref='miespacio/miscompras']\").parent().remove();\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    controllerAs: '$ctrl',\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        menuData: function (Menu) {\r\n                            return Menu.getMenu('menu-main');\r\n                        }\r\n                    }\r\n                },\r\n                'footer@': {\r\n                    templateUrl: 'app/layouts/footer/footer.html'\r\n                }\r\n            },\r\n            resolve: {\r\n                /* @ngInject */\r\n                isAdmin: function ($rootScope) {\r\n                    $rootScope.isAdmin = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n    angular\r\n        .module('app')\r\n        // Nº de elementos por página en las tablas\r\n        .constant('NG_TABLE_DEFAULT_PARAMS_PUBLIC', {size: 20})\r\n        .constant('NG_LIST_DEFAULT_PARAMS_PUBLIC', {size: 20})\r\n        // Facebook ID (clientID). Coincide con la que se indique en application-prod.yml\r\n        .constant('FACEBOOK_ID', '294397101020791')\r\n\r\n    ;\r\n})();\r\n ;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Usuario', Usuario);\r\n\r\n    /* @ngInject */\r\n    function Usuario(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"usuario\", {}, {\r\n            'register': {\r\n                method: 'POST',\r\n                url: 'api/public/perfil/register',\r\n                isArray: false\r\n            },\r\n            'edit': {\r\n                method: 'POST',\r\n                url: 'api/public/perfil/edit',\r\n                isArray: false\r\n            },\r\n            'queryByEmail': {\r\n                method: 'GET',\r\n                url: 'api/public/perfil/queryByEmail',\r\n                isArray: true\r\n            },\r\n            'queryByLogin': {\r\n                method: 'GET',\r\n                url: 'api/public/perfil/queryByLogin',\r\n                isArray: true\r\n            },\r\n            'queryCentro': {\r\n                method: 'GET',\r\n                url: 'api/public/perfil/centro/query',\r\n                isArray: true\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('User', User);\r\n\r\n    /* @ngInject */\r\n    function User($resource, ParseLinks) {\r\n        var urlAdmin = 'api/admin/user';\r\n        var urlPublic = 'api/public/user';\r\n        return $resource(urlAdmin, {email: '@account.email'}, {\r\n            'query': {\r\n                method: 'GET',\r\n                isArray: false,\r\n                transformResponse: function (data, headers) {\r\n                    return {\r\n                        links: ParseLinks.parse(headers('link')),\r\n                        list: angular.fromJson(data)\r\n                    };\r\n                }\r\n            },\r\n            'get': {\r\n                method: 'GET',\r\n                params: {\r\n                    email: '@email'\r\n                }\r\n            },\r\n            'getById': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/id',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'getEmpresaDTO': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/getEmpresaDTO/id',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'getProfesorById': {\r\n                method: 'GET',\r\n                url: urlPublic + '/profesor/id',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'findAll': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/findAll'\r\n            },\r\n            'findProfesoresAdmin': {\r\n                method: 'POST',\r\n                url: urlAdmin + '/findProfesoresAdmin'\r\n            },\r\n            'findAllProfesor': {\r\n                method: 'POST',\r\n                url: urlPublic + '/findAllProfesor'\r\n            },\r\n            'findAlumnosByCentro': {\r\n                method: 'GET',\r\n                url: urlPublic + '/findAlumnosByCentro'\r\n            },\r\n            'getUsuarioPorReserva': {\r\n                method: 'GET',\r\n                url: urlPublic + '/getUsuarioPorReserva'\r\n            },\r\n            'getProfesorPorClaseLibre': {\r\n                method: 'GET',\r\n                url: urlPublic + '/getProfesorPorClaseLibre'\r\n            },\r\n            'email': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/email',\r\n                params: {\r\n                    email: '@email'\r\n                }\r\n            },\r\n            'activar': {\r\n                method: 'POST',\r\n                url: urlAdmin + '/activar',\r\n                params: {\r\n                    email: '@email',\r\n                    activar: '@activar'\r\n                }\r\n            },\r\n            'restaurar': {\r\n                method: 'POST',\r\n                url: urlAdmin + '/restaurar',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'eliminar': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/eliminar',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'baja': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/baja',\r\n                params: {\r\n                    email: '@email'\r\n                }\r\n            },\r\n            'zonasHorarias': {\r\n                method: 'GET',\r\n                url: urlPublic + '/zonasHorarias',\r\n                isArray: true\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Perfil', service);\r\n\r\n    /* @ngInject */\r\n    function service($resource) {\r\n        var url = 'api/public/perfil';\r\n        return $resource(url, {}, {\r\n            'changePassword': {\r\n                method: 'POST',\r\n                url: url + '/change_password'\r\n            },\r\n            'baja': {\r\n                method: 'GET',\r\n                url: url + '/baja'\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Paquetecreditos', Paquetecreditos);\r\n\r\n    /* @ngInject */\r\n    function Paquetecreditos(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"paquetecreditos\", {}, {\r\n        });\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Pais', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"pais\", {}, {\r\n            'getAllWithProfesores': {\r\n                method: 'GET',\r\n                url: 'api/public/pais/getAllWithProfesores',\r\n                isArray: true\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Nivel', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"nivel\");\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Idioma', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"idioma\");\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('DatosFacturacion', Service);\r\n\r\n    /* @ngInject */\r\n    function Service($resource) {\r\n        var url = 'api/public/datosfacturacion';\r\n        return $resource(url, {}, {\r\n            'getDatosFacturacionDeUsuario': {\r\n                method: 'GET',\r\n                url: url + '/getDatosFacturacionDeUsuario'\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Configuracion', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"configuracion\");\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Compra', Compra);\r\n\r\n    /* @ngInject */\r\n    function Compra(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"compra\", {}, {\r\n            'findAllByUsuarioActivo': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/findAllByUsuarioActivo',\r\n                isArray: false\r\n            },\r\n/*            'findAllByUsuario': {\r\n                method: 'GET',\r\n                url: 'api/admin/compra/findAllByUsuario',\r\n                isArray: false\r\n            },*/\r\n            'crear': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/crear',\r\n                isArray: false\r\n            },\r\n            'iniciarPaypal': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/iniciar-paypal',\r\n                isArray: false\r\n            },\r\n            'confirmarPaypal': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/confirmar-paypal',\r\n                isArray: false\r\n            },\r\n            'iniciarPaypalAlumno': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/iniciar-paypal-alumno',\r\n                isArray: false\r\n            },\r\n            'cancelar': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/cancelar',\r\n                isArray: false\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Capacidad', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"capacidad\");\r\n    }\r\n\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app').factory('stateHandler', factory);\r\n\r\n    /* @ngInject */\r\n    function factory($state, $window, $timeout, $rootScope, $translate, Principal, Auth, AlertService, $location) {\r\n        var _states;\r\n\r\n        return {\r\n            stateExists: stateExists,\r\n            initialize: initialize\r\n        };\r\n\r\n        function initialize() {\r\n            $timeout(function () {\r\n                _states = $state.get().map(function (item) {\r\n                    return item.name;\r\n                });\r\n            }, 0);\r\n            // in every HTML view we can check for a feature/state and prevent\r\n            // showing a link if it's not enabled\r\n            $rootScope.stateExists = stateExists;\r\n\r\n            var deregistrationStateChangeStart = $rootScope.$on('$stateChangeStart',\r\n                function (event, toState, toStateParams) {\r\n                    AlertService.clearPermanent();\r\n\r\n                    if (toState.redirectTo) {\r\n                        event.preventDefault();\r\n                        $state.go(toState.redirectTo, toStateParams)\r\n                    }\r\n\r\n                    $rootScope.toState = toState;\r\n                    $rootScope.toStateParams = toStateParams;\r\n\r\n                    if (Principal.isIdentityResolved()) {\r\n                        Auth.authorize();\r\n                    }\r\n                }\r\n            );\r\n            $rootScope.$on('$destroy', deregistrationStateChangeStart);\r\n\r\n            var deregistrationStateChangeSuccess = $rootScope.$on('$stateChangeSuccess',\r\n                function (event, toState, toParams, fromState, fromParams) {\r\n                    if ($window.ga) {\r\n                        console.log(\"GoogleAnalytics. Sending: \" + $location.path());\r\n                        $window.ga('set', 'page', $location.path());\r\n                        $window.ga('send', 'pageview');\r\n                    }\r\n\r\n                    var titleKey = 'global.title';\r\n\r\n                    if (!$rootScope.redirected && fromState.name !== 'logout' && fromState.name !== 'login') {\r\n                        $rootScope.previousStateName = fromState.name;\r\n                        $rootScope.previousStateParams = fromParams;\r\n                    }\r\n\r\n                    // Set the page title key to the one configured in state or use default one\r\n                    if (toState.data.pageTitle) {\r\n                        titleKey = toState.data.pageTitle;\r\n                    }\r\n                    $translate(titleKey).then(function (title) {\r\n                        // Change window title with translated one\r\n                        $window.document.title = $translate.instant('global.title') + \" - \" + title;\r\n                    });\r\n\r\n                }\r\n            );\r\n            $rootScope.$on('$destroy', deregistrationStateChangeSuccess);\r\n\r\n            function back() {\r\n                // If previous state is 'activate' or do not exist go to 'home'\r\n                if ($rootScope.previousStateName === 'activate' || $state.get($rootScope.previousStateName) === null) {\r\n                    $state.go('home');\r\n                } else {\r\n                    $state.go($rootScope.previousStateName, $rootScope.previousStateParams);\r\n                }\r\n            }\r\n\r\n            $rootScope.back = back;\r\n        }\r\n\r\n        function stateExists(state) {\r\n            return _states.indexOf(state) !== -1;\r\n        }\r\n    }\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name app.object:ieFix\r\n     *\r\n     * @description\r\n     * Definición de las operaciones que no soporta Internet Explorer y que el resto de navegadores sí:\r\n     *\r\n     * - `String.prototype.startsWith`\r\n     * - `String.prototype.endsWith`\r\n     * - `String.prototype.inclues`\r\n     * - `Array.prototype.startsWith`\r\n     *\r\n     */\r\n    angular\r\n        .module('app')\r\n        .config(ieFix);\r\n\r\n    /* @ngInject */\r\n    function ieFix() {\r\n\r\n        // *** Strings ***\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\r\n        if (!String.prototype.startsWith) {\r\n            String.prototype.startsWith = function (search, pos) {\r\n                return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\r\n            };\r\n        }\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\r\n        if (!String.prototype.endsWith) {\r\n            String.prototype.endsWith = function (search, this_len) {\r\n                if (this_len === undefined || this_len > this.length) {\r\n                    this_len = this.length;\r\n                }\r\n                return this.substring(this_len - search.length, this_len) === search;\r\n            };\r\n        }\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\r\n        if (!String.prototype.includes) {\r\n            String.prototype.includes = function (search, start) {\r\n                'use strict';\r\n                if (typeof start !== 'number') {\r\n                    start = 0;\r\n                }\r\n\r\n                if (start + search.length > this.length) {\r\n                    return false;\r\n                } else {\r\n                    return this.indexOf(search, start) !== -1;\r\n                }\r\n            };\r\n        }\r\n\r\n        // *** Arrays ***\r\n\r\n        // https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/includes\r\n        if (!Array.prototype.includes) {\r\n            Array.prototype.includes = function (searchElement /*, fromIndex*/) {\r\n                'use strict';\r\n                var O = Object(this);\r\n                var len = parseInt(O.length) || 0;\r\n                if (len === 0) {\r\n                    return false;\r\n                }\r\n                var n = parseInt(arguments[1]) || 0;\r\n                var k;\r\n                if (n >= 0) {\r\n                    k = n;\r\n                } else {\r\n                    k = len + n;\r\n                    if (k < 0) {\r\n                        k = 0;\r\n                    }\r\n                }\r\n                var currentElement;\r\n                while (k < len) {\r\n                    currentElement = O[k];\r\n                    if (searchElement === currentElement ||\r\n                        (searchElement !== searchElement && currentElement !== currentElement)) {\r\n                        return true;\r\n                    }\r\n                    k++;\r\n                }\r\n                return false;\r\n            };\r\n        }\r\n\r\n    }\r\n})();\r\n;\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(httpConfig);\r\n\r\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', '$locationProvider', 'DEBUG_INFO_ENABLED', 'httpRequestInterceptorCacheBusterProvider'];\r\n\r\n    function httpConfig($urlRouterProvider, $httpProvider, $locationProvider, DEBUG_INFO_ENABLED, httpRequestInterceptorCacheBusterProvider) {\r\n        //Cache everything except rest api requests\r\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\r\n\r\n        $urlRouterProvider.otherwise('/entrar');\r\n\r\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\r\n        $httpProvider.interceptors.push('authExpiredInterceptor');\r\n        $httpProvider.interceptors.push('authInterceptor');\r\n        $httpProvider.interceptors.push('notificationInterceptor');\r\n\r\n        // Elimina el ! de las URLs\r\n        $locationProvider.hashPrefix('');\r\n\r\n        // Elimina el # de las URLs de producción.\r\n        if (!DEBUG_INFO_ENABLED) {\r\n            $locationProvider.html5Mode(true);\r\n        }\r\n    }\r\n\r\n})(angular);\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(appConfig);\r\n\r\n    /* @ngInject */\r\n    function appConfig($translateProvider, DEBUG_INFO_ENABLED, cfpLoadingBarProvider, $compileProvider, $breadcrumbProvider, $qProvider) {\r\n        console.log(\"Configurando aplicación\");\r\n\r\n        $translateProvider.useSanitizeValueStrategy('escapeParameters');\r\n\r\n        // Configuración del idioma\r\n        $translateProvider.useStaticFilesLoader({\r\n            files: [{\r\n                prefix: 'i18n/',\r\n                suffix: '/admin.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/error.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/public.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/miespacio.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/componentes.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/enum.json'\r\n            }]\r\n        });\r\n        // TODO: Almacenar en localstorage el último idioma seleccionado (app.module->changeLanguage) y leerlo de ahí\r\n        $translateProvider.preferredLanguage('es');\r\n\r\n        // Configuración de la barra de carga\r\n        cfpLoadingBarProvider.latencyThreshold = 150;\r\n        cfpLoadingBarProvider.includeSpinner = false;\r\n\r\n        // Configuración Breadcrumb\r\n        $breadcrumbProvider.setOptions({\r\n            templateUrl: 'app/components/breadcrumb/breadcrumb.html'\r\n        });\r\n\r\n        // disable debug data on prod profile to improve performance. Por ahora siempre en modo debug\r\n        console.log(\"Angular debug:\" + DEBUG_INFO_ENABLED);\r\n        $compileProvider.debugInfoEnabled(true);\r\n\r\n        $compileProvider.preAssignBindingsEnabled(true);\r\n        $qProvider.errorOnUnhandledRejections(false);\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('admin', {\r\n                abstract: true,\r\n                parent: 'site',\r\n                views: {\r\n                    'navbar@': {\r\n                        template: '<mi-menu menu=\"$ctrl.menu\" nav-collapsed=\"$ctrl.navCollapsed\" modal=\"$ctrl.modal(id)\"></mi-menu>',\r\n                        controller: ['menuData', '$window', 'StaticModal', function (menuData, $window) {\r\n                            this.menu = menuData;\r\n                            this.navCollapsed = $window.innerWidth < 992;\r\n                        }],\r\n                        controllerAs: '$ctrl',\r\n                        resolve: {\r\n                            menuData: ['Menu',\r\n                                function (Menu) {\r\n                                    return Menu.getMenu('menu-admin');\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    'footer@': {\r\n                        templateUrl: 'app/layouts/footer/footer.admin.html'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    isAdmin: function ($rootScope) {\r\n                        $rootScope.isAdmin = true;\r\n                    }\r\n                }\r\n            })\r\n            .state('admin/login', {\r\n                url: '/admin',\r\n                parent: 'admin',\r\n                redirectTo: 'login'\r\n            });\r\n    }\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    // Operaciones CRUD para la gestión de elementos en la administración.\r\n\r\n    // PARÁMETROS DE CONFIGURACIÓN:\r\n\r\n    // base: Estado base (Ej: 'admin/entity')\r\n    // baseUrl: URL base que se va a mostrar en el navegador (Ej: '/admin/entity')\r\n    // translateBase: Raíz de los ficheros de mensaje (Ej: 'admin.entity.')\r\n    // parent: Indica si los nuevos estados van englobados dentro de otro. Útil para el breadcrumb.(Opcional)\r\n\r\n    // v2: Formularios como componentes\r\n    // templateList: Contiene un componente para los listados (Ej: '<entity-list></entity-list>')\r\n    // templateForm: Contiene un componente para los formularios (Ej: '<entity-form></entity-form>')\r\n    // Nota: A los componentes habrá que pasarle (con bindings) toda la información que se obtenga en el 'resolve' del estado.\r\n\r\n    // v1: Formularios sin componentes (controladores y htmls)\r\n    // controller: Controlador para el listado\r\n    // controllerForm: Controlador para el formulario\r\n    // templateUrlBase: Añade un prefijo a los archivos: .list.html o .form.html.\r\n\r\n    // Ejemplo de uso: FILO1701. Organismos (/app/admin/organismo)\r\n\r\n    angular.module('app')\r\n        .constant('STATE_HELPER', function (params) {\r\n            var states = {\r\n                parent: {\r\n                    name: params.base,\r\n                    parent: params.parent ? params.parent : 'admin',\r\n                    url: params.baseUrl,\r\n                    redirectTo: params.base + '/list',\r\n                    ncyBreadcrumb: {\r\n                        skip: true\r\n                    }\r\n                    // Extend: data {authorities}\r\n                },\r\n                list: {\r\n                    name: params.base + \"/list\",\r\n                    parent: params.base,\r\n                    url: '/listar/:page',\r\n                    params: {\r\n                        page: {value: '1', dynamic: true}\r\n                    },\r\n                    views: {},\r\n                    data: {\r\n                        pageTitle: params.translateBase + \"list.title\"\r\n                    },\r\n                    ncyBreadcrumb: {\r\n                        label: params.translateBase + \"list.title\"\r\n                    }\r\n                },\r\n                create: {\r\n                    name: params.base + \"/create\",\r\n                    parent: params.base,\r\n                    url: '/crear',\r\n                    data: {\r\n                        pageTitle: params.translateBase + 'create.title',\r\n                        mode: 'create'\r\n                    },\r\n                    views: {},\r\n                    ncyBreadcrumb: {\r\n                        label: params.translateBase + \"create.title\",\r\n                        parent: params.base + \"/list\"\r\n                    },\r\n                    // Extend: resolve\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        previousParams: function ($state) {\r\n                            return $state.params;\r\n                        }\r\n                    }\r\n                },\r\n                edit: {\r\n                    name: params.base + \"/edit\",\r\n                    parent: params.base,\r\n                    url: '/:id/editar',\r\n                    data: {\r\n                        pageTitle: params.translateBase + 'edit.title',\r\n                        mode: 'edit'\r\n                    },\r\n                    views: {},\r\n                    ncyBreadcrumb: {\r\n                        label: params.translateBase + \"edit.title\",\r\n                        parent: params.onlyEdit ? null : params.base + \"/list\"\r\n                    },\r\n                    // Extend: resolve\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        previousParams: function ($state) {\r\n                            return $state.params;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (!params.view) {\r\n                params.view = 'content@';\r\n            }\r\n\r\n            // Listar\r\n            states.list.views[params.view] = {\r\n                templateUrl: params.templateUrlBase + '.list.html',\r\n                controller: params.controller,\r\n                template: params.templateList ? params.templateList : undefined,\r\n                controllerAs: 'ctrl'\r\n            };\r\n            // Crear y editar\r\n            states.create.views[params.view] = states.edit.views[params.view] = {\r\n                templateUrl: params.templateUrlBase + '.form.html',\r\n                controller: params.controllerForm,\r\n                template: params.templateForm ? params.templateForm : undefined,\r\n                controllerAs: 'ctrl'\r\n            };\r\n\r\n            return states;\r\n        });\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .constant('ADMIN_PRINCIPAL', \"admin/reserva/list\")\r\n        // Nº de elementos por página en las tablas\r\n        .constant('NG_TABLE_DEFAULT_PARAMS', {size: 20});\r\n})();\r\n;\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('site', {\r\n            abstract: true,\r\n            data: {\r\n                authorities: []\r\n            },\r\n            resolve: {\r\n                authorize: ['Auth', function (Auth) {\r\n                    return Auth.authorize();\r\n                }]\r\n            }\r\n        });\r\n    }\r\n})();\r\n;\n(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('app')\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n;(function(){angular.module(\"app\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/templates/tesauro.templates.html\",\"<script type=\\\"text/ng-template\\\" id=\\\"agentes.tesauro.html\\\">\\r\\n    <a>\\r\\n        {{match.model.nombre}} <span ng-if=\\\"match.model.pseudonimo\\\">({{match.model.pseudonimo}})</span>\\r\\n    </a>\\r\\n</script>\\r\\n\");\n$templateCache.put(\"app/admin/alumno/alumno-form.admin.html\",\"<form name=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.save()\\\" novalidate>\\r\\n    <div class=\\\"form-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Imagen de perfil-->\\r\\n            <div class=\\\"col-sm-4 form-group\\\">\\r\\n                <imagen-perfil ng-model=\\\"ctrl.item.imagen\\\" ruta-carpeta-imagen=\\\"upload/usuarios/{{ctrl.item.id}}/perfil\\\" on-remove-image=\\\"ctrl.onRemoveImage()\\\"></imagen-perfil>\\r\\n            </div>\\r\\n\\r\\n            <div ng-if=\\\"ctrl.empresa\\\" class=\\\"col-sm-8 form-group\\\" align=\\\"right\\\">\\r\\n                <label>{{\\'admin.alumno.form.creditosmaximos\\' | translate}}: {{ctrl.empresa.creditosDisponibles}}</label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Nombre-->\\r\\n            <div class=\\\"col-sm-4\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.alumno.form.nombre\\\" for=\\\"nombre\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"nombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.nombre\\\" required=\\\"true\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Apellidos-->\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.alumno.form.apellidos\\\" for=\\\"apellidos\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"apellidos\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.apellidos\\\" required=\\\"true\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Créditos-->\\r\\n            <div class=\\\"col-sm-2\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.alumno.form.creditosdisponibles\\\" for=\\\"creditos\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"creditos\\\" type=\\\"number\\\" ng-model=\\\"ctrl.item.creditosDisponibles\\\" min=\\\"0\\\" max=\\\"{{ctrl.creditosMaximos}}\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Email-->\\r\\n            <div class=\\\"col-sm-4\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.alumno.form.email\\\" for=\\\"email\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"email\\\" type=\\\"email\\\" ng-model=\\\"ctrl.item.email\\\" required=\\\"true\\\" ng-disabled=\\\"ctrl.mode == \\'edit\\'\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Skype-->\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.alumno.form.skype\\\" for=\\\"skype\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"skype\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.skype\\\" required=\\\"true\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Teléfono móvil-->\\r\\n            <div class=\\\"col-sm-2\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.empresa.form.telefonomovil\\\" for=\\\"telefonoMovil\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"telefonoMovil\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.telefonoMovil\\\" required=\\\"true\\\" maxlength=\\\"20\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Observaciones-->\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <text-area label=\\\"admin.empresa.form.observaciones\\\" model=\\\"ctrl.item.observaciones\\\" id=\\\"observaciones\\\"></text-area>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <!-- En caso de ser alumno sin empresa, pues se muestran los datos fiscales -->\\r\\n        <ng-include ng-if=\\\"!ctrl.empresa\\\" src=\\\"\\'app/admin/datosfacturacion/datos-facturacion.form.html\\'\\\"></ng-include>\\r\\n\\r\\n        <!--Botones-->\\r\\n        <buttons can-save=\\\"ctrl.canSave\\\" mode=\\\"ctrl.mode\\\"></buttons>\\r\\n    </div>\\r\\n</form>\\r\\n\\r\\n\");\n$templateCache.put(\"app/admin/alumno/alumno-list.admin.html\",\"<h1>{{ctrl.empresa.nombre}}</h1>\\r\\n\\r\\n<div ng-if=\\\"ctrl.empresaId\\\" class=\\\"btn-ctrl\\\">\\r\\n    <a class=\\\"btn btn-primary btn-crear\\\" ui-sref=\\\"admin/empresa/alumno/create({empresaId: ctrl.empresaId})\\\">\\r\\n        <span translate=\\\"admin.alumno.create.title\\\"></span>\\r\\n    </a>\\r\\n</div>\\r\\n\\r\\n<div ng-if=\\\"ctrl.empresaId && !ctrl.empty\\\" class=\\\"btn-ctrl\\\">\\r\\n    <a class=\\\"btn btn-default btn-crear\\\" ng-click=\\\"ctrl.empresaAlumnosExcel(ctrl.empresaId)\\\">\\r\\n        <span translate=\\\"admin.empresa.generarexcel\\\"></span>\\r\\n    </a>\\r\\n</div>\\r\\n\\r\\n<!--<div ng-if=\\\"!ctrl.empresaId\\\" class=\\\"btn-ctrl\\\">-->\\r\\n<!--<a class=\\\"btn btn-default btn-crear\\\" ng-click=\\\"ctrl.filter.eliminado = !ctrl.filter.eliminado\\\">-->\\r\\n<!--<span ng-if=\\\"!ctrl.filter.eliminado\\\" translate=\\\"admin.alumno.vereliminados\\\"></span>-->\\r\\n<!--<span ng-if=\\\"ctrl.filter.eliminado\\\" translate=\\\"admin.alumno.veractivos\\\"></span>-->\\r\\n<!--</a>-->\\r\\n<!--</div>-->\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <filter filter=\\\"ctrl.filter.key\\\"></filter>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <usuario-gestion-eliminados filter=\\\"ctrl.filter\\\"></usuario-gestion-eliminados>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"empty\\\" ng-show=\\\"ctrl.empty\\\" translate=\\\"admin.alumno.empty\\\"></div>\\r\\n\\r\\n<table ng-show=\\\"!ctrl.empty\\\" ng-table=\\\"ctrl.tableParams\\\" class=\\\"table table-condensed table-bordered table-striped table-hover\\\" class=\\\"ng-cloak\\\">\\r\\n\\r\\n    <tr ng-repeat=\\\"element in $data track by element.id\\\" class=\\\"animate\\\">\\r\\n        <td data-title=\\\"\\'admin.alumno.form.nombre\\' | translate\\\" sortable=\\\"\\'nombre\\'\\\">\\r\\n            <a ng-if=\\\"element.empresa == null\\\" ui-sref=\\\"admin/alumno/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.nombre}} {{element.apellidos}}\\r\\n            </a>\\r\\n            <a ng-if=\\\"element.empresa != null\\\" ui-sref=\\\"admin/empresa/alumno/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.nombre}} {{element.apellidos}}\\r\\n            </a>\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.alumno.form.email\\' | translate\\\" sortable=\\\"\\'email\\'\\\">\\r\\n            <a ng-if=\\\"element.empresa == null\\\" ui-sref=\\\"admin/alumno/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.email}}\\r\\n            </a>\\r\\n            <a ng-if=\\\"element.empresa != null\\\" ui-sref=\\\"admin/empresa/alumno/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.email}}\\r\\n            </a>\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.alumno.form.login\\' | translate\\\" sortable=\\\"\\'login\\'\\\" ng-if=\\\"false\\\">\\r\\n            {{element.login}}\\r\\n        </td>\\r\\n\\r\\n        <td class=\\\"text-center col-fecha\\\" data-title=\\\"\\'admin.alumno.form.fecharegistro\\' | translate\\\" sortable=\\\"\\'fechaRegistro\\'\\\">\\r\\n            <date model=\\\"element.fechaRegistro\\\"></date>\\r\\n        </td>\\r\\n\\r\\n        <td class=\\\"text-center col-fecha\\\" data-title=\\\"\\'admin.alumno.form.fechaultimoacceso\\' | translate\\\" sortable=\\\"\\'fechaUltimoAcceso\\'\\\">\\r\\n            <date model=\\\"element.fechaUltimoAcceso\\\"></date>\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.alumno.form.creditostotales\\' | translate\\\" sortable=\\\"\\'creditosTotales\\'\\\" class=\\\"text-center col-sm-1\\\">\\r\\n            {{element.creditosTotales}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.alumno.form.creditosdisponibles\\' | translate\\\" sortable=\\\"\\'creditosDisponibles\\'\\\" class=\\\"text-center col-sm-1\\\">\\r\\n            {{element.creditosDisponibles}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.alumno.form.creditosconsumidos\\' | translate\\\" sortable=\\\"\\'creditosConsumidos\\'\\\" class=\\\"text-center col-sm-1\\\">\\r\\n            {{element.creditosConsumidos}}\\r\\n        </td>\\r\\n\\r\\n        <td class=\\\"col-md-1 text-center button-icons\\\">\\r\\n            <usuario-gestion-columna table-params=\\\"ctrl.tableParams\\\" element=\\\"element\\\" entidad=\\\"{{ctrl.estadoEditar}}\\\"></usuario-gestion-columna>\\r\\n        </td>\\r\\n    </tr>\\r\\n</table>\\r\\n<loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n\");\n$templateCache.put(\"app/admin/capacidad/capacidad-form.admin.html\",\"<form name=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.save()\\\" novalidate>\\r\\n    <div class=\\\"form-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Nombre-->\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.capacidad.form.nombre\\\" for=\\\"nombre\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"nombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.nombre\\\" required>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!--Botones-->\\r\\n        <buttons can-save=\\\"ctrl.canSave\\\" mode=\\\"ctrl.mode\\\"></buttons>\\r\\n    </div>\\r\\n</form>\\r\\n\");\n$templateCache.put(\"app/admin/configuracion/configuracion.html\",\"<form class=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"ctrl.save()\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label-form key=\\\"admin.configuracion.iva\\\" for=\\\"iva\\\" required=\\\"true\\\"></label-form>\\r\\n        <input class=\\\"form-control\\\" id=\\\"iva\\\" ng-model=\\\"ctrl.configuracion.iva\\\" type=\\\"number\\\" required>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label-form key=\\\"admin.configuracion.tiempomaximorespuesta\\\" for=\\\"tiempoMaximoRespuesta\\\" required=\\\"true\\\"></label-form>\\r\\n        <input class=\\\"form-control\\\" id=\\\"tiempoMaximoRespuesta\\\" ng-model=\\\"ctrl.configuracion.tiempoMaximoRespuesta\\\" type=\\\"number\\\" required>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label-form key=\\\"admin.configuracion.tiempoantesiniciocancelar\\\" for=\\\"tiempoAntesInicioCancelar\\\" required=\\\"true\\\"></label-form>\\r\\n        <input class=\\\"form-control\\\" id=\\\"tiempoAntesInicioCancelar\\\" ng-model=\\\"ctrl.configuracion.tiempoAntesInicioCancelar\\\" type=\\\"number\\\" required>\\r\\n    </div>\\r\\n\\r\\n    <!--<div class=\\\"form-group\\\">-->\\r\\n    <!--<label for=\\\"tiempoMaximoActualizarIncidencia\\\"-->\\r\\n    <!--translate=\\\"admin.configuracion.tiempomaximoactualizarincidencia\\\"></label>-->\\r\\n    <!--<input class=\\\"form-control\\\" id=\\\"tiempoMaximoActualizarIncidencia\\\"-->\\r\\n    <!--ng-model=\\\"ctrl.configuracion.tiempoMaximoActualizarIncidencia\\\" type=\\\"number\\\" required/>-->\\r\\n    <!--</div>-->\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label-form key=\\\"admin.configuracion.correoNotificaciones\\\" for=\\\"correoNotificaciones\\\" required=\\\"true\\\"></label-form>\\r\\n        <input class=\\\"form-control\\\" id=\\\"correoNotificaciones\\\" ng-model=\\\"ctrl.configuracion.correoNotificaciones\\\" type=\\\"email\\\" required>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\" align=\\\"right\\\">\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\r\\n            <span class=\\\"glyphicon glyphicon-ok\\\"></span>&nbsp;<span translate=\\\"global.button.accept\\\"></span>\\r\\n        </button>\\r\\n    </div>\\r\\n</form>\\r\\n\");\n$templateCache.put(\"app/admin/datosfacturacion/datos-facturacion.form.html\",\"<!-- Datos fiscales -->\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <h4>{{\\'admin.datosfacturacion.title\\' | translate}}</h4>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Nombre-->\\r\\n    <div class=\\\"col-sm-9\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.nombre\\\" for=\\\"dfnombre\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfnombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.nombre\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--CIF-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.cifnif\\\" for=\\\"dfcif\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfcif\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.nif\\\" maxlength=\\\"20\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Provincia-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.provincia\\\" for=\\\"dfprovincia\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfprovincia\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.provincia\\\" maxlength=\\\"50\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Localidad-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.localidad\\\" for=\\\"dflocalidad\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dflocalidad\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.localidad\\\" maxlength=\\\"50\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--CP-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.cp\\\" for=\\\"dfcp\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfcp\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.codigoPostal\\\" maxlength=\\\"10\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Dirección-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.direccion\\\" for=\\\"dfdireccion\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfdireccion\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.direccion\\\" maxlength=\\\"500\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/admin/empresa/empresa-form.admin.html\",\"<form name=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.save()\\\" novalidate>\\r\\n    <div class=\\\"form-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Email-->\\r\\n            <div class=\\\"col-sm-4\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.empresa.form.email\\\" for=\\\"email\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"email\\\" type=\\\"email\\\" ng-model=\\\"ctrl.item.email\\\" required=\\\"true\\\" ng-disabled=\\\"ctrl.mode == \\'edit\\'\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Nombre-->\\r\\n            <div class=\\\"col-sm-4\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.empresa.form.nombre\\\" for=\\\"nombre\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"nombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.nombre\\\" required=\\\"true\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Teléfono móvil-->\\r\\n            <div class=\\\"col-sm-2\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.empresa.form.telefonomovil\\\" for=\\\"telefonoMovil\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"telefonoMovil\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.telefonoMovil\\\" required=\\\"true\\\" maxlength=\\\"20\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Créditos-->\\r\\n            <div class=\\\"col-sm-2\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.empresa.form.creditosdisponibles\\\" for=\\\"creditos\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"creditos\\\" type=\\\"number\\\" ng-model=\\\"ctrl.item.creditosDisponibles\\\" min=\\\"0\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--&lt;!&ndash;Fecha de caducidad&ndash;&gt;-->\\r\\n            <!--<div class=\\\"col-sm-3\\\">-->\\r\\n            <!--<div class=\\\"form-group\\\">-->\\r\\n            <!--<date-picker id=\\\"caducidad\\\" model=\\\"ctrl.item.caducidad\\\"-->\\r\\n            <!--label=\\\"admin.empresa.form.fechacaducidad\\\" required=\\\"true\\\"-->\\r\\n            <!--options=\\\"{minDate: \\'today\\', maxDate: \\'\\', datepickerMode: \\'day\\'}\\\">-->\\r\\n            <!--</date-picker>-->\\r\\n            <!--</div>-->\\r\\n            <!--</div>-->\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Observaciones-->\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <text-area label=\\\"admin.empresa.form.observaciones\\\" model=\\\"ctrl.item.observaciones\\\" id=\\\"observaciones\\\"></text-area>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <ng-include src=\\\"\\'app/admin/datosfacturacion/datos-facturacion.form.html\\'\\\"></ng-include>\\r\\n\\r\\n        <!--Botones-->\\r\\n        <buttons can-save=\\\"ctrl.canSave\\\" mode=\\\"ctrl.mode\\\"></buttons>\\r\\n    </div>\\r\\n</form>\\r\\n\\r\\n\");\n$templateCache.put(\"app/admin/empresa/empresa-list.admin.html\",\"<div class=\\\"btn-ctrl\\\">\\r\\n    <a class=\\\"btn btn-primary btn-crear\\\" ui-sref=\\\"admin/empresa/create\\\">\\r\\n        <span translate=\\\"admin.empresa.create.title\\\"></span>\\r\\n    </a>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"btn-ctrl\\\">\\r\\n    <a class=\\\"btn btn-default btn-crear\\\" ng-click=\\\"ctrl.empresasExcel()\\\">\\r\\n        <span translate=\\\"admin.empresa.generarexcel\\\"></span>\\r\\n    </a>\\r\\n</div>\\r\\n\\r\\n<usuario-gestion-eliminados filter=\\\"ctrl.filter\\\"></usuario-gestion-eliminados>\\r\\n\\r\\n<div class=\\\"empty\\\" ng-show=\\\"ctrl.empty\\\" translate=\\\"admin.empresa.empty\\\"></div>\\r\\n\\r\\n<table ng-show=\\\"!ctrl.empty\\\" ng-table=\\\"ctrl.tableParams\\\" class=\\\"table table-condensed table-bordered table-striped table-hover\\\" class=\\\"ng-cloak\\\">\\r\\n\\r\\n    <tr ng-repeat=\\\"element in $data track by element.id\\\" class=\\\"animate\\\">\\r\\n        <td data-title=\\\"\\'admin.datosfacturacion.nombre\\' | translate\\\">\\r\\n            <a ui-sref=\\\"admin/empresa/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.datosFacturacion.nombre}}\\r\\n            </a>\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.datosfacturacion.cifnif\\' | translate\\\">\\r\\n            <a ui-sref=\\\"admin/empresa/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.datosFacturacion.nif}}\\r\\n            </a>\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.empresa.form.email\\' | translate\\\" sortable=\\\"\\'email\\'\\\">\\r\\n            <a ui-sref=\\\"admin/empresa/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.email}}\\r\\n            </a>\\r\\n        </td>\\r\\n\\r\\n        <td class=\\\"text-center col-fecha\\\" data-title=\\\"\\'admin.empresa.form.fecharegistro\\' | translate\\\" sortable=\\\"\\'fechaRegistro\\'\\\">\\r\\n            <date model=\\\"element.fechaRegistro\\\"></date>\\r\\n        </td>\\r\\n\\r\\n        <td class=\\\"text-center col-fecha\\\" data-title=\\\"\\'admin.empresa.form.fechaultimoacceso\\' | translate\\\" sortable=\\\"\\'fechaUltimoAcceso\\'\\\">\\r\\n            <date model=\\\"element.fechaUltimoAcceso\\\"></date>\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.empresa.form.creditostotales\\' | translate\\\" sortable=\\\"\\'creditosTotales\\'\\\" class=\\\"text-center col-sm-1\\\">\\r\\n            {{element.creditosTotales}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.empresa.form.creditosdisponibles\\' | translate\\\" sortable=\\\"\\'creditosDisponibles\\'\\\" class=\\\"text-center col-sm-1\\\">\\r\\n            {{element.creditosDisponibles}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.empresa.form.creditosdistribuidos\\' | translate\\\" sortable=\\\"\\'creditosDistribuidos\\'\\\" class=\\\"text-center col-sm-1\\\">\\r\\n            {{element.creditosDistribuidos}}\\r\\n        </td>\\r\\n\\r\\n        <!--<td class=\\\"text-center\\\" data-title=\\\"\\'admin.empresa.form.fechacaducidad\\' | translate\\\" sortable=\\\"\\'caducidad\\'\\\">\\r\\n            <date model=\\\"element.caducidad\\\"></date>\\r\\n        </td>-->\\r\\n\\r\\n        <td class=\\\"text-center button-icons col-icons-4\\\">\\r\\n            <a ui-sref=\\\"admin/empresa/alumno({empresaId: element.id})\\\" class=\\\"button glyphicon glyphicon-user\\\" title=\\\"{{\\'admin.alumno.list.title\\' | translate}}\\\"></a>\\r\\n            <usuario-gestion-columna table-params=\\\"ctrl.tableParams\\\" element=\\\"element\\\" entidad=\\\"empresa\\\"></usuario-gestion-columna>\\r\\n        </td>\\r\\n    </tr>\\r\\n</table>\\r\\n<loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n\");\n$templateCache.put(\"app/admin/estaticas/estatica-form.admin.html\",\"<form name=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.save()\\\" novalidate>\\r\\n    <div class=\\\"form-body\\\">\\r\\n\\r\\n        <h3>{{\\'estaticas.pagina.\\' + ctrl.estatica.nombre | translate}}</h3>\\r\\n\\r\\n        <uib-tabset active=\\\"ctrl.active\\\">\\r\\n            <uib-tab ng-repeat=\\\"idioma in ctrl.idiomas\\\" index=\\\"$index\\\" heading=\\\"{{\\'estaticas.idioma.\\' + idioma | translate}}\\\" ng-init=\\\"ctrl.init(ctrl.estatica, $index, idioma)\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <!--Título-->\\r\\n                    <div class=\\\"col-sm-12\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label-form key=\\\"estaticas.i18n.titulo\\\" required=\\\"true\\\"></label-form>\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" required ng-model=\\\"(ctrl.estatica.estaticasI18n | filter: {idioma: idioma})[0].titulo\\\">\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <!--Contenido-->\\r\\n                    <div class=\\\"col-sm-12\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label-form key=\\\"estaticas.i18n.contenido\\\"></label-form>\\r\\n                            <text-area id=\\\"contenido-estaticas\\\" model=\\\"(ctrl.estatica.estaticasI18n | filter: {idioma: idioma})[0].contenido\\\" tipo=\\\"estatica\\\"></text-area>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </uib-tab>\\r\\n        </uib-tabset>\\r\\n\\r\\n        <buttons can-save=\\\"ctrl.canSave\\\" mode=\\\"ctrl.mode\\\"></buttons>\\r\\n    </div>\\r\\n</form>\\r\\n\");\n$templateCache.put(\"app/admin/login/login.html\",\"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-4 col-md-offset-4\\\">\\r\\n        <h1 translate=\\\"login.title\\\"></h1>\\r\\n        <form class=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"loginCtrl.login()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"login.form.username.label\\\" for=\\\"username\\\" required=\\\"true\\\"></label-form>\\r\\n                <input class=\\\"form-control\\\" id=\\\"username\\\" ng-model=\\\"loginCtrl.username\\\" type=\\\"text\\\" required>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"login.form.password.label\\\" for=\\\"password\\\" required=\\\"true\\\"></label-form>\\r\\n                <input class=\\\"form-control\\\" id=\\\"password\\\" ng-model=\\\"loginCtrl.password\\\" type=\\\"password\\\" required>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"rememberMe\\\" class=\\\"float-right\\\">\\r\\n                    <input checked=\\\"true\\\" id=\\\"rememberMe\\\" ng-model=\\\"loginCtrl.rememberMe\\\" type=\\\"checkbox\\\">\\r\\n                    {{\\'login.form.rememberme\\' | translate}}</label>\\r\\n            </div>\\r\\n            <button class=\\\"btn btn-primary\\\" translate=\\\"login.form.button\\\" type=\\\"submit\\\"></button>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/admin/paquetecreditos/paquetecreditos-form.admin.html\",\"<form name=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.save()\\\" novalidate>\\r\\n    <div class=\\\"form-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Créditos-->\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.paquetecreditos.form.creditos\\\" for=\\\"creditos\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"creditos\\\" type=\\\"number\\\" ng-model=\\\"ctrl.item.creditos\\\" required>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Coste-->\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.paquetecreditos.form.coste\\\" for=\\\"coste\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"coste\\\" type=\\\"number\\\" ng-model=\\\"ctrl.item.coste\\\" required>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!--Botones-->\\r\\n        <buttons can-save=\\\"ctrl.canSave\\\" mode=\\\"ctrl.mode\\\"></buttons>\\r\\n    </div>\\r\\n</form>\\r\\n\\r\\n\");\n$templateCache.put(\"app/admin/profesor/profesor-form.admin.html\",\"<form name=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.save()\\\" novalidate>\\r\\n    <div class=\\\"form-body\\\">\\r\\n\\r\\n        <!-- Datos personales -->\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <h4>{{\\'admin.profesor.form.datospersonales\\' | translate}}</h4>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Imagen de perfil-->\\r\\n            <div class=\\\"col-sm-4 form-group\\\">\\r\\n                <imagen-perfil ng-model=\\\"ctrl.item.imagen\\\" ruta-carpeta-imagen=\\\"upload/usuarios/{{ctrl.item.id}}/perfil\\\" on-remove-image=\\\"ctrl.onRemoveImage()\\\"></imagen-perfil>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Nombre-->\\r\\n            <div class=\\\"col-sm-4\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.profesor.form.nombre\\\" for=\\\"nombre\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"nombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.nombre\\\" required=\\\"true\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Apellidos-->\\r\\n            <div class=\\\"col-sm-4\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.profesor.form.apellidos\\\" for=\\\"apellidos\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"apellidos\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.apellidos\\\" required=\\\"true\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Email-->\\r\\n            <div class=\\\"col-sm-4\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.profesor.form.email\\\" for=\\\"email\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"email\\\" type=\\\"email\\\" ng-model=\\\"ctrl.item.email\\\" required=\\\"true\\\" ng-disabled=\\\"ctrl.mode == \\'edit\\'\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Skype-->\\r\\n            <div class=\\\"col-sm-3\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.profesor.form.skype\\\" for=\\\"skype\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"skype\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.skype\\\" required=\\\"true\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Teléfono móvil-->\\r\\n            <div class=\\\"col-sm-3\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.profesor.form.telefonomovil\\\" for=\\\"telefonoMovil\\\" required=\\\"true\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"telefonoMovil\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.telefonoMovil\\\" required=\\\"true\\\" maxlength=\\\"20\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--País de origen-->\\r\\n            <div class=\\\"col-sm-3\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <tesauro id=\\\"pais\\\" ng-model=\\\"ctrl.item.pais\\\" resource=\\\"ctrl.paisService\\\" method=\\\"query\\\" restricted=\\\"true\\\" multiple=\\\"false\\\" min-length=\\\"0\\\" label=\\\"admin.profesor.form.paisorigen\\\" eliminable=\\\"true\\\" parameters=\\\"{sortProperty: \\'nombre\\'}\\\" required=\\\"true\\\"></tesauro>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <!--Fecha de nacimiento-->\\r\\n            <div class=\\\"col-sm-3\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <date-picker id=\\\"fechanacimiento\\\" model=\\\"ctrl.item.fechaNacimiento\\\" label=\\\"admin.profesor.form.fechanacimiento\\\" required=\\\"true\\\" options=\\\"{max: \\'today\\', datepickerMode: \\'day\\'}\\\">\\r\\n                    </date-picker>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- Datos profesionales -->\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <h4>{{\\'admin.profesor.form.datosprofesionales\\' | translate}}</h4>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!--<div class=\\\"row\\\">-->\\r\\n        <!--&lt;!&ndash;Disponibilidad&ndash;&gt;-->\\r\\n        <!--<div class=\\\"col-sm-4\\\">-->\\r\\n        <!--<div class=\\\"form-group\\\">-->\\r\\n        <!--<enum-select id=\\\"disponibilidad\\\" label=\\\"admin.profesor.form.disponibilidad\\\" model=\\\"ctrl.item.disponibilidad\\\"-->\\r\\n        <!--options=\\\"ctrl.disponibilidades\\\" base=\\\"enum.disponibilidad\\\" required=\\\"true\\\"></enum-select>-->\\r\\n        <!--</div>-->\\r\\n        <!--</div>-->\\r\\n\\r\\n        <!--&lt;!&ndash;Otras capacidades&ndash;&gt;-->\\r\\n        <!--<div class=\\\"col-sm-8\\\">-->\\r\\n        <!--<div class=\\\"form-group\\\">-->\\r\\n        <!--&lt;!&ndash;<button-create click=\\\"ctrl.openCapacidadModal\\\"></button-create>&ndash;&gt;-->\\r\\n        <!--<multi-select label=\\\"admin.profesor.form.capacidades\\\" id=\\\"capacidades\\\" options=\\\"ctrl.capacidades\\\"-->\\r\\n        <!--model=\\\"ctrl.item.capacidades\\\"-->\\r\\n        <!--display=\\\"nombre\\\"-->\\r\\n        <!--template=\\\"\\'{{option.nombre}}\\'\\\"></multi-select>-->\\r\\n        <!--</div>-->\\r\\n        <!--</div>-->\\r\\n\\r\\n        <!--<div class=\\\"col-sm-4\\\">-->\\r\\n        <!--<div class=\\\"form-group\\\">-->\\r\\n        <!--<select-form id=\\\"zonasHorarias\\\" model=\\\"ctrl.item.zonaHoraria\\\"-->\\r\\n        <!--label=\\\"admin.profesor.form.zonahoraria\\\"-->\\r\\n        <!--options=\\\"ctrl.zonasHorarias\\\" display=\\\"gmt\\\" empty=\\\"multiselect.default\\\"-->\\r\\n        <!--required=\\\"true\\\"></select-form>-->\\r\\n        <!--</div>-->\\r\\n        <!--</div>-->\\r\\n        <!--</div>-->\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Idiomas y niveles del profesor-->\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <list-form label=\\\"admin.profesor.form.idiomas\\\" list=\\\"ctrl.item.idiomas\\\" resolve=\\\"{idiomaService: ctrl.idiomaService, niveles: ctrl.niveles}\\\" template-url=\\\"profesor.idiomas.html\\\"></list-form>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <script type=\\\"text/ng-template\\\" id=\\\"profesor.idiomas.html\\\">\\r\\n            <!--Idioma-->\\r\\n            <div class=\\\"col-sm-11\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <tesauro id=\\\"profesor_idioma_{{$index}}\\\" ng-model=\\\"element.idioma\\\"\\r\\n                             resource=\\\"ctrl.resolve.idiomaService\\\" method=\\\"findAll\\\"\\r\\n                             restricted=\\\"true\\\" multiple=\\\"false\\\" min-length=\\\"0\\\"\\r\\n                             label=\\\"admin.profesor.form.idioma\\\" eliminable=\\\"true\\\"\\r\\n                             parameters=\\\"{sortProperty: \\'nombre\\'}\\\"></tesauro>\\r\\n                </div>\\r\\n            </div>\\r\\n            <!--Nivel-->\\r\\n            <!--<div class=\\\"col-sm-5\\\">-->\\r\\n            <!--<div class=\\\"form-group\\\">-->\\r\\n            <!--<multi-select label=\\\"admin.profesor.form.niveles\\\" id=\\\"idioma_nivel_{{$index}}\\\" options=\\\"ctrl.resolve.niveles\\\"-->\\r\\n            <!--model=\\\"element.niveles\\\" display=\\\"nombre\\\" template=\\\"\\'{{option.nombre}}\\'\\\">-->\\r\\n            <!--</multi-select>-->\\r\\n            <!--</div>-->\\r\\n            <!--</div>-->\\r\\n        </script>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Texto de presentación-->\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <text-area label=\\\"admin.profesor.form.textopresentacion\\\" model=\\\"ctrl.item.textoPresentacion\\\" id=\\\"textopresentacion\\\" required=\\\"true\\\"></text-area>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <!--Descripción de las capacidades-->\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"admin.profesor.form.descripcioncapacidades\\\" for=\\\"descripcionCapacidades\\\"></label-form>\\r\\n                    <input class=\\\"form-control\\\" id=\\\"descripcionCapacidades\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.descripcionCapacidades\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <ng-include src=\\\"\\'app/admin/datosfacturacion/datos-facturacion.form.html\\'\\\"></ng-include>\\r\\n\\r\\n        <!--Botones-->\\r\\n        <buttons can-save=\\\"ctrl.canSave\\\" mode=\\\"ctrl.mode\\\"></buttons>\\r\\n    </div>\\r\\n</form>\\r\\n\\r\\n\");\n$templateCache.put(\"app/admin/profesor/profesor-list.admin.html\",\"<div class=\\\"btn-ctrl\\\">\\r\\n    <a class=\\\"btn btn-primary btn-crear\\\" ui-sref=\\\"admin/profesor/create\\\">\\r\\n        <span translate=\\\"admin.profesor.create.title\\\"></span>\\r\\n    </a>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"btn-ctrl\\\">\\r\\n    <a class=\\\"btn btn-default btn-crear\\\" ng-click=\\\"ctrl.profesoresExcel()\\\">\\r\\n        <span translate=\\\"admin.profesor.generarexcel\\\"></span>\\r\\n    </a>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <filter filter=\\\"ctrl.filter.key\\\"></filter>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <usuario-gestion-eliminados filter=\\\"ctrl.filter\\\"></usuario-gestion-eliminados>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row form-group\\\">\\r\\n    <!--Meses-->\\r\\n    <div class=\\\"col-sm-offset-6 col-sm-4\\\">\\r\\n        <div class=\\\"form-inline\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"admin.profesor.list.meses\\\"></label-form>\\r\\n                <select id=\\\"months\\\" ng-model=\\\"ctrl.filter.mes\\\" class=\\\"form-control\\\">\\r\\n                    <option value=\\\"\\\" translate=\\\"enum.all\\\"></option>\\r\\n                    <option ng-repeat=\\\"month in ctrl.months\\\" value=\\\"{{month}}\\\">\\r\\n                        {{\\'enum.mes.\\' + month | translate}}\\r\\n                    </option>\\r\\n                </select>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <!--Años-->\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <div class=\\\"form-inline\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"admin.profesor.list.anos\\\"></label-form>\\r\\n                <select id=\\\"years\\\" ng-model=\\\"ctrl.filter.ano\\\" class=\\\"form-control\\\">\\r\\n                    <option value=\\\"\\\" translate=\\\"enum.all\\\"></option>\\r\\n                    <option ng-repeat=\\\"year in ctrl.years\\\" value=\\\"{{year}}\\\">{{year}}</option>\\r\\n                </select>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"empty\\\" ng-show=\\\"ctrl.empty\\\" translate=\\\"profesor.empty\\\"></div>\\r\\n\\r\\n<table ng-show=\\\"!ctrl.empty\\\" ng-table=\\\"ctrl.tableParams\\\" class=\\\"table table-condensed table-bordered table-striped table-hover\\\" class=\\\"ng-cloak\\\">\\r\\n\\r\\n    <tr ng-repeat=\\\"element in $data track by element.id\\\" class=\\\"animate\\\">\\r\\n        <td data-title=\\\"\\'admin.profesor.form.nombre\\' | translate\\\" sortable=\\\"\\'nombre\\'\\\">\\r\\n            <a ui-sref=\\\"admin/profesor/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.nombre}} {{element.apellidos}}\\r\\n            </a>\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.profesor.form.email\\' | translate\\\" sortable=\\\"\\'email\\'\\\">\\r\\n            <a ui-sref=\\\"admin/profesor/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.email}}\\r\\n            </a>\\r\\n        </td>\\r\\n\\r\\n        <td class=\\\"text-center col-fecha\\\" data-title=\\\"\\'admin.profesor.form.fecharegistro\\' | translate\\\" sortable=\\\"\\'fechaRegistro\\'\\\">\\r\\n            <date model=\\\"element.fechaRegistro\\\"></date>\\r\\n        </td>\\r\\n\\r\\n        <td class=\\\"text-center col-fecha\\\" data-title=\\\"\\'admin.profesor.form.fechaultimoacceso\\' | translate\\\" sortable=\\\"\\'fechaUltimoAcceso\\'\\\">\\r\\n            <date model=\\\"element.fechaUltimoAcceso\\\"></date>\\r\\n        </td>\\r\\n\\r\\n\\r\\n        <td data-title=\\\"\\'admin.profesor.form.clasesimpartidas\\' | translate\\\" align=\\\"center\\\">\\r\\n            {{element.clasesImpartidas}}\\r\\n        </td>\\r\\n\\r\\n        <td class=\\\"text-center button-icons col-icons-4\\\">\\r\\n            <a ui-sref=\\\"admin/profesor/agenda({usuarioId: element.id, mes:ctrl.filter.mes})\\\" class=\\\"button glyphicon glyphicon-eur\\\" title=\\\"{{\\'admin.profesor.list.agenda\\' | translate}}\\\"></a>\\r\\n\\r\\n            <usuario-gestion-columna table-params=\\\"ctrl.tableParams\\\" element=\\\"element\\\" entidad=\\\"profesor\\\"></usuario-gestion-columna>\\r\\n        </td>\\r\\n    </tr>\\r\\n</table>\\r\\n<loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n\");\n$templateCache.put(\"app/admin/reserva/reserva-list.html\",\"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <enum-select id=\\\"estado\\\" label=\\\"reserva.form.estado\\\" model=\\\"ctrl.filter.estado\\\" options=\\\"ctrl.estados\\\" base=\\\"enum.estado\\\" empty=\\\"multiselect.todos\\\" required=\\\"false\\\"></enum-select>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"empty\\\" ng-show=\\\"ctrl.empty\\\" translate=\\\"reserva.empty\\\"></div>\\r\\n\\r\\n<table ng-show=\\\"!ctrl.empty\\\" ng-table=\\\"ctrl.tableParams\\\" class=\\\"table table-condensed table-bordered table-striped table-hover\\\" class=\\\"ng-cloak\\\">\\r\\n    <tr ng-repeat=\\\"element in $data track by element.id\\\" class=\\\"animate\\\">\\r\\n        <td data-title=\\\"\\'reserva.form.fechainicio\\' | translate\\\" sortable=\\\"\\'fecha\\'\\\" align=\\\"center\\\">\\r\\n            <date model=\\\"element.fecha\\\"></date>\\r\\n        </td>\\r\\n        <td data-title=\\\"\\'reserva.form.estado\\' | translate\\\" sortable=\\\"\\'estado\\'\\\">\\r\\n            {{\\'enum.estado.\\' + element.estado | translate}}\\r\\n        </td>\\r\\n        <td data-title=\\\"\\'global.profesor\\' | translate\\\" sortable=\\\"\\'profesor.email\\'\\\">\\r\\n            <span ng-if=\\\"element.profesor.email\\\">{{element.profesor.email}}</span>\\r\\n        </td>\\r\\n        <td data-title=\\\"\\'reserva.motivo.profesor.title\\' | translate\\\" sortable=\\\"\\'motivoProfesor\\'\\\">\\r\\n            <span ng-if=\\\"element.motivoProfesor\\\">{{element.motivoProfesor}}</span>\\r\\n        </td>\\r\\n        <td data-title=\\\"\\'global.alumno\\' | translate\\\" sortable=\\\"\\'alumno.email\\'\\\">\\r\\n            <span ng-if=\\\"element.alumno.email\\\">{{element.alumno.email}}</span>\\r\\n        </td>\\r\\n        <td data-title=\\\"\\'reserva.motivo.alumno.title\\' | translate\\\" sortable=\\\"\\'motivoAlumno\\'\\\">\\r\\n            <span ng-if=\\\"element.motivoAlumno\\\">{{element.motivoAlumno}}</span>\\r\\n        </td>\\r\\n        <td ng-if=\\\"ctrl.titulo === \\'reserva.norevisadas\\'\\\" data-title=\\\"\\'reserva.creditos.devolver\\' | translate\\\" class=\\\"col-md-1 text-center button-icons\\\">\\r\\n            <a ng-click=\\\"ctrl.devolver(element.id)\\\" class=\\\"button glyphicon glyphicon-ok\\\" title=\\\"{{\\'reserva.creditos.aceptar\\' | translate}}\\\"></a>\\r\\n            <a ng-click=\\\"ctrl.rechazar(element.id)\\\" class=\\\"button glyphicon glyphicon-remove\\\" title=\\\"{{\\'reserva.creditos.rechazar\\' | translate}}\\\"></a>\\r\\n        </td>\\r\\n    </tr>\\r\\n</table>\\r\\n<loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n\");\n$templateCache.put(\"app/components/breadcrumb/breadcrumb.html\",\"<ol class=\\\"breadcrumb\\\" ng-show=\\\"steps.length\\\">\\r\\n    <li ng-repeat=\\\"step in steps\\\" ng-class=\\\"{active: $last}\\\" ng-switch=\\\"$last || !!step.abstract\\\">\\r\\n        <a ng-switch-when=\\\"false\\\" href=\\\"{{step.ncyBreadcrumbLink}}\\\">{{step.ncyBreadcrumbLabel | translate}}</a>\\r\\n        <span ng-switch-when=\\\"true\\\">{{step.ncyBreadcrumbLabel | translate}}</span>\\r\\n    </li>\\r\\n</ol>\\r\\n\");\n$templateCache.put(\"app/components/idiomas/idiomas.html\",\"<div id=\\\"idiomas\\\">\\r\\n    <a ng-class=\\\"{\\'idioma\\': true, \\'seleccionado\\': ctrl.lang == \\'es\\'}\\\" ng-click=\\\"ctrl.changeLanguage(\\'es\\')\\\">{{\\'idiomas.es\\' | translate}}</a> |\\r\\n    <a ng-class=\\\"{\\'idioma\\': true, \\'seleccionado\\': ctrl.lang == \\'en\\'}\\\" ng-click=\\\"ctrl.changeLanguage(\\'en\\')\\\">{{\\'idiomas.en\\' | translate}}</a>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/menu/menu-item.html\",\"<li ng-class=\\\"{divider: leaf.label == \\'divider\\'}\\\" ui-sref-active=\\\"active\\\">\\r\\n\\r\\n    <a ng-if=\\\"leaf.label !== \\'divider\\' && !leaf.state && !leaf.link\\\">\\r\\n        <ng-include src=\\\"\\'menuItemContent.html\\'\\\"></ng-include>\\r\\n    </a>\\r\\n\\r\\n    <a ui-sref=\\\"{{leaf.state}}\\\" ng-if=\\\"leaf.state && leaf.label !== \\'divider\\'\\\">\\r\\n        <ng-include src=\\\"\\'menuItemContent.html\\'\\\"></ng-include>\\r\\n    </a>\\r\\n\\r\\n    <a href=\\\"{{leaf.link}}\\\" ng-if=\\\"leaf.link && leaf.label !== \\'divider\\'\\\">\\r\\n        <ng-include src=\\\"\\'menuItemContent.html\\'\\\"></ng-include>\\r\\n    </a>\\r\\n</li>\\r\\n\");\n$templateCache.put(\"app/components/menu/menu.html\",\"<script type=\\\"text/ng-template\\\" id=\\\"menuContent.html\\\">\\r\\n    <span class=\\\"{{leaf.icon}}\\\"></span>\\r\\n    <span>\\r\\n        <span translate>\\r\\n            {{leaf.label}}\\r\\n        </span>\\r\\n        <b ng-if=\\\"leaf.subtree\\\" class=\\\"caret\\\"></b>\\r\\n    </span>\\r\\n</script>\\r\\n\\r\\n<script type=\\\"text/ng-template\\\" id=\\\"menuItemContent.html\\\">\\r\\n    <span class=\\\"{{leaf.icon}}\\\"></span>\\r\\n    <span translate>\\r\\n        {{leaf.label}}\\r\\n    </span>\\r\\n</script>\\r\\n\\r\\n<script type=\\\"text/ng-template\\\" id=\\\"menuElementsContent.html\\\">\\r\\n    <ul ng-class=\\\"!$ctrl.lateral ? \\'nav navbar-nav navbar-right\\' : \\'list-group\\'\\\" class=\\\"menu\\\">\\r\\n        <li\\r\\n            uib-dropdown\\r\\n            ui-sref-active=\\\"active\\\"\\r\\n            ng-repeat=\\\"leaf in $ctrl.menu\\\"\\r\\n            ng-class=\\\"{\\'divider-vertical\\': leaf.label == \\'divider\\',\\r\\n                \\'active\\': leaf.actives && $ctrl.checkActiveStates(leaf.actives),\\r\\n                \\'list-group-item\\' : $ctrl.lateral,\\r\\n                \\'{{leaf.class}}\\' : true}\\\"\\r\\n            has-any-authority-or-state\\r\\n            authorities=\\\"leaf.authorities\\\"\\r\\n            states=\\\"leaf.states\\\">\\r\\n\\r\\n            <a ng-if=\\\"leaf.componente\\\" compile=\\\"leaf.componente\\\"></a>\\r\\n\\r\\n            <!--Ventana modal-->\\r\\n            <a ng-if=\\\"leaf.modal\\\" ng-click=\\\"$ctrl.modal(leaf.modal)\\\">\\r\\n                <ng-include src=\\\"\\'menuContent.html\\'\\\"></ng-include>\\r\\n            </a>\\r\\n\\r\\n            <!--Dropdown-->\\r\\n            <a ng-if=\\\"leaf.label !== \\'divider\\' && leaf.subtree && !leaf.link && !leaf.modal\\\"\\r\\n               uib-dropdown-toggle>\\r\\n                <ng-include src=\\\"\\'menuContent.html\\'\\\"></ng-include>\\r\\n            </a>\\r\\n\\r\\n            <!--Estado-->\\r\\n            <a ng-if=\\\"leaf.label !== \\'divider\\' && leaf.state && !leaf.subtree\\\"\\r\\n               ui-sref=\\\"{{leaf.state}}\\\" ng-click=\\\"$ctrl.collapse()\\\">\\r\\n                <ng-include src=\\\"\\'menuContent.html\\'\\\"></ng-include>\\r\\n            </a>\\r\\n\\r\\n            <!--Enlace-->\\r\\n            <a ng-if=\\\"leaf.label !== \\'divider\\' && leaf.link && !leaf.subtree\\\"\\r\\n               href=\\\"{{leaf.link}}\\\" ng-click=\\\"$ctrl.collapse()\\\">\\r\\n                <ng-include src=\\\"\\'menuContent.html\\'\\\"></ng-include>\\r\\n            </a>\\r\\n\\r\\n            <submenu ng-if=\\\"leaf.subtree\\\" menu=\\\"leaf.subtree\\\"></submenu>\\r\\n        </li>\\r\\n    </ul>\\r\\n</script>\\r\\n\\r\\n<nav class=\\\"navbar\\\" role=\\\"navigation\\\" ng-class=\\\"$root.isAdmin ? \\'navbar-default\\' : \\'navbar-inverse\\'\\\" ng-if=\\\"!$ctrl.lateral\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"navbar-header\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"navbar-toggle\\\" ng-click=\\\"$ctrl.collapse()\\\">\\r\\n                <span class=\\\"sr-only\\\">Toggle navigation</span>\\r\\n                <span class=\\\"icon-bar\\\"></span>\\r\\n                <span class=\\\"icon-bar\\\"></span>\\r\\n                <span class=\\\"icon-bar\\\"></span>\\r\\n            </button>\\r\\n\\r\\n            <a ng-if=\\\"$root.isAdmin\\\" class=\\\"navbar-brand\\\">\\r\\n                <span translate=\\\"admin.title\\\"></span>\\r\\n            </a>\\r\\n        </div>\\r\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbar-collapse\\\" uib-collapse=\\\"$ctrl.navCollapsed\\\">\\r\\n            <ng-include src=\\\"\\'menuElementsContent.html\\'\\\"></ng-include>\\r\\n        </div>\\r\\n    </div>\\r\\n</nav>\\r\\n\\r\\n<div ng-if=\\\"$ctrl.lateral\\\">\\r\\n    <ng-include src=\\\"\\'menuElementsContent.html\\'\\\"></ng-include>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/menu/submenu.html\",\"<ul class=\\\"dropdown-menu\\\">\\r\\n    <menu-item ng-repeat=\\\"leaf in menu\\\" leaf=\\\"leaf\\\">\\r\\n    </menu-item>\\r\\n</ul>\\r\\n\");\n$templateCache.put(\"app/components/modal/entity.modal.html\",\"<div>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-hidden=\\\"true\\\" ng-click=\\\"ctrl.dismiss()\\\">&times;</button>\\r\\n        <h4 class=\\\"modal-title\\\" translate=\\\"{{ctrl.resolve.title}}\\\"></h4>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <alert modal=\\\"true\\\"></alert>\\r\\n\\r\\n        <div compile=\\\"ctrl.resolve.component\\\"></div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/pagination/pagination.html\",\"<ul uib-pagination total-items=\\\"ctrl.totalElements\\\" ng-model=\\\"ctrl.currentPage\\\" ng-change=\\\"ctrl.pageChanged()\\\" items-per-page=\\\"ctrl.itemsPerPage\\\" previous-text=\\\"{{\\'global.pagination.previous\\' | translate}}\\\" next-text=\\\"{{\\'global.pagination.next\\' | translate}}\\\" ng-if=\\\"ctrl.itemsPerPage < ctrl.totalElements\\\"></ul>\\r\\n\");\n$templateCache.put(\"app/components/reserva/reserva.modal.html\",\"<form name=\\\"form\\\" ng-submit=\\\"ctrl.confirm(ctrl.item)\\\">\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-hidden=\\\"true\\\" ng-click=\\\"ctrl.dismiss()\\\">&times;</button>\\r\\n        <h4 class=\\\"modal-title\\\" translate=\\\"reserva.info\\\"></h4>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <alert modal=\\\"true\\\"></alert>\\r\\n\\r\\n        <p translate=\\\"{{ctrl.params.body}}\\\" translate-values=\\\"{id: \\'{{::ctrl.item[ctrl.params.property]}}\\'}\\\"></p>\\r\\n\\r\\n        <usuario-reserva usuario=\\\"ctrl.usuarioModal\\\" reserva=\\\"ctrl.item\\\"></usuario-reserva>\\r\\n\\r\\n        <div ng-if=\\\"ctrl.parametros.estadobd == null\\\">\\r\\n            <label-form key=\\\"reserva.creditos.disponibles\\\" sufijo=\\\":\\\"></label-form>\\r\\n            <span>{{ctrl.parametros.creditosDisponibles}}</span>\\r\\n        </div>\\r\\n\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-default btn-block\\\" ng-click=\\\"isCollapsed = !isCollapsed\\\" ng-show=\\\"ctrl.parametros.estadobd != null && ctrl.mostrar\\\" ng-init=\\\"ctrl.mostrar=false\\\">\\r\\n            <span ng-if=\\\"ctrl.tipo == ctrl.tipos.SIN_CONTESTAR\\\" translate=\\\"reserva.contestar\\\"></span>\\r\\n            <span ng-if=\\\"ctrl.tipo == ctrl.tipos.CANCELAR_PROFESOR || ctrl.tipo == ctrl.tipos.CANCELAR_ALUMNO\\\" translate=\\\"reserva.cancelar\\\"></span>\\r\\n            <span ng-if=\\\"ctrl.tipo == ctrl.tipos.RESPONDER_PROFESOR\\r\\n            || ctrl.tipo == ctrl.tipos.RESPONDER_ALUMNO\\r\\n            || ctrl.tipo == ctrl.tipos.RESPONDER_ALUMNO_PENDIENTE\\\" translate=\\\"reserva.evaluar\\\"></span>\\r\\n        </button>\\r\\n        <div uib-collapse=\\\"!isCollapsed\\\" class=\\\"gestionar-reserva\\\">\\r\\n            <div class=\\\"well well-lg\\\">\\r\\n\\r\\n                <!-- Profesor que contesta a una reserva -->\\r\\n\\r\\n                <div ng-if=\\\"ctrl.tipo == ctrl.tipos.SIN_CONTESTAR\\\" ng-init=\\\"ctrl.parametros.estado=\\'CONFIRMADA\\'; ctrl.mostrar=true\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label class=\\\"radio-inline\\\"><input type=\\\"radio\\\" ng-model=\\\"ctrl.parametros.estado\\\" value=\\\"CONFIRMADA\\\">{{\\'reserva.acciones.confirmar\\' | translate}}</label>\\r\\n                        <label class=\\\"radio-inline\\\"><input type=\\\"radio\\\" ng-model=\\\"ctrl.parametros.estado\\\" value=\\\"RECHAZADA\\\">{{\\'reserva.acciones.rechazar\\' | translate}}</label>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <div ng-if=\\\"ctrl.tipo == ctrl.tipos.SIN_CONTESTAR\\\" uib-collapse=\\\"ctrl.parametros.estado == \\'CONFIRMADA\\'\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <span ng-bind-html=\\\"\\'reserva.motivo.profesor.rechazo\\' | translate\\\"></span>\\r\\n                        <textarea class=\\\"form-control\\\" id=\\\"motivoRechazo\\\" ng-model=\\\"ctrl.parametros.motivoProfesor\\\" ng-required=\\\"ctrl.parametros.estado == \\'RECHAZADA\\'\\\"></textarea>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <!-- Profesor o alumno que cancelan una reserva -->\\r\\n\\r\\n                <div ng-if=\\\"ctrl.tipo == ctrl.tipos.CANCELAR_PROFESOR\\\" ng-init=\\\"ctrl.parametros.estado=\\'CANCELADA_POR_PROFESOR\\'; ctrl.mostrar=true\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <span ng-bind-html=\\\"\\'reserva.motivo.profesor.cancelacion\\' | translate\\\"></span>\\r\\n                        <textarea class=\\\"form-control\\\" id=\\\"motivoCancelacion\\\" ng-model=\\\"ctrl.parametros.motivoProfesor\\\" required></textarea>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <div ng-if=\\\"ctrl.tipo == ctrl.tipos.CANCELAR_ALUMNO\\\" ng-init=\\\"ctrl.parametros.estado=\\'CANCELADA_POR_ALUMNO\\'; ctrl.mostrar=true\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <span ng-bind-html=\\\"\\'reserva.motivo.alumno.cancelacion\\' | translate\\\"></span>\\r\\n                        <textarea class=\\\"form-control\\\" id=\\\"motivoCancelacionAlumno\\\" ng-model=\\\"ctrl.parametros.motivoAlumno\\\" required></textarea>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <!-- Profesor indica si la clase se llevó a cabo o no -->\\r\\n\\r\\n                <div ng-if=\\\"ctrl.tipo == ctrl.tipos.RESPONDER_PROFESOR\\\" ng-init=\\\"ctrl.parametros.estado=\\'REALIZADA\\'; ctrl.mostrar=true; console.log(\\'INIT ESTADO REALIZADA\\');\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label class=\\\"radio-inline\\\"><input type=\\\"radio\\\" ng-model=\\\"ctrl.parametros.estado\\\" value=\\\"REALIZADA\\\">{{\\'reserva.estado.realizada.titulo\\' | translate}}</label>\\r\\n                        <label class=\\\"radio-inline\\\"><input type=\\\"radio\\\" ng-model=\\\"ctrl.parametros.estado\\\" value=\\\"INCIDENCIA\\\">{{\\'reserva.estado.incidencia.titulo\\' | translate}}</label>\\r\\n                    </div>\\r\\n\\r\\n                    <span ng-if=\\\"ctrl.parametros.estado === \\'REALIZADA\\'\\\" ng-bind-html=\\\"\\'reserva.estado.realizada.info\\' | translate\\\"></span>\\r\\n\\r\\n                    <div class=\\\"form-group\\\" ng-if=\\\"ctrl.parametros.estado === \\'INCIDENCIA\\'\\\">\\r\\n                        <span ng-bind-html=\\\"\\'reserva.estado.incidencia.info\\' | translate\\\"></span>\\r\\n                        <textarea class=\\\"form-control\\\" id=\\\"motivoIncidenciaProfesor\\\" ng-model=\\\"ctrl.parametros.motivoProfesor\\\" required></textarea>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <!-- Alumno indica qué le pareció la clase -->\\r\\n\\r\\n                <div ng-if=\\\"ctrl.tipo == ctrl.tipos.RESPONDER_ALUMNO && !ctrl.item.motivoAlumno\\\" ng-init=\\\"ctrl.parametros.estado=ctrl.parametros.estadobd; ctrl.mostrar=true\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <span ng-bind-html=\\\"\\'reserva.motivo.alumno.evaluar\\' | translate\\\"></span>\\r\\n                        <textarea class=\\\"form-control\\\" id=\\\"motivoIncidenciaAlumno\\\" ng-model=\\\"ctrl.parametros.motivoAlumno\\\" required></textarea>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <div ng-if=\\\"ctrl.tipo == ctrl.tipos.RESPONDER_ALUMNO_PENDIENTE\\\" ng-init=\\\"ctrl.parametros.estado=ctrl.parametros.estadobd; ctrl.mostrar=true\\\">\\r\\n                    <span translate=\\\"reserva.estado.pendiente\\\"></span>\\r\\n                </div>\\r\\n\\r\\n                <!-- Si profesor y alumno anotaron la incidencia -> No se puede modificar -->\\r\\n                <div ng-if=\\\"ctrl.parametros.estadobd === \\'INCIDENCIA\\' && ctrl.item.motivoProfesor.length && ctrl.item.motivoAlumno.length\\\" ng-init=\\\"ctrl.mostrar=false\\\"></div>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"modal-footer\\\" ng-if=\\\"isCollapsed && ctrl.mostrarFooter || ctrl.parametros.estadobd == null\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"ctrl.dismiss()\\\">\\r\\n            <span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"reserva.acciones.cancelar\\\"></span>\\r\\n        </button>\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" ng-disabled=\\\"ctrl.$invalid || (ctrl.parametros.creditosDisponibles <= 0 && ctrl.parametros.estadobd == null)\\\">\\r\\n            <span class=\\\"glyphicon glyphicon-ok\\\"></span>&nbsp;\\r\\n            <span ng-if=\\\"ctrl.parametros.estadobd != null\\\" translate=\\\"reserva.acciones.guardar\\\"></span>\\r\\n            <span ng-if=\\\"ctrl.parametros.estadobd == null\\\" translate=\\\"reserva.acciones.reservar\\\"></span>\\r\\n        </button>\\r\\n    </div>\\r\\n\\r\\n\\r\\n</form>\\r\\n\");\n$templateCache.put(\"app/components/social/social.html\",\"<form action=\\\"{{providerURL}}\\\" method=\\\"POST\\\" has-any-authority=\\\"ROLE_ANONYMOUS\\\">\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-social btn-{{provider}}\\\" ng-class=\\\"{\\'btn-social-mini\\': mini, \\'btn-block\\': !mini}\\\">\\r\\n        <i class=\\\"fa fa-{{provider}}\\\"></i>\\r\\n        <span data-translate=\\\"social.btn\\\" translate-values=\\\"{label: label}\\\" ng-show=\\\"!mini\\\"></span>\\r\\n    </button>\\r\\n    <input name=\\\"scope\\\" type=\\\"hidden\\\" value=\\\"{{providerSetting}}\\\">\\r\\n    <input name=\\\"_csrf\\\" type=\\\"hidden\\\" value=\\\"{{csrf}}\\\">\\r\\n</form>\\r\\n\");\n$templateCache.put(\"app/components/statics/static.html\",\"<h4>{{ctrl.estaticai18n.titulo}}</h4>\\r\\n\\r\\n<div ng-bind-html=\\\"ctrl.estaticai18n.contenido\\\"></div>\\r\\n\");\n$templateCache.put(\"app/components/usuariogestion/usuario-gestion-columna.html\",\"<!--Editar-->\\r\\n<a ui-sref=\\\"admin/{{ctrl.entidad}}/edit({id: ctrl.element.id})\\\" class=\\\"button glyphicon glyphicon-pencil\\\" ng-if=\\\"!ctrl.element.baja\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\"></a>\\r\\n\\r\\n<!--Desactivar y baja-->\\r\\n<a ng-click=\\\"ctrl.showDesactivarConfirmation(ctrl.element)\\\" class=\\\"button glyphicon glyphicon-remove\\\" ng-if=\\\"!ctrl.element.eliminado && !ctrl.element.baja\\\" title=\\\"{{\\'admin.list-users.desactivar.title\\' | translate}}\\\"></a>\\r\\n<a ng-click=\\\"ctrl.showBajaConfirmation(ctrl.element)\\\" class=\\\"button glyphicon glyphicon-trash\\\" ng-if=\\\"!ctrl.element.eliminado && !ctrl.element.baja\\\" title=\\\"{{\\'admin.list-users.delete.title\\' | translate}}\\\"></a>\\r\\n\\r\\n<!--Activar-->\\r\\n<a ng-click=\\\"ctrl.showRestaurarConfirmation(ctrl.element)\\\" class=\\\"button glyphicon glyphicon-ok\\\" ng-if=\\\"ctrl.element.eliminado && !ctrl.element.baja\\\" title=\\\"{{\\'admin.list-users.restaurar.title\\' | translate}}\\\"></a>\\r\\n\\r\\n<span class=\\\"info\\\" ng-if=\\\"ctrl.element.baja\\\">[{{\\'admin.list-users.eliminado\\' | translate}}]</span>\\r\\n\");\n$templateCache.put(\"app/components/usuariogestion/usuario-gestion-eliminados.html\",\"<label>\\r\\n    <input type=\\\"checkbox\\\" ng-model=\\\"ctrl.eliminados\\\" ng-change=\\\"ctrl.onChangeEliminados()\\\">\\r\\n    {{\\'admin.list-users.vereliminados\\' | translate}}\\r\\n</label>\\r\\n\");\n$templateCache.put(\"app/layouts/error/accessdenied.html\",\"<div ng-cloak>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n        <div class=\\\"col-md-12\\\">\\r\\n            <h4 class=\\\"text-center\\\" translate=\\\"error.accessdenied.content\\\">Acceso denegado</h4>\\r\\n\\r\\n            <div ng-show=\\\"errorMessage\\\">\\r\\n                <div class=\\\"alert alert-danger\\\">{{errorMessage}}\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/layouts/error/error.html\",\"<div ng-cloak>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n        <div class=\\\"col-md-12\\\">\\r\\n            <h4 class=\\\"text-center\\\" translate=\\\"error.error.content\\\">Se ha producido un error</h4>\\r\\n\\r\\n            <div ng-show=\\\"errorMessage\\\">\\r\\n                <div class=\\\"alert alert-danger\\\">{{errorMessage}}\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/layouts/footer/footer.admin.html\",\"<div class=\\\"container\\\">\\r\\n    <!--Empty footer-->\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/layouts/footer/footer.html\",\"<div class=\\\"footer\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        {{\\'footer.copyright\\' | translate}}\\r\\n\\r\\n        <div class=\\\"info pull-right\\\" ng-if=\\\"false\\\">\\r\\n            <span><span class=\\\"fa fa-phone\\\"></span> {{\\'contacto.telefono\\' | translate}}</span>\\r\\n\\r\\n            <span><span class=\\\"glyphicon glyphicon-envelope\\\"></span> {{\\'contacto.email\\' | translate}}</span>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/layouts/header/header.html\",\"<div class=\\\"container\\\">\\r\\n    <div class=\\\"pull-left\\\">\\r\\n        <a ui-sref=\\\"registro/info\\\">\\r\\n            <div>\\r\\n                <div class=\\\"logo\\\"><img ng-src=\\\"assets/images/logo_worldprofe_h50.png\\\"></div>\\r\\n            </div>\\r\\n        </a>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"pull-right\\\" ng-if=\\\"false\\\">\\r\\n        <idiomas></idiomas>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"text-right\\\" ng-show=\\\"!$root.isOffline\\\">\\r\\n        <div class=\\\"usuario\\\">\\r\\n            <div has-any-authority=\\\"ROLE_ANONYMOUS\\\">\\r\\n                <a class=\\\"btn btn-primary\\\" ui-sref=\\\"registro/info\\\"><i class=\\\"fa fa-sign-in\\\"></i> {{\\'header.login\\' |\\r\\n                    translate}} </a>\\r\\n            </div>\\r\\n            <div has-any-authority=\\\"ROLE_AUTHENTICATED\\\">\\r\\n                <div class=\\\"info-usuario\\\">\\r\\n                    <span ng-if=\\\"!ctrl.usuario.nombre && !ctrl.usuario.apellidos\\\">{{ctrl.usuario.email}}</span>\\r\\n                    <span class=\\\"nombre\\\" title=\\\"{{ctrl.usuario.email}}\\\">{{ctrl.usuario.nombre}} <span ng-if=\\\"ctrl.usuario.apellidos\\\">{{ctrl.usuario.apellidos}}</span></span>\\r\\n                    <imagen-perfil-ver usuario=\\\"ctrl.usuario\\\" mini=\\\"true\\\"></imagen-perfil-ver>\\r\\n                </div>\\r\\n\\r\\n                <a class=\\\"btn btn-warning\\\" ui-sref=\\\"logout\\\"><i class=\\\"fa fa-sign-out\\\"></i> {{\\'header.logout\\' |\\r\\n                    translate}}</a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/compra/compra.success.html\",\"<h1>{{\\'compra.fin\\' | translate }}</h1>\\r\\n\\r\\n<div class=\\\"lead text-center\\\" ng-show=\\\"ctrl.loading\\\">{{\\'compra.finalizando\\' | translate}}</div>\\r\\n<loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n<div class=\\\"lead\\\" ng-if=\\\"ctrl.error\\\">{{\\'compra.error.compra\\' | translate}}</div>\\r\\n\");\n$templateCache.put(\"app/public/home/home.html\",\"<div class=\\\"text-center\\\">\\r\\n    <img class=\\\"anchomax\\\" ng-src=\\\"assets/images/logo_worldprofe.png\\\"></div>\\r\\n\\r\\n\");\n$templateCache.put(\"app/admin/user/admin/admin.form.html\",\"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-8 col-md-offset-2\\\">\\r\\n        <h1 translate=\\\"admin.register.title\\\">Registration</h1>\\r\\n        <form name=\\\"form\\\" ng-submit=\\\"ctrl.register()\\\" role=\\\"form\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"admin.admin.form.username\\\" for=\\\"login\\\" required=\\\"true\\\"></label-form>\\r\\n                <input class=\\\"form-control\\\" id=\\\"login\\\" ng-maxlength=\\\"50\\\" ng-minlength=\\\"1\\\" ng-model=\\\"ctrl.registerAccount.login\\\" ng-pattern=\\\"/^[a-z0-9]*$/\\\" ng-pattern-err-type=\\\"loginPattern\\\" required type=\\\"text\\\">\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"admin.admin.form.password\\\" for=\\\"password\\\" required=\\\"true\\\"></label-form>\\r\\n                <input class=\\\"form-control\\\" id=\\\"password\\\" ng-maxlength=\\\"50\\\" ng-minlength=\\\"1\\\" ng-model=\\\"ctrl.registerAccount.password\\\" required type=\\\"password\\\">\\r\\n                <password-strength-bar password-to-check=\\\"ctrl.registerAccount.password\\\"></password-strength-bar>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"admin.changepassword.confirmpassword\\\" for=\\\"confirmPassword\\\" required=\\\"true\\\"></label-form>\\r\\n                <input class=\\\"form-control\\\" id=\\\"confirmPassword\\\" ng-maxlength=\\\"50\\\" ng-minlength=\\\"1\\\" same-as=\\\"ctrl.registerAccount.password\\\" same-as-err-type=\\\"sameAs2\\\" ng-model-options=\\\"{updateOn: \\'blur\\'}\\\" ng-model=\\\"ctrl.confirmPassword\\\" required type=\\\"password\\\">\\r\\n            </div>\\r\\n\\r\\n            <!--Botones-->\\r\\n            <buttons can-save=\\\"true\\\" mode=\\\"\\'create\\'\\\"></buttons>\\r\\n\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\");\n$templateCache.put(\"app/admin/user/admin/admin.list.html\",\"<div class=\\\"btn-ctrl\\\">\\r\\n    <a class=\\\"btn btn-primary btn-crear\\\" ui-sref=\\\"admin/admin/create\\\">\\r\\n        <span translate=\\\"global.menu.register\\\"></span>\\r\\n    </a>\\r\\n</div>\\r\\n\\r\\n<table ng-table=\\\"ctrl.tableParams\\\" class=\\\"table table-condensed table-bordered table-striped\\\">\\r\\n\\r\\n    <tr ng-repeat=\\\"user in $data track by user.login\\\">\\r\\n        <td data-title=\\\"\\'admin.admin.form.login\\' | translate\\\" sortable=\\\"\\'login\\'\\\">\\r\\n            {{user.email}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.admin.form.fechaultimoacceso\\' | translate\\\" sortable=\\\"\\'fechaUltimoAcceso\\'\\\">\\r\\n            <date model=\\\"user.fechaUltimoAcceso\\\"></date>\\r\\n        </td>\\r\\n\\r\\n        <td class=\\\"text-center button-icons\\\">\\r\\n            <a ng-if=\\\"user.login !== \\'admin\\'\\\" ng-click=\\\"ctrl.showRemoveConfirmation(user)\\\" class=\\\"button glyphicon glyphicon-trash\\\" title=\\\"{{\\'admin.form.button.delete\\' | translate}}\\\"></a>\\r\\n        </td>\\r\\n    </tr>\\r\\n</table>\\r\\n<loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n\");\n$templateCache.put(\"app/components/form/buttons/buttons-form.template.html\",\"<!--Botones de atrás/cancelar y crear/guardar-->\\r\\n<div class=\\\"form-bottom-buttons\\\" ng-switch=\\\"::ctrl.canSave\\\">\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"ctrl.back()\\\">\\r\\n        <span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;\\r\\n        <span translate=\\\"admin.form.button.back\\\" ng-switch-when=\\\"false\\\"></span>\\r\\n        <span translate=\\\"admin.form.button.cancel\\\" ng-switch-when=\\\"true\\\"></span>\\r\\n    </button>\\r\\n\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" ng-disabled=\\\"!ctrl.canSave\\\">\\r\\n        <span class=\\\"glyphicon glyphicon-ok\\\"></span>&nbsp;\\r\\n        <span translate=\\\"admin.form.button.create\\\" ng-if=\\\"ctrl.mode == \\'create\\'\\\"></span>\\r\\n        <span translate=\\\"admin.form.button.save\\\" ng-if=\\\"ctrl.mode == \\'edit\\'\\\"></span>\\r\\n    </button>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/form/confirm/confirm.modal.html\",\"<form ng-submit=\\\"ctrl.confirm(ctrl.item)\\\">\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-hidden=\\\"true\\\" ng-click=\\\"ctrl.dismiss()\\\">&times;</button>\\r\\n        <h4 class=\\\"modal-title\\\" translate=\\\"{{ctrl.params.title}}\\\"></h4>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <alert modal=\\\"true\\\"></alert>\\r\\n\\r\\n        <p translate=\\\"{{ctrl.params.body}}\\\" translate-values=\\\"{id: \\'{{::ctrl.item[ctrl.params.property]}}\\'}\\\"></p>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"ctrl.dismiss()\\\">\\r\\n            <span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"comun.cancelar\\\"></span>\\r\\n        </button>\\r\\n        <button type=\\\"submit\\\" ng-disabled=\\\"ctrl.$invalid\\\" class=\\\"btn btn-primary\\\">\\r\\n            <span class=\\\"glyphicon glyphicon-ok\\\"></span>&nbsp;<span translate=\\\"comun.aceptar\\\"></span>\\r\\n        </button>\\r\\n    </div>\\r\\n</form>\\r\\n\");\n$templateCache.put(\"app/components/form/date/date-picker.html\",\"<label-form key=\\\"{{ctrl.label}}\\\" for=\\\"{{ctrl.id}}\\\" required=\\\"ctrl.required\\\"></label-form>\\r\\n\\r\\n<div class=\\\"input-group date-picker\\\">\\r\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"{{ctrl.id}}\\\" uib-datepicker-popup=\\\"{{ctrl.format}}\\\" ng-change=\\\"ctrl.change(ctrl.model)\\\" ng-focus=\\\"ctrl.openDatePicker()\\\" ng-model=\\\"ctrl.model\\\" is-open=\\\"ctrl.opened\\\" datepicker-options=\\\"ctrl.dateOptions\\\" ng-required=\\\"ctrl.required\\\" close-text=\\\"{{\\'datepicker.close\\' | translate}}\\\" current-text=\\\"{{\\'datepicker.currentday\\' | translate}}\\\" clear-text=\\\"{{\\'datepicker.clear\\' | translate}}\\\" show-button-bar=\\\"ctrl.showBar\\\" ng-disabled=\\\"$ctrl.disabled\\\" ng-readonly=\\\"ctrl.readonly\\\">\\r\\n\\r\\n    <span class=\\\"input-group-btn\\\" ng-if=\\\"!$ctrl.disabled\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"ctrl.openDatePicker()\\\">\\r\\n            <i class=\\\"glyphicon glyphicon-calendar\\\"></i>\\r\\n        </button>\\r\\n    </span>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/form/delete/entity.delete.modal.html\",\"<form ng-submit=\\\"ctrl.confirmRemove(ctrl.item)\\\">\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-hidden=\\\"true\\\" ng-click=\\\"ctrl.dismiss()\\\">&times;</button>\\r\\n        <h4 class=\\\"modal-title\\\" translate=\\\"{{ctrl.params.title}}\\\"></h4>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <alert modal=\\\"true\\\"></alert>\\r\\n\\r\\n        <p translate=\\\"{{ctrl.params.body}}\\\" translate-values=\\\"{id: \\'{{::ctrl.item[ctrl.params.property]}}\\'}\\\"></p>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"ctrl.dismiss()\\\">\\r\\n            <span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"admin.form.button.cancel\\\"></span>\\r\\n        </button>\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-danger\\\">\\r\\n            <span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"admin.form.button.delete\\\"></span>\\r\\n        </button>\\r\\n    </div>\\r\\n</form>\\r\\n\");\n$templateCache.put(\"app/components/form/enum/enum-select-boolean.html\",\"<label-form key=\\\"{{ctrl.label}}\\\" for=\\\"{{ctrl.id}}\\\" required=\\\"ctrl.required\\\"></label-form>\\r\\n\\r\\n<select class=\\\"form-control\\\" id=\\\"ctrl.id\\\" ng-model=\\\"ctrl.model\\\" ng-disabled=\\\"ctrl.disabled\\\" ng-required=\\\"ctrl.required\\\" ng-options=\\\"item as \\'enum.boolean.\\' + item | translate for item in [true, false]\\\" ng-change=\\\"ctrl.change(ctrl.model)\\\">\\r\\n    <option value=\\\"\\\" ng-if=\\\"!ctrl.required\\\">{{ctrl.empty | translate}}</option>\\r\\n</select>\\r\\n\");\n$templateCache.put(\"app/components/form/enum/enum-select.html\",\"<label-form key=\\\"{{ctrl.label}}\\\" for=\\\"{{ctrl.id}}\\\" required=\\\"ctrl.required\\\"></label-form>\\r\\n\\r\\n<select class=\\\"form-control\\\" id=\\\"ctrl.id\\\" ng-model=\\\"ctrl.model\\\" ng-disabled=\\\"ctrl.disabled\\\" ng-required=\\\"ctrl.required\\\" ng-change=\\\"ctrl.change(ctrl.model)\\\">\\r\\n    <option value=\\\"\\\" ng-if=\\\"!ctrl.required\\\">{{ctrl.empty | translate}}</option>\\r\\n    <option ng-repeat=\\\"value in ctrl.options track by value\\\" value=\\\"{{value}}\\\" required>\\r\\n        {{ctrl.display ? ctrl.base + \\'.\\' + value[ctrl.display] : ctrl.base + \\'.\\' + value | translate}}\\r\\n    </option>\\r\\n</select>\\r\\n\");\n$templateCache.put(\"app/components/form/fecha/fecha.html\",\"<fieldset class=\\\"fieldset-border form-group\\\">\\r\\n    <legend ng-if=\\\"!ctrl.label && ctrl.prefijo === \\'nacimiento\\'\\\" translate=\\\"fecha.legendnacimiento\\\"></legend>\\r\\n    <legend ng-if=\\\"!ctrl.label && ctrl.prefijo === \\'muerte\\'\\\" translate=\\\"fecha.legendmuerte\\\"></legend>\\r\\n    <legend ng-if=\\\"!ctrl.label && ctrl.prefijo !== \\'nacimiento\\' && ctrl.prefijo !== \\'muerte\\'\\\" translate=\\\"fecha.legendfecha\\\"></legend>\\r\\n    <legend ng-if=\\\"ctrl.label\\\" translate=\\\"{{ctrl.label}}\\\"></legend>\\r\\n\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"fecha.dia\\\" for=\\\"{{ctrl.prefijo}}dia\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"{{ctrl.prefijo}}dia\\\" type=\\\"number\\\" ng-model=\\\"ctrl.model[ctrl.prefijo + \\'Dia\\']\\\" min=\\\"1\\\" max=\\\"31\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"fecha.mes\\\" for=\\\"{{ctrl.prefijo}}mes\\\" required=\\\"ctrl.model[ctrl.prefijo + \\'Dia\\']\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"{{ctrl.prefijo}}mes\\\" type=\\\"number\\\" ng-model=\\\"ctrl.model[ctrl.prefijo + \\'Mes\\']\\\" min=\\\"1\\\" max=\\\"12\\\" ng-required=\\\"ctrl.model[ctrl.prefijo + \\'Dia\\']\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"fecha.ano\\\" for=\\\"{{ctrl.prefijo}}ano\\\" required=\\\"ctrl.model[ctrl.prefijo + \\'Dia\\'] || ctrl.model[ctrl.prefijo + \\'Mes\\']\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"{{ctrl.prefijo}}ano\\\" type=\\\"number\\\" ng-model=\\\"ctrl.model[ctrl.prefijo + \\'Ano\\']\\\" min=\\\"1\\\" max=\\\"3000\\\" ng-required=\\\"ctrl.model[ctrl.prefijo + \\'Dia\\'] || ctrl.model[ctrl.prefijo + \\'Mes\\']\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n</fieldset>\\r\\n\");\n$templateCache.put(\"app/components/form/filter/filter.input.template.html\",\"<div class=\\\"form-inline\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <input id=\\\"keysFilter\\\" class=\\\"form-control\\\" type=\\\"text\\\" ng-model=\\\"$ctrl.filter\\\" placeholder=\\\"{{\\'admin.form.filter\\' | translate}}\\\">\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/form/listform/list-form.html\",\"<fieldset class=\\\"fieldset-border form-group list-form\\\">\\r\\n    <div class=\\\"row title\\\">\\r\\n        <div class=\\\"col-xs-8\\\">\\r\\n            <label-form key=\\\"{{ctrl.label}}\\\" tooltip=\\\"{{ctrl.tooltip}}\\\"></label-form>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-xs-4 text-right\\\">\\r\\n            <button type=\\\"button\\\" ng-click=\\\"ctrl.addElement()\\\" class=\\\"btn btn-default\\\" title=\\\"{{\\'admin.form.button.add\\' | translate}}\\\">\\r\\n                <span class=\\\"glyphicon glyphicon-plus\\\"></span>\\r\\n                {{\\'admin.form.button.add\\' | translate}}\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row element\\\" ng-repeat=\\\"element in ctrl.list track by $index\\\" ng-class=\\\"ctrl.acordeon ? \\'acordeon\\' : \\'sin-acordeon\\'\\\">\\r\\n\\r\\n        <ng-include src=\\\"ctrl.templateUrl\\\"></ng-include>\\r\\n\\r\\n        <!--Eliminar-->\\r\\n        <div class=\\\"remove button-icons form-center-vertical\\\">\\r\\n            <a ng-click=\\\"ctrl.removeElement(element)\\\" class=\\\"glyphicon glyphicon-remove\\\" title=\\\"{{\\'admin.form.button.delete\\' | translate}}\\\"></a>\\r\\n        </div>\\r\\n    </div>\\r\\n</fieldset>\\r\\n\");\n$templateCache.put(\"app/components/form/multiselect/multi-select.html\",\"<div class=\\\"multi-select\\\">\\r\\n\\r\\n    <label-form key=\\\"{{ctrl.label}}\\\" for=\\\"{{ctrl.id}}\\\" required=\\\"ctrl.required\\\" tooltip=\\\"{{ctrl.tooltip}}\\\"></label-form>\\r\\n\\r\\n    <div ng-dropdown-multiselect=\\\"\\\" id=\\\"{{ctrl.id}}\\\" ng-class=\\\"{\\'enum\\': ctrl.enumBase}\\\" options=\\\"ctrl.options\\\" selected-model=\\\"ctrl.model\\\" extra-settings=\\\"ctrl.extraSettings\\\" translation-texts=\\\"ctrl.translations\\\" events=\\\"{onItemSelect: ctrl.onItemSelect}\\\"></div>\\r\\n\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/form/select/select-form.html\",\"<label-form key=\\\"{{ctrl.label}}\\\" for=\\\"{{ctrl.id}}\\\" required=\\\"ctrl.required\\\" tooltip=\\\"{{ctrl.tooltip}}\\\"></label-form>\\r\\n\\r\\n<select class=\\\"form-control\\\" name=\\\"{{ctrl.id}}\\\" ng-model=\\\"ctrl.model\\\" ng-change=\\\"ctrl.change(ctrl.model)\\\" ng-options=\\\"value as ctrl.formatElement(value) | translate for value in ctrl.options track by value.id\\\" ng-required=\\\"ctrl.required\\\">\\r\\n    <option value=\\\"\\\" ng-if=\\\"!ctrl.required\\\">{{ctrl.empty | translate}}</option>\\r\\n</select>\\r\\n\");\n$templateCache.put(\"app/components/form/tesauro/tesauro.html\",\"<div class=\\\"tesauro\\\">\\r\\n\\r\\n    <ng-include src=\\\"\\'app/templates/tesauro.templates.html\\'\\\" ng-if=\\\"ctrl.templateUrl\\\"></ng-include>\\r\\n\\r\\n    <label-form key=\\\"{{ctrl.label}}\\\" for=\\\"{{ctrl.id}}\\\" required=\\\"ctrl.required\\\" tooltip=\\\"{{ctrl.tooltip}}\\\"></label-form>\\r\\n\\r\\n    <!--Múltiple (ngTagsInput)-->\\r\\n    <tags-input ng-if=\\\"ctrl.multiple\\\" name=\\\"{{ctrl.id}}\\\" class=\\\"bootstrap\\\" ng-class=\\\"{\\'as-list\\': ctrl.asList}\\\" ng-model=\\\"ctrl.ngModel\\\" ng-disabled=\\\"ctrl.disabled\\\" display-property=\\\"{{ctrl.display}}\\\" key-property=\\\"{{ctrl.key}}\\\" add-on-blur=\\\"false\\\" add-from-autocomplete-only=\\\"{{ctrl.restricted}}\\\" on-tag-added=\\\"ctrl.setElement($tag)\\\" replace-spaces-with-dashes=\\\"false\\\" placeholder=\\\"{{ctrl.placeholder | translate}}\\\">\\r\\n        <auto-complete source=\\\"ctrl.loadTags($query)\\\" select-first-match=\\\"false\\\" min-length=\\\"{{ctrl.minLength}}\\\" load-on-focus=\\\"true\\\" load-on-empty=\\\"{{ctrl.minLength == 0}}\\\"></auto-complete>\\r\\n    </tags-input>\\r\\n\\r\\n    <!--Simple (Angular Bootstrap)-->\\r\\n    <div ng-if=\\\"!ctrl.multiple\\\" ng-class=\\\"{\\'input-group\\': ctrl.eliminable}\\\">\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"{{ctrl.id}}\\\" name=\\\"{{ctrl.id}}\\\" ng-model=\\\"ctrl.ngModel[ctrl.display]\\\" ng-required=\\\"ctrl.required\\\" ng-disabled=\\\"ctrl.disabled\\\" ng-change=\\\"ctrl.resetElement()\\\" typeahead-show-hint=\\\"true\\\" typeahead-editable=\\\"!ctrl.restricted\\\" uib-typeahead=\\\"element[ctrl.display] for element in ctrl.loadTags($viewValue)\\\" typeahead-min-length=\\\"ctrl.minLength | num\\\" typeahead-on-select=\\\"ctrl.setElement($item)\\\" typeahead-select-on-exact=\\\"true\\\" typeahead-template-url=\\\"{{ctrl.templateUrl}}\\\" autocomplete=\\\"none\\\" placeholder=\\\"{{ctrl.placeholder | translate}}\\\">\\r\\n        <span class=\\\"input-group-addon\\\" ng-if=\\\"ctrl.eliminable\\\">\\r\\n            <a type=\\\"button\\\" class=\\\"glyphicon glyphicon-remove\\\" ng-click=\\\"ctrl.clear()\\\" title=\\\"{{\\'admin.form.button.remove\\' | translate}}\\\" ng-class=\\\"{\\'disabled\\': !ctrl.ngModel[ctrl.display] || ctrl.disabled}\\\"></a>\\r\\n        </span>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/form/tooltip/tooltip.html\",\"<span class=\\\"ng-tooltip\\\">\\r\\n    <span class=\\\"icon glyphicon glyphicon-question-sign\\\" uib-tooltip=\\\"{{label | translate}}\\\" tooltip-placement=\\\"{{position || \\'right\\'}}\\\">\\r\\n    </span>\\r\\n</span>\\r\\n\");\n$templateCache.put(\"app/public/components/compra/compra-list.html\",\"<h1 translate=\\\"miespacio.miscompras.title\\\"></h1>\\r\\n\\r\\n<div class=\\\"empty\\\" ng-show=\\\"ctrl.empty\\\" translate=\\\"compra.empty\\\"></div>\\r\\n\\r\\n<table ng-show=\\\"!ctrl.empty\\\" ng-table=\\\"ctrl.tableParams\\\" class=\\\"table table-condensed table-bordered table-striped table-hover\\\" class=\\\"ng-cloak\\\">\\r\\n    <tr ng-repeat=\\\"element in $data track by element.id\\\" class=\\\"animate\\\">\\r\\n        <td data-title=\\\"\\'compra.form.fecha\\' | translate\\\" sortable=\\\"\\'fecha\\'\\\" align=\\\"center\\\">\\r\\n            <date model=\\\"element.fecha\\\"></date>\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'compra.form.creditos\\' | translate\\\" sortable=\\\"\\'creditos\\'\\\" align=\\\"right\\\">\\r\\n            {{element.creditos}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'compra.form.precio\\' | translate\\\" sortable=\\\"\\'precio\\'\\\" align=\\\"right\\\">\\r\\n            {{element.precio | number:2}} €\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'compra.form.precioiva\\' | translate\\\" sortable=\\\"\\'precioConIva\\'\\\" align=\\\"right\\\">\\r\\n            {{element.precioConIva | number:2}} €\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'compra.form.iva\\' | translate\\\" sortable=\\\"\\'porcentajeIva\\'\\\" align=\\\"right\\\">\\r\\n            {{element.porcentajeIva}} %\\r\\n        </td>\\r\\n    </tr>\\r\\n</table>\\r\\n<loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n\");\n$templateCache.put(\"app/public/components/login/login.html\",\"<div has-any-authority=\\\"ROLE_ANONYMOUS\\\">\\r\\n    <form class=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"$ctrl.login()\\\" novalidate>\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"login.form.username.label\\\" for=\\\"username\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"username\\\" ng-model=\\\"$ctrl.username\\\" type=\\\"email\\\" required>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"login.form.password.label\\\" for=\\\"password\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"password\\\" ng-model=\\\"$ctrl.password\\\" type=\\\"password\\\" required>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <a ui-sref=\\\"recuperar/init\\\">{{\\'login.password.forgot\\' | translate}}</a>\\r\\n            <label for=\\\"rememberMe\\\" class=\\\"float-right\\\">\\r\\n                <input checked=\\\"true\\\" id=\\\"rememberMe\\\" ng-model=\\\"$ctrl.rememberMe\\\" type=\\\"checkbox\\\">\\r\\n                {{\\'login.form.rememberme\\' | translate}}\\r\\n            </label>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-block\\\" translate=\\\"login.form.button\\\"></button>\\r\\n        </div>\\r\\n\\r\\n        <!--<div class=\\\"form-group\\\">-->\\r\\n        <!--<social provider=\\\"google\\\"></social>-->\\r\\n        <!--<social provider=\\\"facebook\\\"></social>-->\\r\\n        <!--</div>-->\\r\\n    </form>\\r\\n</div>\\r\\n\\r\\n\");\n$templateCache.put(\"app/public/components/miagenda/mi-agenda.list.html\",\"<div class=\\\"text-right form-group\\\" has-any-authority=\\\"ROLE_ALUMNO\\\">\\r\\n    <label-form key=\\\"reserva.creditos.disponibles\\\" sufijo=\\\":\\\"></label-form>\\r\\n    <span>{{ctrl.usuarioAutenticado.creditosDisponibles}}</span>\\r\\n    &nbsp;&nbsp;\\r\\n    <label-form key=\\\"reserva.creditos.consumidos\\\" sufijo=\\\":\\\"></label-form>\\r\\n    <span>{{ctrl.usuarioAutenticado.creditosConsumidos}}</span>\\r\\n</div>\\r\\n\\r\\n<div id=\\\"calendar\\\" class=\\\"calendar\\\" calendar=\\\"myCalendar\\\" config=\\\"uiConfig.calendar\\\" ui-calendar=\\\"uiConfig.calendar\\\"></div>\\r\\n\\r\\n<div class=\\\"row leyenda\\\">\\r\\n    <div class=\\\"col-sm-4\\\" ng-hide=\\\"alumnoViendose && rol === \\'ROLE_ALUMNO\\' || canceladasRechazadas === \\'true\\'\\\"><span class=\\\"leyenda-elemento\\\" ng-style=\\\"{background:COLOR_CLASE_LIBRE}\\\"></span>\\r\\n        {{\\'enum.color.COLOR_CLASE_LIBRE\\' | translate}}\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-4\\\" ng-hide=\\\"!usuarioLogueado || canceladasRechazadas === \\'true\\'\\\"><span class=\\\"leyenda-elemento\\\" ng-style=\\\"{background:COLOR_RESERVA_SIN_CONTESTAR}\\\"></span>\\r\\n        {{\\'enum.color.COLOR_RESERVA_SIN_CONTESTAR\\' | translate}}\\r\\n        <reserva-count estados=\\\"ctrl.countEstados\\\" estado=\\\"SIN_CONTESTAR\\\"></reserva-count>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-4\\\" ng-hide=\\\"(alumnoViendose && rol === \\'ROLE_ALUMNO\\') || rol === \\'ROLE_PROFESOR\\' || canceladasRechazadas === \\'true\\'\\\">\\r\\n        <span class=\\\"leyenda-elemento\\\" ng-style=\\\"{background:COLOR_CLASE_OCUPADA}\\\"></span>\\r\\n        {{\\'enum.color.COLOR_CLASE_OCUPADA\\' | translate}}\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-4\\\" ng-hide=\\\"!usuarioLogueado || canceladasRechazadas === \\'true\\'\\\"><span class=\\\"leyenda-elemento\\\" ng-style=\\\"{background:COLOR_RESERVA_CONFIRMADA}\\\"></span>\\r\\n        {{\\'enum.color.COLOR_RESERVA_CONFIRMADA\\' | translate}}\\r\\n        <reserva-count estados=\\\"ctrl.countEstados\\\" estado=\\\"CONFIRMADA\\\"></reserva-count>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-4\\\" ng-hide=\\\"!usuarioLogueado || canceladasRechazadas === \\'true\\'\\\"><span class=\\\"leyenda-elemento\\\" ng-style=\\\"{background:COLOR_RESERVA_PENDIENTE}\\\"></span>\\r\\n        {{\\'enum.color.COLOR_RESERVA_PENDIENTE\\' | translate}}\\r\\n        <reserva-count estados=\\\"ctrl.countEstados\\\" estado=\\\"PENDIENTE\\\"></reserva-count>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-4\\\" ng-hide=\\\"!usuarioLogueado || canceladasRechazadas === \\'true\\'\\\"><span class=\\\"leyenda-elemento\\\" ng-style=\\\"{background:COLOR_RESERVA_REALIZADA}\\\"></span>\\r\\n        {{\\'enum.color.COLOR_RESERVA_REALIZADA\\' | translate}}\\r\\n        <reserva-count estados=\\\"ctrl.countEstados\\\" estado=\\\"REALIZADA\\\"></reserva-count>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-4\\\" ng-hide=\\\"!usuarioLogueado || canceladasRechazadas === \\'true\\'\\\"><span class=\\\"leyenda-elemento\\\" ng-style=\\\"{background:COLOR_RESERVA_INCIDENCIA}\\\"></span>\\r\\n        {{\\'enum.color.COLOR_RESERVA_INCIDENCIA\\' | translate}}\\r\\n        <reserva-count estados=\\\"ctrl.countEstados\\\" estado=\\\"INCIDENCIA\\\"></reserva-count>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-sm-4\\\" ng-show=\\\"usuarioLogueado && canceladasRechazadas === \\'true\\'\\\"><span class=\\\"leyenda-elemento\\\" ng-style=\\\"{background:COLOR_RESERVA_NO_CONTESTADA_RECHAZADA_CANCELADA_POR_ALUMNO_O_PROFESOR}\\\"></span>\\r\\n        {{\\'enum.color.COLOR_RESERVA_NO_CONTESTADA_RECHAZADA_CANCELADA_POR_ALUMNO_O_PROFESOR\\' | translate}}\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\");\n$templateCache.put(\"app/public/components/misalumnos/mis-alumnos-list.html\",\"<filter filter=\\\"ctrl.filter.key\\\"></filter>\\r\\n\\r\\n<div class=\\\"empty\\\" ng-show=\\\"ctrl.empty\\\" translate=\\\"miespacio.misalumnos.empty\\\"></div>\\r\\n\\r\\n<table ng-show=\\\"!ctrl.empty\\\" ng-table=\\\"ctrl.tableParams\\\" class=\\\"table table-condensed table-bordered table-striped table-hover\\\" class=\\\"ng-cloak\\\">\\r\\n\\r\\n    <tr ng-repeat=\\\"element in $data track by element.id\\\" class=\\\"animate\\\">\\r\\n        <td data-title=\\\"\\'miespacio.misalumnos.nombre\\' | translate\\\" sortable=\\\"\\'nombre\\'\\\">\\r\\n            {{element.nombre}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'miespacio.misalumnos.apellidos\\' | translate\\\" sortable=\\\"\\'apellidos\\'\\\">\\r\\n            {{element.apellidos}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'miespacio.misalumnos.email\\' | translate\\\" sortable=\\\"\\'email\\'\\\">\\r\\n            {{element.email}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'miespacio.misalumnos.creditosTotales\\' | translate\\\" sortable=\\\"\\'creditosTotales\\'\\\" align=\\\"right\\\" class=\\\"col-sm-1\\\">\\r\\n            {{element.creditosTotales}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'miespacio.misalumnos.creditosDisponibles\\' | translate\\\" sortable=\\\"\\'creditosDisponibles\\'\\\" align=\\\"right\\\" class=\\\"col-sm-1\\\">\\r\\n            {{element.creditosDisponibles}}\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'miespacio.misalumnos.creditosConsumidos\\' | translate\\\" sortable=\\\"\\'creditosConsumidos\\'\\\" align=\\\"right\\\" class=\\\"col-sm-1\\\">\\r\\n            {{element.creditosConsumidos}}\\r\\n        </td>\\r\\n    </tr>\\r\\n</table>\\r\\n\\r\\n<loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n\");\n$templateCache.put(\"app/public/components/password/password.html\",\"<form name=\\\"ctrl.form\\\" ng-submit=\\\"ctrl.save()\\\" role=\\\"form\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label-form key=\\\"admin.changepassword.oldpassword\\\" for=\\\"password\\\" required=\\\"true\\\"></label-form>\\r\\n        <input class=\\\"form-control\\\" id=\\\"password\\\" ng-maxlength=\\\"50\\\" ng-minlength=\\\"1\\\" ng-model=\\\"ctrl.form.password\\\" required type=\\\"password\\\">\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label-form key=\\\"admin.changepassword.newpassword\\\" for=\\\"newPassword\\\" required=\\\"true\\\"></label-form>\\r\\n        <input class=\\\"form-control\\\" id=\\\"newPassword\\\" ng-maxlength=\\\"50\\\" ng-minlength=\\\"1\\\" ng-model=\\\"ctrl.form.newpassword\\\" required type=\\\"password\\\">\\r\\n        <password-strength-bar password-to-check=\\\"ctrl.form.newpassword\\\"></password-strength-bar>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label-form key=\\\"admin.admin.form.confirmpassword\\\" for=\\\"confirmPassword\\\" required=\\\"true\\\"></label-form>\\r\\n        <input class=\\\"form-control\\\" id=\\\"confirmPassword\\\" ng-maxlength=\\\"50\\\" ng-minlength=\\\"1\\\" ng-model=\\\"ctrl.confirmPassword\\\" required=\\\"required\\\" type=\\\"password\\\">\\r\\n    </div>\\r\\n\\r\\n    <!--Botones-->\\r\\n    <buttons can-save=\\\"true\\\" mode=\\\"\\'edit\\'\\\"></buttons>\\r\\n\\r\\n</form>\\r\\n\");\n$templateCache.put(\"app/public/components/paquetecreditos/paquetecreditos-comprar.html\",\"<h1 translate=\\\"global.menu.paquetescreditos\\\"></h1>\\r\\n\\r\\n<div class=\\\"form-group\\\">\\r\\n    <div>\\r\\n        <label translate=\\\"paquetecreditos.comprar.numero\\\"></label>\\r\\n        {{ctrl.paqueteCreditos.creditos}}\\r\\n    </div>\\r\\n\\r\\n    <div>\\r\\n        <label translate=\\\"paquetecreditos.comprar.precio\\\"></label>\\r\\n        {{ctrl.paqueteCreditos.coste | number:2}} €\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<form name=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.comprar()\\\" novalidate>\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <label class=\\\"noselect\\\">\\r\\n            <input type=\\\"checkbox\\\" ng-model=\\\"ctrl.solicitarFactura\\\">\\r\\n            {{\\'paquetecreditos.comprar.solicitarfactura\\' | translate}}\\r\\n        </label>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-body\\\" ng-if=\\\"ctrl.solicitarFactura\\\">\\r\\n        <ng-include src=\\\"\\'app/public/cuenta/miespacio/perfil/perfil-datos-facturacion.form.html\\'\\\"></ng-include>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-bottom-buttons\\\">\\r\\n        <!--Botones-->\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\r\\n            <span class=\\\"glyphicon glyphicon-ok\\\"></span>&nbsp;<span translate=\\\"paquetecreditos.comprar.comprar\\\"></span>\\r\\n        </button>\\r\\n    </div>\\r\\n</form>\\r\\n\\r\\n\");\n$templateCache.put(\"app/public/components/paquetecreditos/paquetecreditos-list.html\",\"<h1 ng-if=\\\"ctrl.usuarioAutenticado.rol !== \\'ROLE_ADMIN\\'\\\" translate=\\\"global.menu.paquetescreditos\\\"></h1>\\r\\n\\r\\n<div ng-if=\\\"ctrl.usuarioAutenticado.rol === \\'ROLE_ADMIN\\'\\\" class=\\\"btn-ctrl\\\">\\r\\n    <a class=\\\"btn btn-primary btn-crear\\\" ui-sref=\\\"admin/paquetecreditos/create\\\">\\r\\n        <span translate=\\\"admin.paquetecreditos.create.title\\\"></span>\\r\\n    </a>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"empty\\\" ng-show=\\\"ctrl.empty\\\" translate=\\\"admin.paquetecreditos.empty\\\"></div>\\r\\n\\r\\n<table ng-show=\\\"ctrl.usuarioAutenticado.rol === \\'ROLE_ADMIN\\' && !ctrl.empty\\\" ng-table=\\\"ctrl.tableParams\\\" class=\\\"table table-condensed table-bordered table-striped table-hover\\\" class=\\\"ng-cloak\\\">\\r\\n\\r\\n    <tr ng-repeat=\\\"element in $data track by element.id\\\" class=\\\"animate\\\">\\r\\n        <td data-title=\\\"\\'admin.paquetecreditos.form.creditos\\' | translate\\\" sortable=\\\"\\'creditos\\'\\\" align=\\\"right\\\">\\r\\n            <a ng-if=\\\"ctrl.usuarioAutenticado.rol === \\'ROLE_ADMIN\\'\\\" ui-sref=\\\"admin/paquetecreditos/edit({id: element.id})\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\">\\r\\n                {{element.creditos}}\\r\\n            </a>\\r\\n            <span ng-if=\\\"ctrl.usuarioAutenticado.rol !== \\'ROLE_ADMIN\\'\\\">{{element.creditos}}</span>\\r\\n        </td>\\r\\n\\r\\n        <td data-title=\\\"\\'admin.paquetecreditos.form.coste\\' | translate\\\" sortable=\\\"\\'coste\\'\\\" align=\\\"right\\\">\\r\\n            {{element.coste | number:2}} €\\r\\n        </td>\\r\\n\\r\\n        <td ng-if=\\\"ctrl.usuarioAutenticado.rol === \\'ROLE_ADMIN\\'\\\" class=\\\"col-md-1 text-center button-icons\\\">\\r\\n            <a ui-sref=\\\"admin/paquetecreditos/edit({id: element.id})\\\" class=\\\"button glyphicon glyphicon-pencil\\\" title=\\\"{{\\'admin.form.button.edit\\' | translate}}\\\"></a>\\r\\n            <a ng-click=\\\"ctrl.showRemoveConfirmation(element.id)\\\" class=\\\"button glyphicon glyphicon-remove\\\" title=\\\"{{\\'admin.form.button.delete\\' | translate}}\\\"></a>\\r\\n        </td>\\r\\n\\r\\n        <td ng-if=\\\"ctrl.usuarioAutenticado.rol !== \\'ROLE_ADMIN\\'\\\" class=\\\"col-md-1 text-center button-icons\\\">\\r\\n            <a ng-click=\\\"ctrl.comprarPaquetecreditos(element.id)\\\" class=\\\"button glyphicon glyphicon-shopping-cart\\\" title=\\\"{{\\'compra.comprar\\' | translate}}\\\"></a>\\r\\n        </td>\\r\\n    </tr>\\r\\n</table>\\r\\n\\r\\n<div ng-show=\\\"ctrl.usuarioAutenticado.rol !== \\'ROLE_ADMIN\\' && !ctrl.empty\\\">\\r\\n    <p translate=\\\"compra.form.info\\\"></p>\\r\\n\\r\\n    <div class=\\\"paquetecredito\\\" ng-repeat=\\\"element in ctrl.tableParams.data\\\">\\r\\n        <div class=\\\"titulo\\\">\\r\\n            {{element.creditos}}\\r\\n        </div>\\r\\n        <div class=\\\"subtitulo\\\">\\r\\n            <span ng-if=\\\"element.creditos == 1\\\" translate=\\\"compra.form.credito\\\"></span>\\r\\n            <span ng-if=\\\"element.creditos > 1\\\" translate=\\\"compra.form.creditos\\\"></span>\\r\\n        </div>\\r\\n        <div class=\\\"coste\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary btn-confirm btn-block\\\" ng-disabled=\\\"ctrl.usuarioAutenticado.rol !== \\'ROLE_ALUMNO\\'\\\" ng-click=\\\"ctrl.comprarPaquetecreditos(element.id)\\\">\\r\\n                {{element.coste | number:2}} €\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <h4 style=\\\"color: #a94442\\\" translate=\\\"compra.form.promo\\\"></h4>\\r\\n</div>\\r\\n\\r\\n<loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n\");\n$templateCache.put(\"app/public/components/profesor/profesor.html\",\"<div class=\\\"profesor\\\">\\r\\n    <div class=\\\"col-sm-2 foto\\\">\\r\\n        <img ng-src=\\\"upload/usuarios/{{ctrl.profesor.id}}/perfil/n_{{ctrl.profesor.foto}}\\\" ng-if=\\\"ctrl.profesor.foto\\\">\\r\\n        <img ng-src=\\\"assets/images/foto_perfil.png\\\" ng-if=\\\"!ctrl.profesor.foto\\\">\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-10 info\\\">\\r\\n        <div class=\\\"nombre\\\">\\r\\n            <span>{{ctrl.profesor.apellidos}}, {{ctrl.profesor.nombre}}</span>\\r\\n        </div>\\r\\n\\r\\n        <!--País y zona horaria-->\\r\\n        <!--<div>-->\\r\\n        <!--<span>{{ctrl.profesor.pais.nombre}}</span>-->\\r\\n        <!--</div>-->\\r\\n        <!--<div>-->\\r\\n        <!--<span>{{ctrl.now}} ({{ctrl.profesor.zonaHoraria.gmt}})</span>-->\\r\\n        <!--</div>-->\\r\\n        <div ng-if=\\\"ctrl.profesor.idiomas.length\\\">\\r\\n            <label-form key=\\\"profesor.ensena\\\"></label-form>:\\r\\n            <span ng-repeat=\\\"profesoridioma in ctrl.profesor.idiomas | orderBy: \\'idioma.nombre\\' track by profesoridioma.id\\\">\\r\\n                {{profesoridioma.idioma.nombre}}\\r\\n                <!--Niveles del idioma-->\\r\\n                <!--(<span-->\\r\\n                <!--ng-repeat=\\\"nivel in profesoridioma.niveles | orderBy: \\'nombre\\' track by nivel.id\\\">{{nivel.nombre}}<span-->\\r\\n                <!--ng-if=\\\"!$last\\\">,</span><span ng-if=\\\"$last\\\">)</span>-->\\r\\n                <!--</span>-->\\r\\n                <span ng-if=\\\"!$last\\\">/ </span>\\r\\n            </span>\\r\\n        </div>\\r\\n\\r\\n        <!--<div>\\r\\n            <label-form key=\\\"profesor.disponibilidad\\\"></label-form>:\\r\\n            <span><enumerado base=\\\"enum.disponibilidad\\\" value=\\\"{{ctrl.profesor.disponibilidad}}\\\"></enumerado></span>\\r\\n        </div>-->\\r\\n        <div ng-if=\\\"ctrl.profesor.descripcionCapacidades\\\">\\r\\n            <label-form key=\\\"profesor.capacidades\\\"></label-form>:\\r\\n            <span ng-bind-html=\\\"ctrl.profesor.descripcionCapacidades\\\"></span>\\r\\n        </div>\\r\\n        <div class=\\\"presentacion\\\">\\r\\n            <!--<label-form key=\\\"profesor.textopresentacion\\\"></label-form>:-->\\r\\n            <span ng-bind-html=\\\"ctrl.profesor.textoPresentacion\\\"></span>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/components/usuarioreserva/usuario-reserva.html\",\"<div class=\\\"profesor-reducido\\\">\\r\\n    <h1 ng-if=\\\"ctrl.usuario.type === \\'profesor\\'\\\">{{\\'profesor.title\\' | translate}}</h1>\\r\\n    <h1 ng-if=\\\"ctrl.usuario.type === \\'alumno\\'\\\">{{\\'global.alumno\\' | translate}}</h1>\\r\\n    <div class=\\\"col-sm-3 foto\\\">\\r\\n        <img ng-src=\\\"upload/usuarios/{{ctrl.usuario.id}}/perfil/n_{{ctrl.usuario.foto}}\\\" ng-if=\\\"ctrl.usuario.foto\\\">\\r\\n        <img ng-src=\\\"assets/images/foto_perfil.png\\\" ng-if=\\\"!ctrl.usuario.foto\\\">\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-9 info\\\">\\r\\n        <div>\\r\\n            <label-form key=\\\"profesor.nombre\\\" sufijo=\\\":\\\"></label-form>\\r\\n            {{ctrl.usuario.nombre}}\\r\\n        </div>\\r\\n        <div>\\r\\n            <label-form key=\\\"profesor.apellidos\\\" sufijo=\\\":\\\"></label-form>\\r\\n            {{ctrl.usuario.apellidos}}\\r\\n        </div>\\r\\n        <div ng-if=\\\"ctrl.reserva.estado != \\'SIN_CONTESTAR\\' && ctrl.reserva.estado != \\'NO_CONTESTADA\\' && ctrl.reserva.estado != \\'CANCELADA_POR_ALUMNO\\'\\\">\\r\\n            <label-form key=\\\"profesor.skype\\\" sufijo=\\\":\\\"></label-form>\\r\\n            {{ctrl.usuario.skype}}\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <h1>{{\\'reserva.title\\' | translate}}</h1>\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <div>\\r\\n            <label-form key=\\\"reserva.form.fechainicio\\\" sufijo=\\\":\\\"></label-form>\\r\\n            <date model=\\\"ctrl.reserva.start.valueOf()/1000\\\"></date>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label-form key=\\\"reserva.form.fechafin\\\" sufijo=\\\":\\\"></label-form>\\r\\n            <date model=\\\"ctrl.reserva.end.valueOf()/1000\\\"></date>\\r\\n        </div>\\r\\n        <div ng-if=\\\"ctrl.reserva.estado\\\">\\r\\n            <label-form key=\\\"reserva.form.estado\\\" sufijo=\\\":\\\"></label-form>\\r\\n            {{\\'enum.estado.\\' + ctrl.reserva.estado | translate}}\\r\\n        </div>\\r\\n\\r\\n        <!--Clases canceladas/rechazadas-->\\r\\n        <div ng-if=\\\"ctrl.cancelada\\\">\\r\\n            <label-form key=\\\"reserva.form.motivo\\\" sufijo=\\\":\\\"></label-form>\\r\\n            <span ng-if=\\\"ctrl.reserva.estado === \\'RECHAZADA\\'\\\">{{ctrl.reserva.motivoProfesor}}</span>\\r\\n            <span ng-if=\\\"ctrl.reserva.estado === \\'CANCELADA_POR_ALUMNO\\'\\\">{{ctrl.reserva.motivoAlumno}}</span>\\r\\n            <span ng-if=\\\"ctrl.reserva.estado === \\'CANCELADA_POR_PROFESOR\\'\\\">{{ctrl.reserva.motivoProfesor}}</span>\\r\\n        </div>\\r\\n\\r\\n        <!--Resultados de las clases finalizadas-->\\r\\n        <div ng-if=\\\"ctrl.evaluada && ctrl.reserva.motivoProfesor.length\\\">\\r\\n            <label-form key=\\\"reserva.motivo.profesor.title\\\" sufijo=\\\":\\\"></label-form>\\r\\n            {{ctrl.reserva.motivoProfesor}}\\r\\n        </div>\\r\\n        <div ng-if=\\\"ctrl.evaluada && ctrl.reserva.motivoAlumno.length\\\">\\r\\n            <label-form key=\\\"reserva.motivo.alumno.title\\\" sufijo=\\\":\\\"></label-form>\\r\\n            {{ctrl.reserva.motivoAlumno}}\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/miespacio/mi-espacio.template.html\",\"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n        <div ui-view=\\\"contentEspacio\\\"></div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/recuperar/recuperar.finish.html\",\"<h1>{{\\'recuperar.title\\' | translate}}</h1>\\r\\n\\r\\n<p>{{\\'recuperar.finish.info\\' | translate}}</p>\\r\\n\\r\\n<div class=\\\"alert alert-success\\\" ng-show=\\\"ctrl.success\\\" translate=\\\"recuperar.success\\\" translate-compile></div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n        <form class=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.save()\\\" novalidate>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"admin.changepassword.newpassword\\\" for=\\\"newPassword\\\" required=\\\"true\\\"></label-form>\\r\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"newPassword\\\" ng-maxlength=\\\"50\\\" ng-minlength=\\\"1\\\" ng-model=\\\"ctrl.newPassword\\\" required>\\r\\n                <password-strength-bar password-to-check=\\\"ctrl.newPassword\\\"></password-strength-bar>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"admin.changepassword.confirmpassword\\\" for=\\\"confirmPassword\\\" required=\\\"true\\\"></label-form>\\r\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" ng-maxlength=\\\"50\\\" ng-minlength=\\\"1\\\" ng-model=\\\"ctrl.confirmPassword\\\" required>\\r\\n            </div>\\r\\n\\r\\n            <!--Campos obligatorios-->\\r\\n            <div class=\\\"message-required\\\">{{\\'global.form.required\\' | translate}}</div>\\r\\n\\r\\n            <div>\\r\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\r\\n                    {{\\'recuperar.submit\\' | translate}}\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\");\n$templateCache.put(\"app/public/cuenta/recuperar/recuperar.init.html\",\"<h1>{{\\'recuperar.title\\' | translate}}</h1>\\r\\n\\r\\n<div class=\\\"alert alert-success\\\" ng-show=\\\"ctrl.success\\\" translate=\\\"recuperar.success\\\" translate-compile></div>\\r\\n\\r\\n<div ng-if=\\\"!ctrl.success\\\">\\r\\n    <p>{{\\'recuperar.info\\' | translate}}</p>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n            <form class=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.recuperar(ctrl.email)\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label-form key=\\\"registro.form.email\\\" required=\\\"true\\\" for=\\\"email\\\"></label-form>\\r\\n                    <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" ng-model=\\\"ctrl.email\\\" required>\\r\\n                </div>\\r\\n\\r\\n                <!--Campos obligatorios-->\\r\\n                <div class=\\\"message-required\\\">{{\\'global.form.required\\' | translate}}</div>\\r\\n\\r\\n                <div>\\r\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\r\\n                        {{\\'recuperar.submit\\' | translate}}\\r\\n                    </button>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/registro/registro.alumno.html\",\"<div class=\\\"row\\\">\\r\\n    <!--Imagen de perfil-->\\r\\n    <div class=\\\"col-sm-4 form-group\\\">\\r\\n        <imagen-perfil ng-model=\\\"ctrl.item.imagen\\\" ruta-carpeta-imagen=\\\"upload/usuarios/{{ctrl.item.id}}/perfil\\\" on-remove-image=\\\"ctrl.onRemoveImage()\\\"></imagen-perfil>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Nombre-->\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.alumno.form.nombre\\\" for=\\\"nombre\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"nombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.nombre\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Apellidos-->\\r\\n    <div class=\\\"col-sm-8\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.alumno.form.apellidos\\\" for=\\\"apellidos\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"apellidos\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.apellidos\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Email-->\\r\\n    <div class=\\\"col-sm-6\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.alumno.form.email\\\" for=\\\"email\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"email\\\" type=\\\"email\\\" ng-model=\\\"ctrl.item.email\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Skype-->\\r\\n    <div class=\\\"col-sm-6\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.alumno.form.skype\\\" for=\\\"skype\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"skype\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.skype\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<ng-include src=\\\"\\'bloque-password.html\\'\\\"></ng-include>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/registro/registro.html\",\"<!--Campos reutilizables-->\\r\\n<script type=\\\"text/ng-template\\\" id=\\\"bloque-password.html\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <!--Contraseña-->\\r\\n        <div class=\\\"col-sm-6\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"registro.form.contrasena\\\" for=\\\"password\\\" required=\\\"true\\\"></label-form>\\r\\n                <input class=\\\"form-control\\\" id=\\\"password\\\" type=\\\"password\\\" ng-model=\\\"ctrl.item.contrasenaClaro\\\" required\\r\\n                   autocomplete=\\\"new-password\\\">\\r\\n                <password-strength-bar password-to-check=\\\"ctrl.item.contrasenaClaro\\\"></password-strength-bar>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!--Repetir-->\\r\\n        <div class=\\\"col-sm-6\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label-form key=\\\"registro.form.repetircontrasena\\\" for=\\\"confirmPassword\\\" required=\\\"true\\\"></label-form>\\r\\n                <input class=\\\"form-control\\\" id=\\\"confirmPassword\\\" type=\\\"password\\\" ng-model=\\\"ctrl.confirmPassword\\\"\\r\\n                       required\\r\\n                   autocomplete=\\\"new-password\\\">\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</script>\\r\\n\\r\\n<!--Contenido-->\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n        <h1>\\r\\n            <enumerado base=\\\"registro.tipo\\\" value=\\\"{{ctrl.tipo}}\\\"></enumerado>\\r\\n        </h1>\\r\\n\\r\\n        <loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n\\r\\n        <div class=\\\"alert alert-info\\\" ng-show=\\\"ctrl.success\\\"> {{\\'registro.success.email\\' | translate}}</div>\\r\\n\\r\\n        <form ng-show=\\\"!ctrl.success\\\" name=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.save(ctrl.item)\\\" novalidate>\\r\\n\\r\\n            <div class=\\\"form-body\\\">\\r\\n\\r\\n                <!--Alumno-->\\r\\n                <div ng-if=\\\"ctrl.tipo == \\'alumno\\'\\\">\\r\\n                    <ng-include src=\\\"\\'app/public/cuenta/registro/registro.alumno.html\\'\\\"></ng-include>\\r\\n                </div>\\r\\n\\r\\n                <!--Campos obligatorios-->\\r\\n                <div class=\\\"message-required\\\">{{\\'global.form.required\\' | translate}}</div>\\r\\n\\r\\n                <!--Acepto las condiciones-->\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-sm-4\\\">\\r\\n                        <label class=\\\"noselect\\\">\\r\\n                            <input type=\\\"checkbox\\\" id=\\\"visible\\\" ng-model=\\\"ctrl.acepto\\\">\\r\\n                            {{\\'registro.form.acepto\\' | translate}}\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <!--Botones-->\\r\\n                <div class=\\\"form-bottom-buttons\\\">\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"$root.back()\\\">\\r\\n                        <span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;\\r\\n                        <span translate=\\\"admin.form.button.cancel\\\"></span>\\r\\n                    </button>\\r\\n\\r\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\r\\n                        <span class=\\\"glyphicon glyphicon-ok\\\"></span>&nbsp;\\r\\n                        <span translate=\\\"registro.form.save\\\"></span>\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/registro/registro.info.html\",\"<div class=\\\"row registro\\\">\\r\\n\\r\\n    <div class=\\\"login\\\">\\r\\n        <h1>{{\\'registro.title\\' | translate}}</h1>\\r\\n        <login foco=\\\"true\\\"></login>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"registro-info\\\">\\r\\n        <h1>{{\\'registro.info.titulo\\' | translate}}</h1>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <p translate=\\\"registro.info.mensaje\\\"></p>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"text-center botones\\\">\\r\\n            <social ng-if=\\\"false\\\" provider=\\\"google\\\"></social>\\r\\n            <social ng-if=\\\"false\\\" provider=\\\"facebook\\\"></social>\\r\\n\\r\\n            <a ui-sref=\\\"registro({tipo: \\'alumno\\'})\\\" class=\\\"btn btn-default btn-block\\\">{{\\'registro.info.registrate\\' | translate}}</a>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/validar/validar.html\",\"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-9\\\">\\r\\n        <h1 data-translate=\\\"activacion.title\\\"></h1>\\r\\n\\r\\n        <div class=\\\"alert alert-success\\\" ng-show=\\\"ctrl.success\\\" translate=\\\"activacion.success.activado\\\" translate-compile ng-if=\\\"ctrl.rol == \\'ROLE_ALUMNO\\'\\\"></div>\\r\\n<!--        <div class=\\\"alert alert-info\\\" ng-show=\\\"ctrl.success\\\" translate=\\\"activacion.success.pendiente\\\" translate-compile\\r\\n             ng-if=\\\"ctrl.rol == \\'ROLE_CENTRO\\' || ctrl.rol == \\'ROLE_LIBRERIA\\' || ctrl.rol == \\'ROLE_PROFESOR\\'\\\"></div>-->\\r\\n\\r\\n        <div class=\\\"alert alert-warning\\\" ng-show=\\\"ctrl.error\\\" translate=\\\"activacion.error.clave\\\"></div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-md-3\\\">\\r\\n        <login></login>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/profesor/info/profesor.details.html\",\"<profesor profesor=\\\"ctrl.profesor\\\"></profesor>\\r\\n\\r\\n<mi-agenda reservas=\\\"[]\\\"></mi-agenda>\\r\\n\");\n$templateCache.put(\"app/public/profesor/list/profesor.list.html\",\"<div class=\\\"main\\\">\\r\\n    <h1>{{\\'profesor.busqueda\\' | translate}}</h1>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-2\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <select-form id=\\\"idiomas\\\" model=\\\"ctrl.filter.idioma\\\" label=\\\"profesor.ensena\\\" options=\\\"$resolve.idiomas\\\" display=\\\"nombre\\\" empty=\\\"profesor.idioma\\\"></select-form>\\r\\n            </div>\\r\\n        </div>\\r\\n        <!--<div class=\\\"col-sm-2\\\">-->\\r\\n        <!--<div class=\\\"form-group\\\">-->\\r\\n        <!--<select-form id=\\\"niveles\\\" model=\\\"ctrl.filter.nivel\\\" label=\\\"profesor.nivel\\\"-->\\r\\n        <!--options=\\\"$resolve.niveles\\\" display=\\\"nombre\\\" empty=\\\"multiselect.cualquiera\\\"></select-form>-->\\r\\n        <!--</div>-->\\r\\n        <!--</div>-->\\r\\n        <div class=\\\"col-sm-2\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <enum-select id=\\\"dia\\\" label=\\\"profesor.dia\\\" model=\\\"ctrl.filter.dia\\\" options=\\\"$resolve.dias\\\" base=\\\"enum.dia\\\" empty=\\\"multiselect.cualquiera\\\" required=\\\"false\\\"></enum-select>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-2\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <enum-select id=\\\"horadia\\\" label=\\\"profesor.horadia\\\" model=\\\"ctrl.filter.horadia\\\" options=\\\"$resolve.horadias\\\" base=\\\"enum.horadia\\\" empty=\\\"multiselect.cualquiera\\\" required=\\\"false\\\"></enum-select>\\r\\n            </div>\\r\\n        </div>\\r\\n        <!--<div class=\\\"col-sm-3\\\">-->\\r\\n        <!--<div class=\\\"form-group\\\">-->\\r\\n        <!--<multi-select label=\\\"profesor.capacidades\\\" id=\\\"capacidades\\\" options=\\\"$resolve.capacidades\\\"-->\\r\\n        <!--model=\\\"ctrl.filter.capacidades\\\" display=\\\"nombre\\\" empty=\\\"multiselect.cualquiera\\\"-->\\r\\n        <!--template=\\\"\\'{{option.nombre}}\\'\\\"></multi-select>-->\\r\\n        <!--</div>-->\\r\\n        <!--</div>-->\\r\\n        <div class=\\\"col-sm-2\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <multi-select label=\\\"profesor.de\\\" id=\\\"paises\\\" options=\\\"$resolve.paises\\\" model=\\\"ctrl.filter.paises\\\" display=\\\"nombre\\\" empty=\\\"profesor.pais\\\" template=\\\"\\'{{option.nombre}}\\'\\\">\\r\\n                </multi-select>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--<div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <enum-select id=\\\"disponibilidad\\\" label=\\\"profesor.disponibilidad\\\" model=\\\"ctrl.filter.disponibilidad\\\"\\r\\n                             options=\\\"$resolve.disponibilidades\\\" base=\\\"enum.disponibilidad\\\"\\r\\n                             required=\\\"true\\\"></enum-select>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>-->\\r\\n\\r\\n    <div class=\\\"empty text-center\\\" ng-if=\\\"(!ctrl.profesores || ctrl.profesores.length==0) && !ctrl.loading\\\">\\r\\n        {{\\'profesor.empty\\' | translate}}\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"profesores\\\">\\r\\n        <div infinite-scroll=\\\"ctrl.cargar()\\\" infinite-scroll-distance=\\\"0\\\" infinite-scroll-disabled=\\\"ctrl.loading || ctrl.loaded\\\">\\r\\n            <div ng-repeat=\\\"profesor in ctrl.profesores track by profesor.id\\\">\\r\\n                <a ng-click=\\\"ctrl.abrir(profesor.id)\\\">\\r\\n                    <profesor profesor=\\\"profesor\\\"></profesor>\\r\\n                </a>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <loading is-loading=\\\"ctrl.loading\\\" class=\\\"center-block\\\"></loading>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/form/archivos/download/download.html\",\"<span ng-if=\\\"ctrl.showLabel\\\">{{ctrl.archivo || \\'-\\'}}</span>\\r\\n\\r\\n<span ng-if=\\\"ctrl.archivo && ctrl.url\\\" ng-click=\\\"ctrl.descargarArchivo()\\\" title=\\\"Descargar\\\" class=\\\"glyphicon glyphicon-download-alt boton-descarga\\\"></span>\\r\\n\");\n$templateCache.put(\"app/components/form/archivos/fileupload/file-upload.html\",\"<ng-form name=\\\"ficheroForm\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n                <!--<div ng-if=\\\"!ctrl.archivo\\\" class=\\\"datos-archivo pull-left\\\">{{\\'upload.file.vacio\\' | translate}}</div>-->\\r\\n                <div ng-if=\\\"ctrl.archivo\\\" class=\\\"datos-archivo pull-left\\\">\\r\\n                    <download ng-if=\\\"ctrl.url && !ctrl.archivoTemporal\\\" archivo=\\\"ctrl.archivo\\\" url=\\\"{{ctrl.url}}\\\" show-label=\\\"false\\\" has-any-authority=\\\"{{ctrl.authorities}}\\\"></download>\\r\\n\\r\\n                    <span ng-if=\\\"!ctrl.progresoArchivo\\\" class=\\\"glyphicon glyphicon-remove clickable eliminar-archivo\\\" title=\\\"Eliminar\\\" ng-click=\\\"ctrl.eliminarArchivo()\\\"></span>\\r\\n\\r\\n                    <span>{{ctrl.archivo}}</span>\\r\\n                </div>\\r\\n\\r\\n                <loading is-loading=\\\"ctrl.progresoArchivo\\\"></loading>\\r\\n\\r\\n                <input id=\\\"{{ctrl.id}}\\\" name=\\\"archivo\\\" type=\\\"file\\\" class=\\\"oculto\\\" ngf-select accept=\\\"{{ctrl.accept}}\\\" ngf-change=\\\"ctrl.onArchivoSelect($files, ficheroForm)\\\">\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n                <button type=\\\"button\\\" ng-disabled=\\\"ctrl.progresoArchivo\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-click=\\\"ctrl.upload()\\\">\\r\\n                    {{\\'upload.file.title\\' | translate}}\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-form>\\r\\n\");\n$templateCache.put(\"app/components/form/archivos/imagen/imagen.html\",\"<div class=\\\"form-group\\\">\\r\\n    <ng-form name=\\\"imagenForm\\\">\\r\\n\\r\\n        <div class=\\\"enxe-boton-elegir\\\" ng-show=\\\"ctrl.edicion && !ctrl.ngModel.rutaImagen && !ctrl.progresoImagen\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm pull-left\\\" ng-disabled=\\\"ctrl.progresoImagen\\\" ng-click=\\\"ctrl.clickUpload()\\\">\\r\\n                {{\\'imagen.upload\\' | translate}}\\r\\n            </button>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"imagen\\\" ng-if=\\\"ctrl.ngModel.rutaImagen && ctrl.edicion\\\" ng-class=\\\"{\\'imagen-profile\\' : ctrl.profile}\\\">\\r\\n            <div class=\\\"imagen-wrap\\\" ng-if=\\\"ctrl.ngModel.path\\\">\\r\\n                <span class=\\\"glyphicon glyphicon-remove clickable close\\\" ng-click=\\\"ctrl.eliminarImagen()\\\" title=\\\"{{\\'admin.form.button.delete\\' | translate}}\\\"></span>\\r\\n\\r\\n                <img class=\\\"enxe-img pull-left\\\" ng-src=\\\"{{ctrl.ngModel.rutaImagen}}\\\">\\r\\n\\r\\n                <radio ng-if=\\\"ctrl.ngModelRadio\\\" class=\\\"principal\\\" model=\\\"ctrl.ngModelRadio\\\" value=\\\"{{ctrl.indice}}\\\"></radio>\\r\\n            </div>\\r\\n\\r\\n            <loading is-loading=\\\"ctrl.progresoImagen\\\"></loading>\\r\\n        </div>\\r\\n\\r\\n        <input id=\\\"inputFoto{{ctrl.indice}}\\\" type=\\\"file\\\" ngf-select=\\\"\\\" class=\\\"oculto\\\" ngf-change=\\\"ctrl.onImagenSelect($files, imagenForm, ctrl.indice)\\\" accept=\\\".jpg,.png,.gif,.jpeg\\\">\\r\\n\\r\\n    </ng-form>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/form/archivos/imagenperfil/imagen-perfil.html\",\"<div class=\\\"form-group imagen-perfil\\\">\\r\\n    <ng-form name=\\\"imagenPerfilForm\\\">\\r\\n\\r\\n        <div class=\\\"enxe-boton-elegir\\\" ng-show=\\\"!ctrl.editPreview && !ctrl.ngModel.path && !ctrl.progresoImagen || !ctrl.myCroppedImage\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-disabled=\\\"ctrl.progresoImagen\\\" ng-click=\\\"ctrl.clickUpload()\\\">\\r\\n                {{\\'imagen.form.uploadperfil\\' | translate}}\\r\\n            </button>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"imagen imagen-profile\\\" ng-show=\\\"ctrl.ngModel.path || ctrl.editPreview && ctrl.myCroppedImage\\\">\\r\\n            <div class=\\\"imagen-wrap\\\">\\r\\n                <span class=\\\"glyphicon glyphicon-remove clickable close\\\" ng-click=\\\"ctrl.eliminarImagen()\\\" title=\\\"{{\\'admin.form.button.delete\\' | translate}}\\\" ng-show=\\\"!ctrl.editPreview\\\"></span>\\r\\n\\r\\n                <img class=\\\"enxe-img pull-left redonda\\\" ng-src=\\\"{{ctrl.myCroppedImage}}\\\" ng-show=\\\"!ctrl.editPreview\\\">\\r\\n\\r\\n                <div class=\\\"crop-area pull-left\\\" ng-show=\\\"ctrl.editPreview\\\">\\r\\n                    <ui-cropper image=\\\"ctrl.myImage\\\" area-type=\\\"circle\\\" result-image=\\\"ctrl.myCroppedImage\\\" live-view=\\\"ctrl.blockingObject\\\" aspect-ratio=\\\"1\\\" area-min-size=\\\"50\\\" result-image-size=\\\"200\\\"></ui-cropper>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <loading is-loading=\\\"ctrl.progresoImagen\\\"></loading>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-default btn-confirm\\\" ng-show=\\\"ctrl.editPreview && ctrl.myCroppedImage\\\" ng-click=\\\"ctrl.onImagenSelect(ctrl.myCroppedImage, imagenPerfilForm)\\\">\\r\\n                    {{\\'imagen.form.setperfil\\' | translate}}\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <input id=\\\"inputFoto{{ctrl.indice}}\\\" type=\\\"file\\\" ngf-select=\\\"\\\" class=\\\"oculto\\\" ngf-change=\\\"ctrl.preview($files)\\\" accept=\\\".jpg,.png,.gif,.jpeg\\\">\\r\\n\\r\\n    </ng-form>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/components/form/archivos/imagenperfilver/imagen-perfil-ver.html\",\"<div class=\\\"imagen-perfil\\\">\\r\\n    <span class=\\\"glyphicon glyphicon-user\\\" ng-class=\\\"ctrl.mini ? \\'mini\\' : \\'normal\\'\\\" ng-if=\\\"!ctrl.usuario.foto\\\"></span>\\r\\n    <img ng-class=\\\"ctrl.mini ? \\'mini\\' : \\'normal\\'\\\" ng-src=\\\"upload/usuarios/{{ctrl.usuario.id}}/perfil/n_{{ctrl.usuario.foto}}\\\" ng-if=\\\"ctrl.usuario.foto\\\">\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/miespacio/miagenda/mi-agenda.html\",\"<h1 translate=\\\"miespacio.miagenda.title\\\"></h1>\\r\\n\\r\\n<ul class=\\\"nav nav-tabs\\\">\\r\\n    <li ui-sref-active=\\\"active\\\">\\r\\n        <a ui-sref=\\\"miespacio/miagenda/estado({canceladasRechazadas:\\'false\\'})\\\" translate=\\\"miespacio.miagenda.TODOS\\\"></a>\\r\\n    </li>\\r\\n    <li ui-sref-active=\\\"active\\\">\\r\\n        <a ui-sref=\\\"miespacio/miagenda/estado({canceladasRechazadas:\\'true\\'})\\\" translate=\\\"miespacio.miagenda.RECHAZADAS_O_CANCELADAS\\\"></a>\\r\\n    </li>\\r\\n</ul>\\r\\n\\r\\n<div ui-view=\\\"contentMiagenda\\\"></div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/miespacio/misalumnos/mis-alumnos.html\",\"<h1 translate=\\\"global.menu.miespacio.misalumnos\\\"></h1>\\r\\n\\r\\n<div class=\\\"form-group\\\">\\r\\n    <div>\\r\\n        <label translate=\\\"miespacio.misalumnos.empresa.creditosTotales\\\"></label>\\r\\n        {{ctrl.usuario.creditosTotales}}\\r\\n    </div>\\r\\n\\r\\n    <div>\\r\\n        <label translate=\\\"miespacio.misalumnos.empresa.creditosDistribuidos\\\"></label>\\r\\n        {{ctrl.usuario.creditosDistribuidos}}\\r\\n    </div>\\r\\n\\r\\n    <div>\\r\\n        <label translate=\\\"miespacio.misalumnos.empresa.creditosDisponibles\\\"></label>\\r\\n        {{ctrl.usuario.creditosDisponibles}}\\r\\n    </div>\\r\\n\\r\\n    <!--TODO: Créditos consumidos? Si es necesario, hacer una petición REST simplemente para obtener el valor, o si no un DTO con todas las estadisticas-->\\r\\n\\r\\n</div>\\r\\n\\r\\n<mis-alumnos-list></mis-alumnos-list>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/miespacio/perfil/perfil-alumno.form.html\",\"<div class=\\\"row\\\">\\r\\n    <!--Imagen de perfil-->\\r\\n    <div class=\\\"col-sm-4 form-group\\\">\\r\\n        <imagen-perfil ng-model=\\\"ctrl.item.imagen\\\" ruta-carpeta-imagen=\\\"upload/usuarios/{{ctrl.item.id}}/perfil\\\" on-remove-image=\\\"ctrl.onRemoveImage()\\\"></imagen-perfil>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Nombre-->\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.alumno.form.nombre\\\" for=\\\"nombre\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"nombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.nombre\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Apellidos-->\\r\\n    <div class=\\\"col-sm-5\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.alumno.form.apellidos\\\" for=\\\"apellidos\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"apellidos\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.apellidos\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Créditos-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.alumno.form.creditosdisponibles\\\" for=\\\"creditos\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"creditos\\\" type=\\\"number\\\" ng-model=\\\"ctrl.item.creditosDisponibles\\\" disabled=\\\"disabled\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Email-->\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.alumno.form.email\\\" for=\\\"email\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"email\\\" type=\\\"email\\\" ng-model=\\\"ctrl.item.email\\\" required disabled=\\\"disabled\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Skype-->\\r\\n    <div class=\\\"col-sm-5\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.alumno.form.skype\\\" for=\\\"skype\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"skype\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.skype\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Teléfono móvil-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.empresa.form.telefonomovil\\\" for=\\\"telefonoMovil\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"telefonoMovil\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.telefonoMovil\\\" required maxlength=\\\"20\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Observaciones-->\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <text-area label=\\\"admin.empresa.form.observaciones\\\" model=\\\"ctrl.item.observaciones\\\" id=\\\"observaciones\\\"></text-area>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/miespacio/perfil/perfil-datos-facturacion.form.html\",\"<!-- Datos fiscales -->\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <h4>{{\\'admin.datosfacturacion.title\\' | translate}}</h4>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!-- Los campos son obligatorios si marcamos el check de solicitud de la factura => ctrl.solicitarFactura -->\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Nombre-->\\r\\n    <div class=\\\"col-sm-9\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.nombre\\\" for=\\\"dfnombre\\\" required=\\\"ctrl.solicitarFactura\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfnombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.nombre\\\" ng-required=\\\"ctrl.solicitarFactura\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--CIF-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.cifnif\\\" for=\\\"dfcif\\\" required=\\\"ctrl.solicitarFactura\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfcif\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.nif\\\" maxlength=\\\"20\\\" ng-required=\\\"ctrl.solicitarFactura\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Provincia-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.provincia\\\" for=\\\"dfprovincia\\\" required=\\\"ctrl.solicitarFactura\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfprovincia\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.provincia\\\" maxlength=\\\"50\\\" ng-required=\\\"ctrl.solicitarFactura\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Localidad-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.localidad\\\" for=\\\"dflocalidad\\\" required=\\\"ctrl.solicitarFactura\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dflocalidad\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.localidad\\\" maxlength=\\\"50\\\" ng-required=\\\"ctrl.solicitarFactura\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--CP-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.cp\\\" for=\\\"dfcp\\\" required=\\\"ctrl.solicitarFactura\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfcp\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.codigoPostal\\\" maxlength=\\\"10\\\" ng-required=\\\"ctrl.solicitarFactura\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Dirección-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.datosfacturacion.direccion\\\" for=\\\"dfdireccion\\\" required=\\\"ctrl.solicitarFactura\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"dfdireccion\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.datosFacturacion.direccion\\\" maxlength=\\\"500\\\" ng-required=\\\"ctrl.solicitarFactura\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/miespacio/perfil/perfil-empresa.form.html\",\"<div class=\\\"row\\\">\\r\\n    <!--Email-->\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.empresa.form.email\\\" for=\\\"email\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"email\\\" type=\\\"email\\\" ng-model=\\\"ctrl.item.email\\\" required disabled=\\\"disabled\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Nombre-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.empresa.form.nombre\\\" for=\\\"nombre\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"nombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.nombre\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Teléfono móvil-->\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.empresa.form.telefonomovil\\\" for=\\\"telefonoMovil\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"telefonoMovil\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.telefonoMovil\\\" required=\\\"true\\\" maxlength=\\\"20\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Créditos-->\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.empresa.form.creditosdisponibles\\\" for=\\\"creditos\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"creditos\\\" type=\\\"number\\\" ng-model=\\\"ctrl.item.creditosDisponibles\\\" min=\\\"0\\\" disabled=\\\"disabled\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--&lt;!&ndash;Fecha de caducidad&ndash;&gt;-->\\r\\n    <!--<div class=\\\"col-sm-3\\\">-->\\r\\n    <!--<div class=\\\"form-group\\\">-->\\r\\n    <!--<date-picker id=\\\"caducidad\\\" model=\\\"ctrl.item.caducidad\\\"-->\\r\\n    <!--label=\\\"admin.empresa.form.fechacaducidad\\\" required=\\\"true\\\"-->\\r\\n    <!--options=\\\"{minDate: \\'today\\', maxDate: \\'\\', datepickerMode: \\'day\\'}\\\">-->\\r\\n    <!--</date-picker>-->\\r\\n    <!--</div>-->\\r\\n    <!--</div>-->\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Observaciones-->\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <text-area label=\\\"admin.empresa.form.observaciones\\\" model=\\\"ctrl.item.observaciones\\\" id=\\\"observaciones\\\"></text-area>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/miespacio/perfil/perfil-profesor.form.html\",\"<!-- Datos personales -->\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <h4>{{\\'admin.profesor.form.datospersonales\\' | translate}}</h4>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Imagen de perfil-->\\r\\n    <div class=\\\"col-sm-4 form-group\\\">\\r\\n        <imagen-perfil ng-model=\\\"ctrl.item.imagen\\\" ruta-carpeta-imagen=\\\"upload/usuarios/{{ctrl.item.id}}/perfil\\\" on-remove-image=\\\"ctrl.onRemoveImage()\\\"></imagen-perfil>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Nombre-->\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.profesor.form.nombre\\\" for=\\\"nombre\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"nombre\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.nombre\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Apellidos-->\\r\\n    <div class=\\\"col-sm-8\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.profesor.form.apellidos\\\" for=\\\"apellidos\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"apellidos\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.apellidos\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Skype-->\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.profesor.form.skype\\\" for=\\\"skype\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"skype\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.skype\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Email-->\\r\\n    <div class=\\\"col-sm-8\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.profesor.form.email\\\" for=\\\"email\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"email\\\" type=\\\"email\\\" ng-model=\\\"ctrl.item.email\\\" required disabled=\\\"disabled\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Teléfono móvil-->\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.profesor.form.telefonomovil\\\" for=\\\"telefonoMovil\\\" required=\\\"true\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"telefonoMovil\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.telefonoMovil\\\" required>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--País de origen-->\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <tesauro id=\\\"pais\\\" ng-model=\\\"ctrl.item.pais\\\" resource=\\\"ctrl.paisService\\\" method=\\\"query\\\" restricted=\\\"true\\\" multiple=\\\"false\\\" min-length=\\\"0\\\" label=\\\"admin.profesor.form.paisorigen\\\" eliminable=\\\"true\\\" parameters=\\\"{sortProperty: \\'nombre\\', size: 20}\\\" required=\\\"true\\\"></tesauro>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--Fecha de nacimiento-->\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <date-picker id=\\\"fechanacimiento\\\" model=\\\"ctrl.item.fechaNacimiento\\\" label=\\\"admin.profesor.form.fechanacimiento\\\" required=\\\"true\\\" options=\\\"{minDate: \\'\\', maxDate: \\'today\\', datepickerMode: \\'day\\'}\\\">\\r\\n            </date-picker>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!-- Datos profesionales -->\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <h4>{{\\'admin.profesor.form.datosprofesionales\\' | translate}}</h4>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!--<div class=\\\"row\\\">-->\\r\\n<!--&lt;!&ndash;Disponibilidad&ndash;&gt;-->\\r\\n<!--<div class=\\\"col-sm-4\\\">-->\\r\\n<!--<div class=\\\"form-group\\\">-->\\r\\n<!--<enum-select id=\\\"disponibilidad\\\" label=\\\"admin.profesor.form.disponibilidad\\\" model=\\\"ctrl.item.disponibilidad\\\"-->\\r\\n<!--options=\\\"ctrl.disponibilidades\\\" base=\\\"enum.disponibilidad\\\" required=\\\"true\\\"></enum-select>-->\\r\\n<!--</div>-->\\r\\n<!--</div>-->\\r\\n\\r\\n<!--&lt;!&ndash;Otras capacidades&ndash;&gt;-->\\r\\n<!--<div class=\\\"col-sm-8\\\">-->\\r\\n<!--<div class=\\\"form-group\\\">-->\\r\\n<!--&lt;!&ndash;<button-create click=\\\"ctrl.openCapacidadModal\\\"></button-create>&ndash;&gt;-->\\r\\n<!--<multi-select label=\\\"admin.profesor.form.capacidades\\\" id=\\\"capacidades\\\" options=\\\"ctrl.capacidades\\\"-->\\r\\n<!--model=\\\"ctrl.item.capacidades\\\"-->\\r\\n<!--display=\\\"nombre\\\"-->\\r\\n<!--template=\\\"\\'{{option.nombre}}\\'\\\"></multi-select>-->\\r\\n<!--</div>-->\\r\\n<!--</div>-->\\r\\n\\r\\n<!--<div class=\\\"col-sm-4\\\">-->\\r\\n<!--<div class=\\\"form-group\\\">-->\\r\\n<!--<select-form id=\\\"zonasHorarias\\\" model=\\\"ctrl.item.zonaHoraria\\\" label=\\\"admin.profesor.form.zonahoraria\\\"-->\\r\\n<!--options=\\\"ctrl.zonasHorarias\\\" display=\\\"gmt\\\" empty=\\\"multiselect.default\\\" required=\\\"true\\\"></select-form>-->\\r\\n<!--</div>-->\\r\\n<!--</div>-->\\r\\n<!--</div>-->\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Idiomas y niveles del profesor-->\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <list-form label=\\\"admin.profesor.form.idiomas\\\" list=\\\"ctrl.item.idiomas\\\" resolve=\\\"{idiomaService: ctrl.idiomaService, niveles: ctrl.niveles}\\\" template-url=\\\"profesor.idiomas.html\\\"></list-form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<script type=\\\"text/ng-template\\\" id=\\\"profesor.idiomas.html\\\">\\r\\n    <!--Idioma-->\\r\\n    <div class=\\\"col-sm-11\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <tesauro id=\\\"profesor_idioma_{{$index}}\\\" ng-model=\\\"element.idioma\\\"\\r\\n                     resource=\\\"ctrl.resolve.idiomaService\\\" method=\\\"findAll\\\"\\r\\n                     restricted=\\\"true\\\" multiple=\\\"false\\\" min-length=\\\"0\\\"\\r\\n                     label=\\\"admin.profesor.form.idioma\\\" eliminable=\\\"true\\\"\\r\\n                     parameters=\\\"{sortProperty: \\'nombre\\'}\\\" required=\\\"true\\\"></tesauro>\\r\\n        </div>\\r\\n    </div>\\r\\n    <!--Nivel-->\\r\\n    <!--<div class=\\\"col-sm-5\\\">-->\\r\\n    <!--<div class=\\\"form-group\\\">-->\\r\\n    <!--<multi-select label=\\\"admin.profesor.form.niveles\\\" id=\\\"idioma_nivel_{{$index}}\\\" options=\\\"ctrl.resolve.niveles\\\"-->\\r\\n    <!--model=\\\"element.niveles\\\" display=\\\"nombre\\\" template=\\\"\\'{{option.nombre}}\\'\\\">-->\\r\\n    <!--</multi-select>-->\\r\\n    <!--</div>-->\\r\\n    <!--</div>-->\\r\\n</script>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Texto de presentación-->\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <text-area label=\\\"admin.profesor.form.textopresentacion\\\" model=\\\"ctrl.item.textoPresentacion\\\" id=\\\"textopresentacion\\\" required=\\\"true\\\"></text-area>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!--Descripción de las capacidades-->\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label-form key=\\\"admin.profesor.form.descripcioncapacidades\\\" for=\\\"descripcionCapacidades\\\"></label-form>\\r\\n            <input class=\\\"form-control\\\" id=\\\"descripcionCapacidades\\\" type=\\\"text\\\" ng-model=\\\"ctrl.item.descripcionCapacidades\\\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n$templateCache.put(\"app/public/cuenta/miespacio/perfil/perfil.form.html\",\"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n        <h1>{{\\'miespacio.miperfil.title\\' | translate}}</h1>\\r\\n\\r\\n        <form name=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"ctrl.save(ctrl.item)\\\" novalidate>\\r\\n\\r\\n            <div class=\\\"form-body\\\">\\r\\n\\r\\n                <!--Alumno-->\\r\\n                <div ng-if=\\\"ctrl.item.type == \\'alumno\\'\\\">\\r\\n                    <ng-include src=\\\"\\'app/public/cuenta/miespacio/perfil/perfil-alumno.form.html\\'\\\"></ng-include>\\r\\n                </div>\\r\\n\\r\\n                <!--Profesor-->\\r\\n                <div ng-if=\\\"ctrl.item.type == \\'profesor\\'\\\">\\r\\n                    <ng-include src=\\\"\\'app/public/cuenta/miespacio/perfil/perfil-profesor.form.html\\'\\\"></ng-include>\\r\\n                </div>\\r\\n\\r\\n                <!--Empresa-->\\r\\n                <div ng-if=\\\"ctrl.item.type == \\'empresa\\'\\\">\\r\\n                    <ng-include src=\\\"\\'app/public/cuenta/miespacio/perfil/perfil-empresa.form.html\\'\\\"></ng-include>\\r\\n                </div>\\r\\n\\r\\n                <div ng-if=\\\"ctrl.item.type == \\'profesor\\' || ctrl.item.type == \\'empresa\\'\\\">\\r\\n                    <ng-include src=\\\"\\'app/public/cuenta/miespacio/perfil/perfil-datos-facturacion.form.html\\'\\\"></ng-include>\\r\\n                </div>\\r\\n\\r\\n                <!--Campos obligatorios-->\\r\\n                <div class=\\\"message-required\\\">{{\\'global.form.required\\' | translate}}</div>\\r\\n\\r\\n                <!--Botones-->\\r\\n                <div class=\\\"form-bottom-buttons\\\">\\r\\n                    <a class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"ctrl.confirmarBaja()\\\" ng-if=\\\"ctrl.item.type == \\'alumno\\'\\\">\\r\\n                        <span translate=\\\"miespacio.miperfil.baja.titulo\\\"></span>\\r\\n                    </a>\\r\\n\\r\\n                    <a class=\\\"btn btn-default btn-sm\\\" ui-sref=\\\"miespacio/perfil/contrasena\\\">\\r\\n                        <span translate=\\\"miespacio.miperfil.cambiarcontrasena\\\"></span>\\r\\n                    </a>\\r\\n\\r\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\r\\n                        <span class=\\\"glyphicon glyphicon-ok\\\"></span>&nbsp;\\r\\n                        <span translate=\\\"admin.form.button.save\\\"></span>\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n\");}]);})();","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('ProfesorDetailsController', ProfesorDetailsController);\r\n\r\n    /* @ngInject */\r\n    function ProfesorDetailsController(profesor) {\r\n        var vm = this;\r\n        vm.profesor = profesor;\r\n\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Botón para la creación de entidades dentro de otras. Usado para los formularios dentro de ventanas modales.\r\n\r\n    // click: Función que se va a llamar al pulsar el botón.\r\n    // params: Parámetros que se enviará a la función.\r\n\r\n    // Ejemplo de uso: FILO1701, traduccion-form.admin.*\r\n\r\n    angular\r\n        .module('app')\r\n        .component('buttonCreate', {\r\n            template: '<a ng-click=\"ctrl.click(ctrl.params)\" class=\"button-create\"' +\r\n            ' title=\"{{\\'admin.form.button.create\\' | translate}}\"><i class=\"fa fa-plus-square\"></i></a>',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                click: '<',\r\n                params: '<'\r\n            }\r\n        });\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/profesor/info', {\r\n                parent: 'miespacio',\r\n                url: '/busqueda-profesores/:id',\r\n                data: {\r\n                    pageTitle: 'global.menu.profesor.info'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        templateUrl: 'app/public/profesor/info/profesor.details.html',\r\n                        controller: 'ProfesorDetailsController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    profesor: function (User, $stateParams) {\r\n                        return User.getProfesorById({id: $stateParams.id}).$promise;\r\n                    }\r\n                 }\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/perfil', {\r\n                parent: 'miespacio',\r\n                url: '/perfil',\r\n                data: {\r\n                    authorities: ['ROLE_AUTHENTICATED'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        templateUrl: 'app/public/cuenta/miespacio/perfil/perfil.form.html',\r\n                        controller: 'PerfilFormController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    itemData: function (Principal) {\r\n                        return Principal.identity().then(function (data) {\r\n                            return data;\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n            .state('miespacio/perfil/contrasena', {\r\n                parent: 'miespacio',\r\n                url: '/perfil/modificar-contrasena',\r\n                views: {\r\n                    'contentEspacio': {\r\n                        template: \"<h1>{{'miespacio.miperfil.cambiarcontrasena' | translate}}</h1>\" +\r\n                        \"<change-password></change-password>\"\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('PerfilFormController', PerfilFormController);\r\n\r\n    /* @ngInject */\r\n    function PerfilFormController($timeout, $state, itemData, ModalService,\r\n                                  Usuario, EnumService, Principal, Capacidad, Idioma, Pais, Nivel, User) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group>input#nombre').focus();\r\n        });\r\n\r\n        vm.mode = 'create';\r\n\r\n        function initForm() {\r\n            vm.item = angular.copy(itemData);\r\n\r\n            initImagen();\r\n        }\r\n\r\n        initForm();\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            if (vm.item.centro) {\r\n                vm.item.centro.type = 'centro';\r\n            }\r\n\r\n            // FIXME: Apaño temporal para la edición de fechas...\r\n            if (angular.isNumber(vm.item.fechaNacimiento)) {\r\n                vm.item.fechaNacimiento = vm.item.fechaNacimiento / 1000;\r\n            }\r\n\r\n            Usuario.edit(vm.item).$promise.then(function (data) {\r\n                vm.item.fechaNacimiento = data.fechaNacimiento * 1000;\r\n                Principal.identity(true);\r\n            });\r\n        };\r\n\r\n        // Foto de perfil\r\n        function initImagen() {\r\n            if (!vm.item.imagen) {\r\n                vm.item.imagen = {};\r\n            }\r\n            if (vm.item.foto) {\r\n                vm.item.imagen.path = vm.item.foto;\r\n            }\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        Capacidad.findAll({sortProperty: 'nombre'}).$promise.then(function (data) {\r\n            vm.capacidades = data.content;\r\n        });\r\n\r\n        /*EnumService.get(\"disponibilidad\").then(function(data) {\r\n            vm.disponibilidades = data;\r\n        });*/\r\n\r\n        Nivel.query().$promise.then(function(data) {\r\n            vm.niveles = data;\r\n        });\r\n\r\n        vm.idiomaService = Idioma;\r\n        vm.nivelService = Nivel;\r\n        vm.paisService = Pais;\r\n\r\n        User.zonasHorarias().$promise.then(function(data) {\r\n            vm.zonasHorarias = data;\r\n        });\r\n\r\n        // Darse de baja\r\n        vm.confirmarBaja = function () {\r\n            ModalService.open({\r\n                templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                controller: 'ConfirmModalController',\r\n                controllerAs: 'ctrl',\r\n                resolve: {\r\n                    item: function () {\r\n                        return vm.item;\r\n                    },\r\n                    params: function () {\r\n                        return {\r\n                            title: 'miespacio.miperfil.baja.titulo',\r\n                            body: 'miespacio.miperfil.baja.confirmacion'\r\n                        };\r\n                    },\r\n                    /* @ngInject */\r\n                    tipo: function (Perfil) {\r\n                        return Perfil;\r\n                    },\r\n                    funcion: function () {\r\n                        return \"baja\";\r\n                    },\r\n                    parametros: function () {\r\n                        return {};\r\n                    }\r\n                }\r\n            }).result.then(function () {\r\n                $state.go(\"logout\");\r\n            });\r\n        }\r\n\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        var base = \"paquetecreditos\";\r\n\r\n        $stateProvider\r\n            .state(base, {\r\n                parent: 'public',\r\n                url: '/creditos',\r\n                redirectTo: base + '/list',\r\n                data: {\r\n                    authorities: ['ROLE_ANONYMOUS', 'ROLE_ALUMNO'],\r\n                    pageTitle: 'global.paquetescreditos'\r\n                }\r\n            })\r\n            .state(base + '/list', {\r\n                parent: base,\r\n                url: '/listar',\r\n                views: {\r\n                    'content@': {\r\n                        controllerAs: 'ctrl',\r\n                        template: '<paquetecreditos-list></paquetecreditos-list>',\r\n                        controller: function ($timeout, $state, Principal) {\r\n                            $timeout(function () {\r\n                                Principal.identity().then(function (data) {\r\n                                    // Si es un alumno con empresa asociada, redirigimos a inicio\r\n                                    if (data && data.rol === 'ROLE_ALUMNO' && data.empresa != null) {\r\n                                        $state.go(\"home\");\r\n                                    }\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            .state(base + '/comprar', {\r\n                parent: base,\r\n                url: '/comprar/:paqueteId',\r\n                views: {\r\n                    'content@': {\r\n                        controllerAs: 'ctrl',\r\n                        template: '<paquetecreditos-comprar paquete-creditos=\"$resolve.paqueteCreditos\" ' +\r\n                            'datos-facturacion=\"$resolve.datosFacturacion\"></paquetecreditos-comprar>'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    paqueteId: function ($stateParams) {\r\n                        return $stateParams.paqueteId;\r\n                    },\r\n                    /* @ngInject */\r\n                    paqueteCreditos: function (paqueteId, Paquetecreditos) {\r\n                        return Paquetecreditos.get({id: paqueteId}).$promise;\r\n                    },\r\n                    /* @ngInject */\r\n                    datosFacturacion: function (DatosFacturacion) {\r\n                        return DatosFacturacion.getDatosFacturacionDeUsuario().$promise;\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/miscompras', {\r\n                parent: 'miespacio',\r\n                url: '/mis-compras',\r\n                data: {\r\n                    authorities: ['ROLE_ALUMNO'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        template: '<compra-list usuario=\"$resolve.usuario\"></compra-list>',\r\n                        controllerAs: 'ctrl',\r\n                        controller: function ($timeout, $state, Principal) {\r\n                            $timeout(function () {\r\n                                Principal.identity().then(function (data) {\r\n                                    // Si es un alumno con empresa asociada, redirigimos a inicio\r\n                                    if (data && data.rol === 'ROLE_ALUMNO' && data.empresa != null) {\r\n                                        $state.go(\"home\");\r\n                                    }\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    usuario: function (Principal) {\r\n                        return Principal.identity().then(function (data) {\r\n                            return data;\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/misalumnos', {\r\n                parent: 'miespacio',\r\n                url: '/mis-alumnos',\r\n                data: {\r\n                    authorities: ['ROLE_EMPRESA'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        templateUrl: 'app/public/cuenta/miespacio/misalumnos/mis-alumnos.html',\r\n                        controllerAs: 'ctrl',\r\n                        /* @ngInject */\r\n                        controller: function (Principal) {\r\n                            var vm = this;\r\n                            Principal.identity().then(function (data) {\r\n                                vm.usuario = data;\r\n                            });\r\n                        }\r\n                    }\r\n                },\r\n                resolve: {}\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/miagenda', {\r\n                parent: 'miespacio',\r\n                url: '/mi-agenda',\r\n                redirectTo: 'miespacio/miagenda/estado',\r\n                data: {\r\n                    // Gestión de roles en el resolve\r\n                    authorities: ['ROLE_ALUMNO', 'ROLE_PROFESOR'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'contentEspacio': {\r\n                        templateUrl: 'app/public/cuenta/miespacio/miagenda/mi-agenda.html',\r\n                        /* @ngInject */\r\n                        controller: function (AlertService, Principal) {\r\n                            Principal.identity().then(function (data) {\r\n                                AlertService.info(\"profesor.zonahoraria\", {gmt: data.zonaHoraria.gmt});\r\n                            });\r\n                        },\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            })\r\n            .state('miespacio/miagenda/estado', {\r\n                parent: 'miespacio/miagenda',\r\n                url: '/canceladas-o-rechazadas/:canceladasRechazadas',\r\n                params: {\r\n                    canceladasRechazadas: 'false'\r\n                },\r\n                views: {\r\n                    'contentMiagenda': {\r\n                        template: '<mi-agenda usuario-autenticado=\"$resolve.usuarioAutenticado\"></mi-agenda>',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    usuarioAutenticado: function (Principal) {\r\n                        return Principal.identity().then(function (data) {\r\n                            return data;\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc controller\r\n     * @name app.controller:ConfirmModalController\r\n     * @description\r\n     * Controller que, asociado al archivo confirm.modal.html, permite abrir una ventana modal de confirmación que lanzará una acción.\r\n     *\r\n     * Es obligatorio indicar en el Resolve cada uno de los campos listados a continuación.\r\n     *\r\n     * @param {Object} item  Elemento del que se muestra información\r\n     * @param {Object} params JSON de la forma {title: '', body: '', property: ''}\r\n     * @param {Object} tipo Resource que tiene la función que se llamará\r\n     * @param {String} funcion Nombre de la función\r\n     * @param {Object} parametros Parameteros que se enviará la a función de confirmación\r\n     * @param {String}\r\n     */\r\n    angular.module('app')\r\n        .controller('ConfirmModalController', Controller);\r\n\r\n    /* @ngInject */\r\n    function Controller(item, params, tipo, funcion, parametros, ModalService) {\r\n        var vm = this;\r\n\r\n        vm.dismiss = ModalService.dismiss;\r\n        vm.item = item;\r\n        vm.params = params;\r\n\r\n        vm.confirm = function () {\r\n            tipo[funcion](parametros).$promise.then(function () {\r\n                ModalService.close(vm.item);\r\n            });\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('validar', {\r\n                parent: 'public',\r\n                url: '/validar?key',\r\n                data: {\r\n                    pageTitle: 'global.menu.activar'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/validar/validar.html',\r\n                        controller: 'ValidarController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('ValidarController', ValidarController);\r\n\r\n    /* @ngInject */\r\n    function ValidarController($stateParams, Auth) {\r\n        var vm = this;\r\n\r\n        Auth.validateAccount($stateParams.key).then(function (result) {\r\n            vm.error = null;\r\n            vm.success = true;\r\n            vm.rol = result.data;\r\n        }).catch(function () {\r\n            vm.error = 'ERROR';\r\n        });\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    // Solo se permite el tipo de registro 'ROLE_ALUMNO'\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('registro/info', {\r\n                parent: 'public',\r\n                url: '/entrar',\r\n                data: {\r\n                    authorities: ['ROLE_ANONYMOUS'],\r\n                    pageTitle: 'global.menu.registro'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/registro/registro.info.html'\r\n                    }\r\n                }\r\n            })\r\n            .state('registro', {\r\n                parent: 'public',\r\n                url: '/registro/:tipo',\r\n                data: {\r\n                    pageTitle: 'global.menu.registro'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/registro/registro.html',\r\n                        controller: 'RegistroController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('RegistroController', RegistroController);\r\n\r\n    /* @ngInject */\r\n    function RegistroController($timeout, $stateParams, Usuario, EnumService, AlertService) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group>input:eq(0)').focus();\r\n        });\r\n\r\n        vm.mode = 'create';\r\n\r\n        function initForm() {\r\n            vm.item = new Usuario();\r\n            vm.item.type = vm.tipo = $stateParams.tipo;\r\n            vm.confirmPassword = \"\";\r\n\r\n            initImagen();\r\n        }\r\n\r\n        initForm();\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            if (vm.item.contrasenaClaro !== vm.confirmPassword) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else if (!vm.acepto) {\r\n                AlertService.error(\"registro.error.acepto\");\r\n            } else {\r\n                vm.item.$register().then(function (data) {\r\n                    vm.success = true;\r\n                    initForm();\r\n                });\r\n            }\r\n        };\r\n\r\n        // Foto de perfil\r\n        function initImagen() {\r\n            if (!vm.item.imagen) {\r\n                vm.item.imagen = {};\r\n            }\r\n            if (vm.item.foto) {\r\n                vm.item.imagen.path = vm.item.foto;\r\n            }\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        vm.usuarioService = Usuario;\r\n\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('recuperar/init', {\r\n                parent: 'public',\r\n                url: '/recuperar-contrasena',\r\n                data: {\r\n                    pageTitle: 'recuperar.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/recuperar/recuperar.init.html',\r\n                        controller: 'RecuperarInitController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            })\r\n            .state('recuperar/finish', {\r\n                parent: 'public',\r\n                url: '/nueva-contrasena?key&email',\r\n                data: {\r\n                    pageTitle: 'recuperar.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/recuperar/recuperar.finish.html',\r\n                        controller: 'RecuperarFinishController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('RecuperarInitController', RecuperarInitController);\r\n\r\n    /* @ngInject */\r\n    function RecuperarInitController($timeout, Auth) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input').focus();\r\n        });\r\n\r\n        vm.recuperar = function (email) {\r\n            Auth.resetPasswordInit(email).then(function () {\r\n                vm.success = true;\r\n            });\r\n        }\r\n    }\r\n\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('RecuperarFinishController', RecuperarFinishController);\r\n\r\n    /* @ngInject */\r\n    function RecuperarFinishController($timeout, $state, $stateParams, AlertService, Auth) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input').focus();\r\n        });\r\n\r\n        vm.save = function () {\r\n            if (vm.newPassword !== vm.confirmPassword) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                Auth.resetPasswordFinish({\r\n                    email: $stateParams.email,\r\n                    key: $stateParams.key,\r\n                    newPassword: vm.newPassword\r\n                }).then(function () {\r\n                    $state.go('home');\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('miespacio/info', {\r\n                parent: 'public',\r\n                url: '/mi-espacio',\r\n                data: {\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        /* @ngInject */\r\n                        controller: function ($state, Principal) {\r\n                            if (Principal.isAuthenticated()) {\r\n                                Principal.identity().then(function (data) {\r\n                                    if (data && data.rol === 'ROLE_ALUMNO' || data.rol === 'ROLE_PROFESOR') {\r\n                                        $state.go('miespacio/miagenda');\r\n                                    } else if (data.rol === 'ROLE_EMPRESA') {\r\n                                        $state.go('miespacio/misalumnos');\r\n                                    } else {\r\n                                        $state.go('home');\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                $state.go('registro/info');\r\n                            }\r\n                        },\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            })\r\n            .state('miespacio', {\r\n                parent: 'public',\r\n                redirectTo: 'miespacio/miagenda',\r\n                url: '/mi-espacio',\r\n                data: {\r\n                    authorities: ['ROLE_AUTHENTICATED'],\r\n                    pageTitle: 'global.menu.miespacio.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/cuenta/miespacio/mi-espacio.template.html',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('logout', {\r\n            parent: 'public',\r\n            data: {\r\n                authorities: ['ROLE_AUTHENTICATED']\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    controller: 'LogoutController'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .controller('LogoutController', LogoutController);\r\n\r\n    /* @ngInject */\r\n    function LogoutController($state, Auth) {\r\n        Auth.logout();\r\n        // home\r\n        $state.go('registro/info');\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .component('imagenPerfilVer', {\r\n            templateUrl: \"app/components/form/archivos/imagenperfilver/imagen-perfil-ver.html\",\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                usuario: '<',\r\n                mini: '<'\r\n            }\r\n        });\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .component('imagenPerfil', {\r\n            bindings: {\r\n                ngModel: \"=\",\r\n                indice: \"=\",\r\n                imagenTemporal: \"=\",\r\n                rutaCarpetaImagen: \"@\", // Opcional\r\n                rutaImagenDefault: \"@\", // Opcional\r\n                onUploadedImage: '&',\r\n                onRemoveImage: '&'\r\n            },\r\n            templateUrl: \"app/components/form/archivos/imagenperfil/imagen-perfil.html\",\r\n            controllerAs: 'ctrl',\r\n            controller: ImagenPerfil\r\n        });\r\n\r\n    /* @ngInject */\r\n    function ImagenPerfil(Upload, AlertService) {\r\n\r\n        var vm = this;\r\n        vm.editPreview = false;\r\n        vm.myCroppedImage = '';\r\n        vm.myImage = '';\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            if (!vm.ngModel.rutaImagen) {\r\n                if (vm.ngModel.path) {\r\n                    vm.ngModel.rutaImagen = vm.rutaCarpetaImagen + \"/\" + vm.ngModel.path;\r\n                    vm.myCroppedImage = vm.ngModel.rutaImagen;\r\n                } else {\r\n                    vm.ngModel.rutaImagen = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        function onUploaded() {\r\n            vm.onUploadedImage();\r\n        }\r\n\r\n        vm.isSubmitted = function (form) {\r\n            while (!!form) {\r\n                if (form.$submitted) return true;\r\n                form = form.$$parentForm;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        vm.eliminarImagen = function () {\r\n            vm.ngModel.eliminar = true;\r\n            vm.ngModel.rutaImagen = null;\r\n            vm.ngModel.path = null;\r\n            vm.ngModel.archivoTemporal = null;\r\n            vm.myCroppedImage = '';\r\n\r\n            // Llamamos al callback para eliminar el elemento de la lista\r\n            vm.onRemoveImage({imagen: vm.ngModel});\r\n        };\r\n\r\n        function blobToFile(theBlob, fileName) {\r\n            // A Blob() is almost a File() - it's just missing the two\r\n            // properties below which we will add\r\n            theBlob.lastModifiedDate = new Date();\r\n            theBlob.name = fileName;\r\n            return theBlob;\r\n        }\r\n\r\n        function dataURItoBlob(dataURI, type) {\r\n            // convert base64 to raw binary data held in a string\r\n            var byteString = atob(dataURI.split(',')[1]);\r\n\r\n            // write the bytes of the string to an ArrayBuffer\r\n            var ab = new ArrayBuffer(byteString.length);\r\n            var ia = new Uint8Array(ab);\r\n            for (var i = 0; i < byteString.length; i++) {\r\n                ia[i] = byteString.charCodeAt(i);\r\n            }\r\n\r\n            // write the ArrayBuffer to a blob, and you're done\r\n            return new Blob([ab], {type: type});\r\n        }\r\n\r\n        vm.onImagenSelect = function (files, form) {\r\n            vm.editPreview = false;\r\n            vm.ngModel.eliminar = false;\r\n            if (files && files.length) {\r\n\r\n                vm.ngModel.path = null;\r\n                vm.progresoImagen = true;\r\n\r\n                form.$setValidity('imagenSubida', false);\r\n\r\n                // Subimos imagen\r\n                Upload.upload({\r\n                    url: \"api/archivos-temporales\",\r\n                    data: {\r\n                        file: blobToFile(dataURItoBlob(files, 'image/png'), vm.myImage.name),\r\n                        ext: \"jpeg,png,gif,jpg\"\r\n                    },\r\n                    method: 'POST'\r\n                }).success(function (response) {\r\n                    vm.progresoImagen = null;\r\n                    vm.ngModel.archivoTemporal = response.msg;\r\n                    vm.ngModel.path = vm.myImage.name;\r\n                    form.$setValidity('imagenSubida', true);\r\n                    onUploaded();\r\n                }).error(function (data) {\r\n                    vm.progresoImagen = null;\r\n                    form.$setValidity('imagenSubida', true);\r\n                    vm.eliminarImagen();\r\n                    if (data && data.msg === 'invalid extension') {\r\n                        AlertService.error(\"error.invalidextension\", {archivo: vm.myImage.name});\r\n                    } else {\r\n                        AlertService.error(\"admin.form.error.fail\");\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        vm.clickUpload = function () {\r\n            var indice = vm.indice ? vm.indice : '';\r\n            document.getElementById('inputFoto' + indice).click();\r\n        };\r\n\r\n        vm.preview = function (files) {\r\n            vm.myImage = files[0];\r\n            vm.editPreview = true;\r\n        }\r\n\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').directive('imagen', imagen);\r\n\r\n    function imagen() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                ngModel: \"=\",\r\n                indice: \"=\",\r\n                ngModelRadio: \"=\",\r\n                imagenTemporal: \"=\",\r\n                rutaCarpetaImagen: \"@\", // Opcional\r\n                rutaImagenDefault: \"@\", // Opcional\r\n                onUploadedImage: '&',\r\n                onRemoveImage: '&',\r\n                edicion: \"=\", // Opcional (default = true)\r\n                error: \"=\"\r\n            },\r\n            templateUrl: \"app/components/form/archivos/imagen/imagen.html\",\r\n            controllerAs: 'ctrl',\r\n            bindToController: true,\r\n            controller: 'ImagenController'\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').controller('ImagenController', ImagenController);\r\n\r\n    /* @ngInject */\r\n    function ImagenController($timeout, Upload, AlertService) {\r\n\r\n        var vm = this;\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            if (!vm.ngModel.rutaImagen) {\r\n                if (vm.ngModel.path) {\r\n                    vm.ngModel.rutaImagen = vm.rutaCarpetaImagen + \"/n_\" + vm.ngModel.path;\r\n                } else {\r\n                    vm.ngModel.rutaImagen = null;\r\n                }\r\n            }\r\n\r\n            if (vm.edicion === null || vm.edicion === undefined) {\r\n                vm.edicion = true;\r\n            }\r\n        }\r\n\r\n        function onUploaded() {\r\n            vm.onUploadedImage();\r\n        }\r\n\r\n        vm.isSubmitted = function (form) {\r\n            while (!!form) {\r\n                if (form.$submitted) return true;\r\n                form = form.$$parentForm;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        vm.eliminarImagen = function () {\r\n            vm.ngModel.eliminar = true;\r\n            vm.ngModel.rutaImagen = null;\r\n            vm.ngModel.path = null;\r\n            vm.ngModel.archivoTemporal = null;\r\n\r\n            // Llamamos al callback para eliminar el elemento de la lista\r\n            vm.onRemoveImage({imagen: vm.ngModel});\r\n        };\r\n\r\n        function generateThumb(file) {\r\n            if (file != null) {\r\n                if (file.type.indexOf('image') > -1) {\r\n                    $timeout(function () {\r\n                        var fileReader = new FileReader();\r\n                        fileReader.readAsDataURL(file);\r\n                        fileReader.onload = function (e) {\r\n                            $timeout(function () {\r\n                                vm.ngModel.rutaImagen = e.target.result;\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        vm.onImagenSelect = function (files, form, indice) {\r\n            vm.ngModel.eliminar = false;\r\n            if (files && files.length) {\r\n\r\n                vm.ngModel.path = null;\r\n                vm.progresoImagen = true;\r\n\r\n                form.$setValidity('imagenSubida', false);\r\n\r\n                // Previsualizamos imagen\r\n                generateThumb(files[0]);\r\n\r\n                // Subimos imagen\r\n                Upload.upload({\r\n                    url: \"api/archivos-temporales\",\r\n                    data: {\r\n                        file: files[0],\r\n                        ext: \"jpeg,png,gif,jpg\"\r\n                    },\r\n                    method: 'POST'\r\n                }).success(function (response) {\r\n                    vm.progresoImagen = null;\r\n                    vm.ngModel.archivoTemporal = response.msg;\r\n                    vm.ngModel.path = files[0].name;\r\n                    form.$setValidity('imagenSubida', true);\r\n                    onUploaded();\r\n                }).error(function (data) {\r\n                    vm.progresoImagen = null;\r\n                    form.$setValidity('imagenSubida', true);\r\n                    vm.eliminarImagen();\r\n                    if (data && data.msg === 'invalid extension') {\r\n                        AlertService.error(\"error.invalidextension\", {archivo: files[0].name});\r\n                    } else {\r\n                        AlertService.error(\"admin.form.error.fail\");\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        vm.clickUpload = function () {\r\n            document.getElementById('inputFoto' + vm.indice).click();\r\n        };\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').directive('fileUpload', fileUpload);\r\n\r\n    function fileUpload() {\r\n        return {\r\n            restrict: 'EA',\r\n            scope: {\r\n                id: '@',\r\n                archivo: \"=\",\r\n                archivoTemporal: \"=\",\r\n                accept: \"@\",  // Opcional (default === todas las extensiones)\r\n                error: \"=\", // Opcional\r\n                url: \"@\", // Opcional (si no se pasa, no se permite descargar el archivo)\r\n                authorities: \"@\", // Opcional (si no se indica ningún rol, será visible para todos. Ej:ROLE_ADMIN,ROLE_EDITOR_CONTENIDOS)\r\n                onSelected: \"<\"\r\n            },\r\n            templateUrl: 'app/components/form/archivos/fileupload/file-upload.html',\r\n            controllerAs: 'ctrl',\r\n            bindToController: true,\r\n            controller: 'FileUploadController'\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').controller('FileUploadController', FileUploadController);\r\n\r\n    /* @ngInject */\r\n    function FileUploadController(Upload, AlertService) {\r\n        var vm = this;\r\n\r\n        vm.onArchivoSelect = onArchivoSelect;\r\n        vm.eliminarArchivo = eliminarArchivo;\r\n\r\n        vm.isSubmitted = isSubmitted;\r\n\r\n        vm.upload = upload;\r\n\r\n        function upload() {\r\n            setTimeout(function () {\r\n                angular.element(\"input#\" + vm.id).trigger('click');\r\n            }, 0);\r\n        }\r\n\r\n        function isSubmitted(form) {\r\n            while (!!form) {\r\n                if (form.$submitted)\r\n                    return true;\r\n                form = form.$$parentForm;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function onArchivoSelect(files, form) {\r\n            console.log(form);\r\n\r\n            if (files && files.length) {\r\n                vm.progresoArchivo = true;\r\n                vm.archivo = files[0].name;\r\n                form.$setValidity('archivoSubido', false);\r\n                Upload.upload({\r\n                    url: \"api/archivos-temporales\",\r\n                    data: {\r\n                        file: files[0],\r\n                        ext: vm.accept\r\n                    },\r\n                    method: 'POST'\r\n                }).success(function (response) {\r\n                    console.log(\"Archivo subido\");\r\n                    vm.progresoArchivo = false;\r\n                    vm.archivoTemporal = response.msg;\r\n                    form.$setValidity('archivoSubido', true);\r\n\r\n                    if (vm.onSelected) {\r\n                        vm.onSelected(vm.archivoTemporal, vm.archivo);\r\n                    }\r\n\r\n                }).error(function (data) {\r\n                    console.log(\"Error subiendo\");\r\n                    vm.progresoArchivo = false;\r\n                    vm.archivo = null;\r\n                    form.$setValidity('archivoSubido', true);\r\n                    if (data && data.msg === 'invalid extension') {\r\n                        AlertService.error(\"error.invalidextension\", {archivo: files[0].name});\r\n                    } else {\r\n                        AlertService.error(\"admin.form.error.fail\");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function eliminarArchivo() {\r\n            vm.archivo = null;\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').directive('download', download);\r\n\r\n    function download() {\r\n\r\n        return {\r\n            restrict: 'EA',\r\n            scope: {\r\n                archivo: \"=\",\r\n                url: \"@\",\r\n                showLabel: \"=\"\r\n            },\r\n            templateUrl: 'app/components/form/archivos/download/download.html',\r\n            controllerAs: 'ctrl',\r\n            bindToController: true,\r\n            controller: 'DownloadController'\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app').controller('DownloadController', DownloadController);\r\n\r\n    function DownloadController() {\r\n        var vm = this;\r\n\r\n        vm.descargarArchivo = descargarArchivo;\r\n\r\n        function descargarArchivo() {\r\n            window.open(vm.url + vm.archivo, '_blank');\r\n        }\r\n    }\r\n\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('ProfesorListController', ProfesorListController);\r\n\r\n    /* @ngInject */\r\n    function ProfesorListController(User, $state, $scope) {\r\n        var vm = this;\r\n\r\n        vm.profesores = [];\r\n\r\n        vm.filter = {\r\n            activos: true,\r\n            idioma: null,\r\n            nivel: null,\r\n            paises: [], /*disponibilidad: 'AMBOS',*/\r\n            capacidades: [],\r\n            horadia: null,\r\n            dia: null\r\n        };\r\n\r\n        $scope.$watch(function () {\r\n            return vm.filter;\r\n        }, function (newValue, oldValue) {\r\n            if (newValue.idioma === oldValue.idioma && newValue.nivel === oldValue.nivel &&\r\n                newValue.paises.length === oldValue.paises.length /*&& newValue.disponibilidad === oldValue.disponibilidad*/ &&\r\n                newValue.capacidades.length === oldValue.capacidades.length && newValue.horadia === oldValue.horadia &&\r\n                newValue.dia === oldValue.dia) {\r\n                return;\r\n            }\r\n            vm.filter.size = 10;\r\n            vm.filter.page = 0;\r\n            User.findAllProfesor(vm.filter).$promise.then(function (data) {\r\n                vm.profesores = data.content;\r\n            });\r\n        }, true);\r\n\r\n        vm.abrir = function (id) {\r\n            $state.go(\"profesor/info\", {id: id});\r\n        };\r\n\r\n        // Infinite scroll\r\n\r\n        vm.loading = false;\r\n        vm.loaded = false;\r\n\r\n        vm.filter.size = 10;\r\n        vm.filter.page = 0;\r\n\r\n        vm.cargar = function () {\r\n            if (vm.loading) return;\r\n            vm.loading = true;\r\n            User.findAllProfesor(vm.filter).$promise.then(function (data) {\r\n                for (var i = 0; i <= data.content.length - 1; i++) {\r\n                    vm.profesores.push(data.content[i]);\r\n                }\r\n                vm.filter.page += 1;\r\n                vm.loading = false;\r\n                if (data.content.length < vm.filter.size) vm.loaded = true;\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('buttons', {\r\n            templateUrl: 'app/components/form/buttons/buttons-form.template.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                canSave: '<',\r\n                mode: '<'\r\n            }\r\n        });\r\n\r\n    function Controller($rootScope, ModalService) {\r\n        var vm = this;\r\n\r\n        // Si hay una ventana modal abierta, se cierra\r\n        vm.back = function () {\r\n            if (ModalService.isOpen()) {\r\n                ModalService.dismiss();\r\n            } else {\r\n                $rootScope.back();\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('usuarioReserva', {\r\n            templateUrl: 'app/public/components/usuarioreserva/usuario-reserva.html',\r\n            controller: UsuarioReservaController,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                usuario: '<',\r\n                reserva: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function UsuarioReservaController() {\r\n        var vm = this;\r\n\r\n        vm.cancelada =\r\n            vm.reserva.estado === 'RECHAZADA'\r\n            || vm.reserva.estado === 'CANCELADA_POR_ALUMNO'\r\n            || vm.reserva.estado === 'CANCELADA_POR_PROFESOR';\r\n\r\n        vm.evaluada =\r\n            vm.reserva.estado === 'PENDIENTE'\r\n            || vm.reserva.estado === 'INCIDENCIA'\r\n            || vm.reserva.estado === 'REALIZADA';\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('profesor', {\r\n            templateUrl: 'app/public/components/profesor/profesor.html',\r\n            controller: ProfesorController,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                profesor: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function ProfesorController() {\r\n        var vm = this;\r\n        var d = new Date();\r\n        var minutos = '0';\r\n        if (d.getMinutes() < 10) {\r\n            minutos = minutos + d.getMinutes();\r\n        } else {\r\n            minutos = d.getMinutes();\r\n        }\r\n        if (vm.profesor.zonaHoraria) {\r\n            vm.now = d.getHours() + parseInt(vm.profesor.zonaHoraria.gmt.substring(3, 6)) + (d.getTimezoneOffset() / 60) + \":\" + minutos;\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Componente para modificar la contraseña\r\n\r\n    angular\r\n        .module('app')\r\n        .component('changePassword', {\r\n            templateUrl: 'app/public/components/password/password.html',\r\n            controller: PasswordController,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function PasswordController($timeout, Auth, AlertService) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.save = function () {\r\n            if (vm.form.newpassword !== vm.confirmPassword) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                Auth.changePassword(vm.form).then(function () {\r\n                    vm.form.password = \"\";\r\n                    vm.form.newpassword = \"\";\r\n                    vm.form.$setPristine();\r\n                    vm.confirmPassword = \"\";\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('paquetecreditosList', {\r\n            templateUrl: 'app/public/components/paquetecreditos/paquetecreditos-list.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, Paquetecreditos, Principal, $state, Auth) {\r\n        var vm = this;\r\n\r\n        Principal.identity().then(function (data) {\r\n            vm.usuarioAutenticado = data;\r\n        });\r\n\r\n        vm.item = Paquetecreditos;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.paquetecreditosId = $stateParams.paquetecreditosId;\r\n        vm.filter = {\r\n            key: undefined,\r\n            size: null\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {creditos: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Eliminar\r\n        vm.showRemoveConfirmation = function (id) {\r\n            ModalService.open({\r\n                    templateUrl: 'app/components/form/delete/entity.delete.modal.html',\r\n                    controller: 'EntityDeleteModalController',\r\n                    controllerAs: 'ctrl',\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        item: function () {\r\n                            return Paquetecreditos.get({id: id}).$promise;\r\n                        },\r\n                        params: function () {\r\n                            return {\r\n                                title: 'admin.paquetecreditos.delete.title',\r\n                                body: 'admin.paquetecreditos.delete.confirm',\r\n                                property: 'creditos'\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            ).result.then(function () {\r\n                vm.tableParams.reload();\r\n            });\r\n        };\r\n\r\n        vm.comprarPaquetecreditos = function (id) {\r\n            if (vm.usuarioAutenticado == null) {\r\n                Auth.authorize(false, \"ROLE_AUTHENTICATED\");\r\n            } else {\r\n                $state.go('paquetecreditos/comprar', {paqueteId: id});\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('paquetecreditosComprar', {\r\n            templateUrl: 'app/public/components/paquetecreditos/paquetecreditos-comprar.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                paqueteCreditos: '<',\r\n                datosFacturacion: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($state, $stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, Paquetecreditos, Principal, DatosFacturacion, Auth) {\r\n        var vm = this;\r\n\r\n        vm.solicitarFactura = false;\r\n\r\n        vm.item = {datosFacturacion: vm.datosFacturacion};\r\n\r\n        Principal.identity().then(function (data) {\r\n            vm.usuarioAutenticado = data;\r\n        });\r\n\r\n        vm.comprar = function () {\r\n            if (vm.usuarioAutenticado == null) {\r\n                Auth.authorize(false, \"ROLE_AUTHENTICATED\");\r\n            } else {\r\n                if (vm.solicitarFactura) {\r\n                    DatosFacturacion.save(vm.item.datosFacturacion).$promise.then(function () {\r\n                        comprar();\r\n                    });\r\n                } else {\r\n                    comprar();\r\n                }\r\n            }\r\n        };\r\n\r\n        function comprar() {\r\n            $state.go('compra/crear', {\r\n                paquetecreditosId: vm.paqueteCreditos.id,\r\n                usuario: vm.usuarioAutenticado,\r\n                solicitarFactura: vm.solicitarFactura\r\n            });\r\n        }\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('misAlumnosList', {\r\n            templateUrl: 'app/public/components/misalumnos/mis-alumnos-list.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($state, $stateParams, NG_TABLE_DEFAULT_PARAMS_PUBLIC, NgTableParams, NgTableHelper,\r\n                        User, Principal) {\r\n        var vm = this;\r\n\r\n        Principal.identity().then(function (data) {\r\n            vm.usuarioAutenticado = data;\r\n        });\r\n\r\n        vm.item = User;\r\n        vm.function = 'findAlumnosByCentro';\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS_PUBLIC.size;\r\n        vm.filter = {\r\n            key: undefined\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {nombre: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Reserva', Reserva);\r\n\r\n    /* @ngInject */\r\n    function Reserva(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"reserva\", {}, {\r\n            'save': {\r\n                method: 'POST',\r\n                url: 'api/public/reserva',\r\n                isArray: false\r\n            },\r\n            'findAll': {\r\n                method: 'GET',\r\n                url: 'api/public/reserva/findAll',\r\n                isArray: false\r\n            },\r\n            'filterByAdmin': {\r\n                method: 'GET',\r\n                url: 'api/admin/reserva/filterByAdmin',\r\n                isArray: false\r\n            },\r\n            'update': {\r\n                method: 'POST',\r\n                url: 'api/public/reserva/update',\r\n                isArray: false\r\n            },\r\n            'devolverCreditos': {\r\n                method: 'POST',\r\n                url: 'api/admin/reserva/devolverCreditos',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'rechazarCreditos': {\r\n                method: 'POST',\r\n                url: 'api/admin/reserva/rechazarCreditos',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('reservaCount', {\r\n            template: '<span class=\"reserva-count\" ng-if=\"ctrl.estados[ctrl.estado] > 0\">({{ctrl.estados[ctrl.estado]}})</span>',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                estado: '@',\r\n                estados: '='\r\n            }\r\n        });\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Calendario: http://angular-ui.github.io/ui-calendar/\r\n     */\r\n\r\n    angular\r\n        .module('app')\r\n        .component('miAgenda', {\r\n            templateUrl: 'app/public/components/miagenda/mi-agenda.list.html',\r\n            controller: MiAgendaController,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                usuarioAutenticado: '<',\r\n                admin: '<', // Boolean\r\n                initMonth: '<', // Integer: Del 1 al 12\r\n                initYear: '<' // Integer\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function MiAgendaController($scope, $compile, $timeout, $translate, $state, uiCalendarConfig,\r\n                                Reserva, ClaseLibre, ModalService, Principal, Auth, AlertService) {\r\n\r\n        // *********************************************** CONSTANTES ***********************************************\r\n        $scope.COLOR_CLASE_LIBRE = '#4ACF4A';\r\n        $scope.COLOR_CLASE_OCUPADA = 'lightgray';\r\n        $scope.COLOR_RESERVA_SIN_CONTESTAR = 'gold';\r\n        $scope.COLOR_RESERVA_CONFIRMADA = '#87CEFA';\r\n        $scope.COLOR_RESERVA_NO_CONTESTADA_RECHAZADA_CANCELADA_POR_ALUMNO_O_PROFESOR = '#FFB266';\r\n        $scope.COLOR_RESERVA_INCIDENCIA = '#FF6666';\r\n        $scope.COLOR_RESERVA_PENDIENTE = '#8866FF';\r\n        $scope.COLOR_RESERVA_REALIZADA = '#FF66FF';\r\n        var TREINTA_MINUTOS_EN_MS = 1800000;\r\n\r\n        // ********************************************* Inicialización *********************************************\r\n        var vm = this;\r\n\r\n        function cargarDatos(start, end) {\r\n            $scope.firstTiempoMinimo = true;\r\n            $scope.firstTiempoMaximo = true;\r\n            obtenerClasesLibres(start, end);\r\n        }\r\n\r\n        if ($state.params.id != null) {\r\n            vm.profesor = {};\r\n            vm.profesor.id = $state.params.id;\r\n        }\r\n\r\n        if (vm.usuarioAutenticado == null) {\r\n            Principal.identity().then(function (data) {\r\n                vm.usuarioAutenticado = data;\r\n                $scope.usuarioLogueado = vm.usuarioAutenticado != null;\r\n            });\r\n        } else {\r\n            $scope.usuarioLogueado = true;\r\n        }\r\n\r\n        if ($state.params.id != null) {\r\n            vm.usuarioObtenerClasesLibres = vm.profesor;\r\n            $scope.alumnoViendose = false;\r\n        } else {\r\n            vm.usuarioObtenerClasesLibres = vm.usuarioAutenticado;\r\n            $scope.alumnoViendose = true;\r\n        }\r\n\r\n        var defaultView = 'agendaWeek';\r\n        if (vm.admin) {\r\n            defaultView = 'month';\r\n        }\r\n\r\n        // En caso de que se indiquen un mes y un año, inicializamos el calendario\r\n        var today = new Date();\r\n        var defaultDate = new Date();\r\n        if (vm.initMonth) {\r\n            vm.initMonth = vm.initMonth - 1;\r\n            defaultDate.setMonth(vm.initMonth);\r\n        }\r\n        if (vm.initYear) {\r\n            defaultDate.setFullYear(vm.initYear);\r\n        } else {\r\n            if (vm.initMonth > today.getMonth()) {\r\n                defaultDate.setFullYear(today.getFullYear() - 1);\r\n            }\r\n        }\r\n\r\n        $scope.rol = vm.usuarioObtenerClasesLibres.rol;\r\n        $scope.canceladasRechazadas = $state.params.canceladasRechazadas;\r\n\r\n        $scope.firstTiempoMinimo = true;\r\n        $scope.firstTiempoMaximo = true;\r\n\r\n        // ***************************************** Funcionalidad *****************************************\r\n\r\n        function actualizarEvento(evento) {\r\n            if (evento != null) {\r\n                angular.element('.calendar').fullCalendar('updateEvent', evento);\r\n            }\r\n        }\r\n\r\n        function actualizarRangosTiempo() {\r\n            // FIXME: Para que funcionase lo de adaptar el calendario a las clases (no mostrar las 24 horas, si no solo las necesarias)\r\n            //  habría que encontrar la manera de que no se llamase a renderView al cambiar minTime y maxTime\r\n            // Actualizar minTime y maxTime (hora de inicio y de fin del calendario)\r\n            // if (!$scope.rol || $scope.rol === 'ROLE_ALUMNO') {\r\n            //     // vm.cambiandoTiempo = true;\r\n            //     $scope.uiConfig.calendar.minTime = $scope.tiempoMinimo.getHours() + ':' + $scope.tiempoMinimo.getMinutes();\r\n            //     $scope.uiConfig.calendar.maxTime = $scope.tiempoMaximo.getHours() + ':' + $scope.tiempoMaximo.getMinutes();\r\n            // }\r\n        }\r\n\r\n        function actualizarAgenda(eventos) {\r\n            uiCalendarConfig.calendars.myCalendar.fullCalendar('removeEvents');\r\n            uiCalendarConfig.calendars.myCalendar.fullCalendar('addEventSource', eventos);\r\n        }\r\n\r\n        var minutesOfDay = function (d) {\r\n            return d.getMinutes() + d.getHours() * 60;\r\n        };\r\n\r\n        function devolverColorEvento(evento) {\r\n            if (evento != null) {\r\n                if (evento.ocupada) {\r\n                    evento.backgroundColor = $scope.COLOR_CLASE_OCUPADA;\r\n                    evento.borderColor = $scope.COLOR_CLASE_OCUPADA;\r\n                } else {\r\n                    evento.backgroundColor = $scope.COLOR_CLASE_LIBRE;\r\n                    evento.borderColor = $scope.COLOR_CLASE_LIBRE;\r\n                }\r\n            }\r\n        }\r\n\r\n        function clasesLibresToBloque(response, start, end) {\r\n            var resultados = response.content;\r\n            if (resultados.length) {\r\n                var inicio = null;\r\n                var fin = null;\r\n                for (var i = 0; i < resultados.length; i++) {\r\n                    inicio = new Date(resultados[i].fecha * 1000);\r\n                    // Coger el tiempo mínimo para mostrar la agenda acotada\r\n                    if ($scope.firstTiempoMinimo || $scope.tiempoMinimo != null && (minutesOfDay($scope.tiempoMinimo) > minutesOfDay(inicio))) {\r\n                        $scope.tiempoMinimo = new Date(inicio.valueOf());\r\n                        $scope.firstTiempoMinimo = false;\r\n                    }\r\n                    fin = new Date(resultados[i].fecha * 1000 + TREINTA_MINUTOS_EN_MS);\r\n                    // Coger el tiempo máximo para mostrar la agenda acotada\r\n                    if ($scope.firstTiempoMaximo || $scope.tiempoMaximo != null && (minutesOfDay($scope.tiempoMaximo) < minutesOfDay(fin))) {\r\n                        $scope.tiempoMaximo = new Date(fin.valueOf());\r\n                        $scope.firstTiempoMaximo = false;\r\n                    }\r\n                    var className = '';\r\n                    if (inicio < today) {\r\n                        className = 'eventosPasados';\r\n                    }\r\n                    if (resultados[i].ocupada) {\r\n                        $scope.events.push({\r\n                            start: inicio,\r\n                            end: fin,\r\n                            backgroundColor: $scope.COLOR_CLASE_OCUPADA,\r\n                            borderColor: $scope.COLOR_CLASE_OCUPADA,\r\n                            ocupada: resultados[i].ocupada,\r\n                            id: resultados[i].id,\r\n                            className: className\r\n                        });\r\n                    } else {\r\n                        $scope.events.push({\r\n                            start: inicio,\r\n                            end: fin,\r\n                            backgroundColor: $scope.COLOR_CLASE_LIBRE,\r\n                            borderColor: $scope.COLOR_CLASE_LIBRE,\r\n                            ocupada: resultados[i].ocupada,\r\n                            id: resultados[i].id,\r\n                            className: className\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (vm.usuarioAutenticado == null) {\r\n                    actualizarRangosTiempo();\r\n                    actualizarAgenda($scope.events);\r\n                }\r\n            }\r\n        }\r\n\r\n        vm.countEstados = {};\r\n\r\n        function reservasToBloque(response, start, end, ocupada) {\r\n            vm.countEstados = {};\r\n            var resultados = response.content;\r\n            var inicio = null;\r\n            var fin = null;\r\n            var backgroundColor = null;\r\n            var borderColor = null;\r\n            var reservasAux = [];\r\n            for (var i = 0; i < resultados.length; i++) {\r\n                inicio = new Date(resultados[i].fecha * 1000);\r\n                // Coger el tiempo mínimo para mostrar la agenda acotada\r\n                if ($scope.firstTiempoMinimo || $scope.tiempoMinimo != null && (minutesOfDay($scope.tiempoMinimo) > minutesOfDay(inicio))) {\r\n                    $scope.tiempoMinimo = new Date(inicio.valueOf());\r\n                    $scope.firstTiempoMinimo = false;\r\n                }\r\n                fin = new Date(resultados[i].fecha * 1000 + TREINTA_MINUTOS_EN_MS);\r\n                // Coger el tiempo máximo para mostrar la agenda acotada\r\n                if ($scope.firstTiempoMaximo || $scope.tiempoMaximo != null && (minutesOfDay($scope.tiempoMaximo) < minutesOfDay(fin))) {\r\n                    $scope.tiempoMaximo = new Date(fin.valueOf());\r\n                    $scope.firstTiempoMaximo = false;\r\n                }\r\n\r\n                // Número de reservas en cada estado\r\n                if (vm.countEstados[resultados[i].estado]) {\r\n                    vm.countEstados[resultados[i].estado] = (vm.countEstados[resultados[i].estado] + 1);\r\n                } else {\r\n                    vm.countEstados[resultados[i].estado] = 1;\r\n                }\r\n\r\n                switch (resultados[i].estado) {\r\n                    case 'SIN_CONTESTAR':\r\n                        backgroundColor = $scope.COLOR_RESERVA_SIN_CONTESTAR;\r\n                        borderColor = $scope.COLOR_RESERVA_SIN_CONTESTAR;\r\n                        break;\r\n                    case 'CONFIRMADA':\r\n                        backgroundColor = $scope.COLOR_RESERVA_CONFIRMADA;\r\n                        borderColor = $scope.COLOR_RESERVA_CONFIRMADA;\r\n                        break;\r\n                    case 'NO_CONTESTADA':\r\n                    case 'RECHAZADA':\r\n                    case 'CANCELADA_POR_ALUMNO':\r\n                    case 'CANCELADA_POR_PROFESOR':\r\n                        backgroundColor = $scope.COLOR_RESERVA_NO_CONTESTADA_RECHAZADA_CANCELADA_POR_ALUMNO_O_PROFESOR;\r\n                        borderColor = $scope.COLOR_RESERVA_NO_CONTESTADA_RECHAZADA_CANCELADA_POR_ALUMNO_O_PROFESOR;\r\n                        break;\r\n                    case 'INCIDENCIA':\r\n                        backgroundColor = $scope.COLOR_RESERVA_INCIDENCIA;\r\n                        borderColor = $scope.COLOR_RESERVA_INCIDENCIA;\r\n                        break;\r\n                    case 'PENDIENTE':\r\n                        backgroundColor = $scope.COLOR_RESERVA_PENDIENTE;\r\n                        borderColor = $scope.COLOR_RESERVA_PENDIENTE;\r\n                        break;\r\n                    case 'REALIZADA':\r\n                        backgroundColor = $scope.COLOR_RESERVA_REALIZADA;\r\n                        borderColor = $scope.COLOR_RESERVA_REALIZADA;\r\n                        break;\r\n                }\r\n\r\n                //FIXME: Optimizar esto\r\n                for (var j = 0; j < $scope.events.length; j++) {\r\n                    if (resultados[i].claseLibre != null && $scope.events[j].id === resultados[i].claseLibre.id) {\r\n                        $scope.events.splice(j, 1);\r\n                    }\r\n                }\r\n\r\n                var titulo;\r\n                var persona;\r\n                var className = '';\r\n                if (vm.usuarioAutenticado.rol === 'ROLE_PROFESOR') {\r\n                    persona = resultados[i].alumno;\r\n                } else {\r\n                    persona = resultados[i].profesor;\r\n                }\r\n                // Mostramos el nombre del alumno/profesor con el que va a ser la clase\r\n                titulo = persona.nombre;\r\n                titulo += persona.apellidos ? ' ' + persona.apellidos : '';\r\n\r\n                // De las reservas pasadas, dejamos las pendientes resaltadas\r\n                if (inicio < today && (resultados[i].estado !== 'PENDIENTE' || vm.usuarioAutenticado.rol === 'ROLE_ALUMNO')) {\r\n                    className = 'eventosPasados';\r\n                }\r\n\r\n                reservasAux.push({\r\n                    start: inicio,\r\n                    end: fin,\r\n                    backgroundColor: backgroundColor,\r\n                    borderColor: borderColor,\r\n                    ocupada: ocupada,\r\n                    id: resultados[i].id,\r\n                    estado: resultados[i].estado,\r\n                    motivoProfesor: resultados[i].motivoProfesor,\r\n                    motivoAlumno: resultados[i].motivoAlumno,\r\n                    className: className,\r\n                    title: titulo\r\n                });\r\n            }\r\n\r\n            $scope.events.push.apply($scope.events, reservasAux);\r\n\r\n            actualizarRangosTiempo();\r\n            actualizarAgenda($scope.events);\r\n        }\r\n\r\n        // Función que muestra las clases libres y las reservas para rellenar la agenda (fullcalendar)\r\n        function obtenerClasesLibres(start, end) {\r\n            $scope.events = [];\r\n            ClaseLibre.findAll({\r\n                fechaInicio: start.toDate(),\r\n                fechaFin: end.toDate(),\r\n                ocupada: null,\r\n                id: vm.usuarioObtenerClasesLibres.id\r\n            }).$promise.then(\r\n                function (response) {\r\n                    if ($state.params.canceladasRechazadas == null || $state.params.canceladasRechazadas === 'false') {\r\n                        clasesLibresToBloque(response, start, end);\r\n                    }\r\n                    if (vm.usuarioAutenticado != null) {\r\n                        Reserva.findAll({\r\n                            id: vm.usuarioAutenticado.id,\r\n                            rol: vm.usuarioAutenticado.rol,\r\n                            fechaInicio: start.toDate(),\r\n                            fechaFin: end.toDate(),\r\n                            canceladasRechazadas: $state.params.canceladasRechazadas\r\n                        }).$promise.then(\r\n                            function (response) {\r\n                                reservasToBloque(response, start, end, true);\r\n                                vm.loading = false;\r\n                            },\r\n                            function (error) {\r\n                                vm.error = error.data.mensaje;\r\n                                vm.loading = false;\r\n                            }\r\n                        );\r\n                    } else {\r\n                        vm.loading = false;\r\n                    }\r\n                },\r\n                function (error) {\r\n                    vm.error = error.data.mensaje;\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        $scope.deseleccionarEvento = function () {\r\n            $scope.isCollapsed = false;\r\n            devolverColorEvento($scope.eventoSeleccionado);\r\n            actualizarEvento($scope.eventoSeleccionado);\r\n        };\r\n\r\n        $scope.duplicarSemana = function () {\r\n            ClaseLibre.duplicarsemana({\r\n                fechaInicio: $scope.start,\r\n                fechaFin: $scope.end,\r\n                id: vm.usuarioObtenerClasesLibres.id\r\n            }).$promise.then(function (data) {\r\n                AlertService.success(\"admin.reserva.duplicar.semana\");\r\n            })\r\n        };\r\n\r\n        $scope.dayClick = function (date, allDay, jsEvent, view) {\r\n            if (jsEvent.type === 'agendaWeek' && $scope.canceladasRechazadas == 'false') {\r\n                if (date.toDate() > today) {\r\n                    if (vm.usuarioAutenticado.rol === 'ROLE_PROFESOR') {\r\n                        $scope.events.push({\r\n                            start: date.toDate(),\r\n                            end: date.clone().add('30', 'm').toDate(),\r\n                            backgroundColor: $scope.COLOR_CLASE_LIBRE,\r\n                            borderColor: $scope.COLOR_CLASE_LIBRE\r\n                        });\r\n                        ClaseLibre.save({\r\n                            fecha: date,\r\n                            ocupada: false,\r\n                            profesor: {id: vm.usuarioAutenticado.id, type: vm.usuarioAutenticado.type}\r\n                        }).$promise.then(function () {\r\n                            cargarDatos(jsEvent.start, jsEvent.end);\r\n                        }).catch(function () {\r\n                            // Si se detecta un error, se recarga la página\r\n                            cargarDatos(jsEvent.start, jsEvent.end);\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.alertOnEventClick = function (clase, jsEvent, view) {\r\n            if (vm.admin) return;\r\n\r\n            if (vm.usuarioAutenticado == null) {\r\n                Auth.authorize(false, \"ROLE_AUTHENTICATED\");\r\n            }\r\n\r\n            if (vm.usuarioAutenticado != null) {\r\n                // Un profesor puede eliminar una hora libre si no está reservada\r\n                if (vm.usuarioAutenticado.rol === 'ROLE_PROFESOR' && !clase.ocupada && clase.start.toDate() > today) {\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                        controller: 'ConfirmModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            /* @ngInject */\r\n                            tipo: function (ClaseLibre) {\r\n                                return ClaseLibre;\r\n                            },\r\n                            funcion: function () {\r\n                                return \"subtract\";\r\n                            },\r\n                            parametros: function () {\r\n                                return {id: clase.id}\r\n                            },\r\n                            params: function () {\r\n                                return {\r\n                                    title: 'admin.claselibre.bloque.delete.title',\r\n                                    body: 'admin.claselibre.bloque.delete.confirm',\r\n                                    property: ''\r\n                                };\r\n                            },\r\n                            item: function () {\r\n                            },\r\n                            configuracion: function () {\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        for (var i = 0; i < $scope.events.length; i++) {\r\n                            if ($scope.events[i].id == clase.id) {\r\n                                $scope.events.splice(i, 1);\r\n                                actualizarAgenda($scope.events);\r\n                            }\r\n                        }\r\n                    });\r\n                } else\r\n                // Un alumno puede reservar una clase libre\r\n                // Un profesor puede confirmar o rechazar una reserva sin contestar\r\n                // Un profesor o alumno pueden cancelar una reserva confirmada a X horas de la realización de la misma\r\n                // Un profesor puede indicar si la clase se ha llevado a cabo o no (incidencia)\r\n                // Un alumno puede escribir un comentario en las clases realizadas\r\n                {\r\n                    if (clase.start.toDate() < today && (clase.estado === 'SIN_CONTESTAR' || !clase.ocupada)) {\r\n                        return;\r\n                    }\r\n                    if (clase.estado == null && clase.ocupada == true) {\r\n                        return;\r\n                    }\r\n                    $scope.eventoSeleccionado = angular.element('.calendar').fullCalendar('clientEvents', clase._id)[0];\r\n                    $scope.eventoSeleccionado.vistaInicio = view.start;\r\n                    $scope.eventoSeleccionado.vistaFin = view.end;\r\n                    $scope.anteriorEventoIdSeleccionado = clase._id;\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/reserva/reserva.modal.html',\r\n                        controller: 'ReservaModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            parametros: function () {\r\n                                return {\r\n                                    id: clase.id,\r\n                                    rolbd: vm.usuarioAutenticado.rol,\r\n                                    estadobd: clase.estado,\r\n                                    fechaPrimeraClase: clase.start.toDate(),\r\n                                    fechaUltimaClase: clase.end.toDate(),\r\n                                    alumnoId: vm.usuarioAutenticado.id,\r\n                                    creditosDisponibles: vm.usuarioAutenticado.creditosDisponibles,\r\n                                    motivoAlumno: clase.motivoAlumno,\r\n                                    motivoProfesor: clase.motivoProfesor\r\n                                }\r\n                            },\r\n                            item: function () {\r\n                                return clase;\r\n                            },\r\n                            /* @ngInject */\r\n                            usuarioModal: function (User) {\r\n                                if (clase.estado == null) {\r\n                                    return User.getProfesorPorClaseLibre({id: clase.id}).$promise.then(function (data) {\r\n                                        return data;\r\n                                    });\r\n                                } else {\r\n                                    return User.getUsuarioPorReserva({\r\n                                        id: clase.id,\r\n                                        rol: vm.usuarioAutenticado.rol\r\n                                    }).$promise.then(function (data) {\r\n                                        return data;\r\n                                    });\r\n                                }\r\n                            },\r\n                            /* @ngInject */\r\n                            configuracion: function (Configuracion) {\r\n                                return Configuracion.get({id: '0'}).$promise.then(function (data) {\r\n                                    return data;\r\n                                });\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        Principal.identity(true).then(function (data) {\r\n                            vm.usuarioAutenticado.creditosDisponibles = data.creditosDisponibles;\r\n                            vm.usuarioAutenticado.creditosConsumidos = data.creditosConsumidos;\r\n                        });\r\n                        cargarDatos(view.start, view.end);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.eventRender = function (event, element, view) {\r\n            element.attr({'uib-tooltip': event.tooltip, 'uib-tooltip-append-to-body': true});\r\n            $compile(element)($scope);\r\n        };\r\n\r\n        $scope.viewRender = function (view, element) {\r\n            if (!vm.loading) {\r\n                vm.loading = true;\r\n                $scope.start = view.start;\r\n                $scope.end = view.end;\r\n                cargarDatos(view.start, view.end);\r\n                if (view.intervalUnit === 'week') {\r\n                    angular.element(\".fc-duplicarSemana-button\").show();\r\n                } else {\r\n                    angular.element(\".fc-duplicarSemana-button\").hide();\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.eventAfterAllRender = function () {\r\n        };\r\n\r\n        // ***************************************** ui-calendar *****************************************\r\n        // https://fullcalendar.io/docs/display/\r\n        $scope.uiConfig = {\r\n            calendar: {\r\n                defaultDate: defaultDate,\r\n                height: 'auto',\r\n                editable: false,\r\n                allDaySlot: false,\r\n                defaultView: defaultView,\r\n                timezone: 'local',\r\n                minTime: '00:00',\r\n                maxTime: '24:00',\r\n                locale: 'es',\r\n                firstDay: 1,\r\n                eventOverlap: false,\r\n                eventStartEditable: false,\r\n                header: {left: 'agendaWeek,month', center: 'title', right: 'recargar duplicarSemana today prev,next'},\r\n                timeFormat: 'H:mm',\r\n                slotLabelFormat: 'H:mm',\r\n                dayClick: $scope.dayClick,\r\n                eventClick: $scope.alertOnEventClick,\r\n                eventDurationEditable: false,\r\n                eventRender: $scope.eventRender,\r\n                viewRender: $scope.viewRender,\r\n                eventAfterAllRender: $scope.eventAfterAllRender\r\n            }\r\n        };\r\n\r\n        // Botón de recarga\r\n        $scope.uiConfig.calendar.customButtons = {\r\n            recargar: {\r\n                icon: 'recargar fa fa-refresh',\r\n                click: function () {\r\n                    cargarDatos($scope.start, $scope.end);\r\n                }\r\n            }\r\n        };\r\n\r\n        // Botón para el duplicado de semanas\r\n        if (vm.usuarioAutenticado != null && vm.usuarioAutenticado.rol === 'ROLE_PROFESOR' && !vm.admin) {\r\n            $scope.uiConfig.calendar.editable = true;\r\n            angular.extend($scope.uiConfig.calendar.customButtons, {\r\n                duplicarSemana: {\r\n                    text: $translate.instant('admin.reserva.duplicar.title'),\r\n                    click: function () {\r\n                        $scope.duplicarSemana();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('ClaseLibre', ClaseLibre);\r\n\r\n    /* @ngInject */\r\n    function ClaseLibre(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"clase-libre\", {}, {\r\n            'save': {\r\n                method: 'POST',\r\n                url: 'api/public/clase-libre',\r\n                isArray: false\r\n            },\r\n            'findAll': {\r\n                method: 'GET',\r\n                url: 'api/public/clase-libre/findAll',\r\n                isArray: false\r\n            },\r\n            'subtract': {\r\n                method: 'POST',\r\n                url: 'api/public/clase-libre/subtract',\r\n                isArray: false\r\n            },\r\n            'addlist': {\r\n                method: 'POST',\r\n                url: 'api/public/clase-libre/add-list',\r\n                isArray: false\r\n            },\r\n            'duplicarsemana': {\r\n                method: 'POST',\r\n                url: 'api/public/clase-libre/duplicar-semana',\r\n                isArray: false\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('login', {\r\n            templateUrl: 'app/public/components/login/login.html',\r\n            controller: LoginController,\r\n            bindings: {\r\n                foco: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function LoginController($state, $timeout, Auth, AlertService, ADMIN_PRINCIPAL) {\r\n        var vm = this;\r\n\r\n        vm.user = {};\r\n        vm.rememberMe = false;\r\n\r\n        if (vm.foco) {\r\n            $timeout(function () {\r\n                angular.element('.form-group>input#username').focus();\r\n            });\r\n        }\r\n\r\n        vm.login = function () {\r\n            Auth.login({\r\n                username: vm.username,\r\n                password: vm.password,\r\n                rememberMe: vm.rememberMe\r\n            }).then(function (data) {\r\n                vm.authenticationError = false;\r\n                if (data.rol === 'ROLE_ADMIN') {\r\n                    $state.go(ADMIN_PRINCIPAL, {}, {reload: true});\r\n                } else {\r\n                    $state.go('miespacio/info', {}, {reload: true});\r\n                }\r\n            }).catch(function () {\r\n                AlertService.error(\"login.form.error.authentication\");\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('compraList', {\r\n            templateUrl: 'app/public/components/compra/compra-list.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                usuario: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, Compra) {\r\n        var vm = this;\r\n\r\n        vm.item = Compra;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        //vm.paquetecreditosId = $stateParams.paquetecreditosId;\r\n        vm.filter = {\r\n            key: undefined\r\n        };\r\n        vm.function = 'findAllByUsuarioActivo';\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {fecha: 'desc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Eliminar\r\n        vm.showRemoveConfirmation = function (id) {\r\n            ModalService.open({\r\n                    templateUrl: 'app/components/form/delete/entity.delete.modal.html',\r\n                    controller: 'EntityDeleteModalController',\r\n                    controllerAs: 'ctrl',\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        item: function () {\r\n                            return Compra.get({id: id}).$promise;\r\n                        },\r\n                        params: function () {\r\n                            return {\r\n                                title: 'admin.compra.delete.title',\r\n                                body: 'admin.compra.delete.confirm',\r\n                                property: 'fecha'\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            ).result.then(function () {\r\n                vm.tableParams.reload();\r\n            });\r\n        };\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .directive('sameAs', directive);\r\n\r\n    function directive() {\r\n        return {\r\n            require: '?ngModel',\r\n            restrict: 'A',\r\n            link: function (scope, elem, attrs, ngModel) {\r\n                ngModel.$parsers.unshift(validate);\r\n\r\n                scope.$watch(attrs.sameAs, function () {\r\n                    ngModel.$setViewValue(ngModel.$viewValue);\r\n                });\r\n\r\n                function validate(value) {\r\n                    var isValid = scope.$eval(attrs.sameAs) === value;\r\n                    ngModel.$setValidity('sameAs', isValid);\r\n                    return isValid ? value : undefined;\r\n                }\r\n            }\r\n        };\r\n    }\r\n})();\r\n","/* globals $ */\r\n(function () {\r\n    'use strict';\r\n\r\n    // Módulos requeridos:\r\n    //\r\n    // label: Etiqueta que se mostrará en el tooltip\r\n    // position: Posición del tooltip. Por defecto: right\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('tooltip', Tooltip);\r\n\r\n    function Tooltip() {\r\n        var directive = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            templateUrl: 'app/components/form/tooltip/tooltip.html',\r\n            scope: {\r\n                label: '@',\r\n                position: '@'\r\n            }\r\n        };\r\n        return directive;\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Botones propios del editor de texto textAngular\r\n\r\n    angular\r\n        .module('app')\r\n        .config(textAngularConfig);\r\n\r\n    /* @ngInject */\r\n    function textAngularConfig($provide) {\r\n\r\n        $provide.decorator('taOptions', ['taRegisterTool', '$delegate', function (taRegisterTool, taOptions) {\r\n\r\n            // Insertar un texto que se sustituirá por el código\r\n            taRegisterTool('codigo', {\r\n                iconclass: \"fa fa-pencil-square-o\",\r\n                buttontext: \"{{'textangular.codigo' | translate}}\",\r\n                action: function () {\r\n                    this.$editor().wrapSelection(\"insertHTML\", \"{CODIGO}\");\r\n                }\r\n            });\r\n\r\n            return taOptions;\r\n        }]);\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // id: Identificador.\r\n    // label: Etiqueta.\r\n    // model: Campo que se modificará.\r\n    // disabled: Boolean.\r\n    // required: Boolean.\r\n    // tipo: String que identifica el tipo de editor (los botones que incluye). Tipos: codigo\r\n\r\n    // TODO: Lo ideal sería que al pulsar el submit no se enviase la información y se activasen los textareas con errores.\r\n    // TODO: i18n\r\n\r\n    angular\r\n        .module('app')\r\n        .component('textArea', {\r\n            template: '<label-form key=\"{{ctrl.label}}\" for=\"{{ctrl.id}}\" required=\"ctrl.required\"></label-form>' +\r\n            '<text-angular ng-model=\"ctrl.model\" id=\"{{ctrl.id}}\" ta-toolbar=\"{{ctrl.toolbar}}\" ng-required=\"{{ctrl.required}}\"></text-angular>',\r\n            bindings: {\r\n                id: '@',\r\n                label: '@',\r\n                model: '=', // required\r\n                disabled: '<',\r\n                required: '<',\r\n                tipo: '@'\r\n            },\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout) {\r\n        var vm = this;\r\n\r\n        vm.toolbar = [\r\n            ['html', 'bold', 'italics', 'underline'],\r\n            ['undo', 'redo']\r\n        ];\r\n\r\n        switch (vm.tipo) {\r\n            case 'codigo':\r\n                vm.toolbar.push(['codigo']);\r\n                break;\r\n            case 'estatica':\r\n                vm.toolbar.push(['h1', 'h2', 'p']);\r\n                vm.toolbar.push(['ul', 'ol']);\r\n                vm.toolbar.push(['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent']);\r\n                vm.toolbar.push(['insertLink']);\r\n                break;\r\n        }\r\n\r\n        $timeout(function () {\r\n            angular.element(\"text-angular#\" + vm.id).blur(function (data) {\r\n                var element = angular.element(data.target);\r\n                if (data.target.classList.contains(\"ng-invalid-required\")) {\r\n                    element.addClass(\"error\");\r\n                } else {\r\n                    element.removeClass(\"error\");\r\n                }\r\n            });\r\n            angular.element(\"text-angular#\" + vm.id).focus(function (data) {\r\n                angular.element(data.target).removeClass(\"error\");\r\n            });\r\n        });\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Requiere: label-form\r\n    // Módulos requeridos:\r\n    // \"ng-tags-input\": \"3.0.0\"\r\n    // \"angular-bootstrap\": \"1.3.3\"\r\n\r\n    // id: ID del input.\r\n    // multiple: Boolean. True para usar las etiquetas y false para usar un autcompletado simple.\r\n    // as-list: Boolean. Añadir clase as-list a los elementos para mostrarlos uno debajo de otro.\r\n    // restricted: Boolean. Solo permite añadir elementos que están en el autocompletado.\r\n    // disabled: Boolean. Permite deshabilitar los inputs.\r\n    // minLength: Número de caracteres requeridos para mostrar el autocompletado.\r\n    // key: Clave para el track by\r\n    // display: Propiedad que se va a mostrar (por defecto 'nombre')\r\n    // method: Método del servicio (por defecto 'query')\r\n    // parameters: Parámetros que se pueden añadir a la petición\r\n    // required: Campo obligatorio.\r\n    // resource: Tipo $resource del tesauro. El servicio tiene que implementar la operación query en el controlador.\r\n    //      Ej: IdiomaService. (/idioma/query?query=x)\r\n    // queryParam: Atributo en el que va a ir la query (por defecto 'query')\r\n    // templateUrl: URL a un archivo HTML, o nombre del ID del HTML. En app/templates/tesauro.templates.html se pueden definir las que se utilicen más de una vez.\r\n    // eliminable: Muestra el botón de eliminar en los tesauros simples.\r\n\r\n    // Nota: El campo restricted debería ser siempre a TRUE, ya que no vamos a hacer eso de crear los tesauros de manera dinámica\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('tesauro', Tesauro);\r\n\r\n    function Tesauro() {\r\n        return {\r\n            replace: true,\r\n            restrict: 'E',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindToController: true,\r\n            templateUrl: 'app/components/form/tesauro/tesauro.html',\r\n            scope: {\r\n                id: '@',\r\n                label: '@',\r\n                placeholder: '@',\r\n                tooltip: '@',\r\n                resource: '=',\r\n                ngModel: '=',\r\n                multiple: '=',\r\n                asList: '=',\r\n                key: '@',\r\n                display: '@',\r\n                method: '@',\r\n                parameters: '=',\r\n                restricted: '=',\r\n                disabled: '=',\r\n                minLength: '@',\r\n                required: '=',\r\n                queryParam: '@',\r\n                templateUrl: '@',\r\n                eliminable: '='\r\n            }\r\n        };\r\n    }\r\n\r\n    function Controller() {\r\n        var vm = this;\r\n\r\n        if (!vm.key) {\r\n            vm.key = \"nombre\";\r\n        }\r\n\r\n        if (!vm.display) {\r\n            vm.display = \"nombre\";\r\n        }\r\n\r\n        if (!vm.method) {\r\n            vm.method = \"query\";\r\n        }\r\n\r\n        if (!vm.minLength) {\r\n            vm.minLength = 1;\r\n        }\r\n\r\n        if (!vm.queryParam) {\r\n            vm.queryParam = \"query\";\r\n        }\r\n\r\n        vm.clear = function () {\r\n            vm.ngModel = null;\r\n        };\r\n\r\n        vm.resetElement = function () {\r\n            vm.ngModel = null;\r\n        };\r\n\r\n        vm.setElement = function (item) {\r\n            if (item.id && !vm.multiple) {\r\n                vm.ngModel.id = item.id;\r\n            }\r\n        };\r\n\r\n        vm.loadTags = function (query) {\r\n            var params = !vm.parameters ? {} : vm.parameters;\r\n            params[vm.queryParam] = query;\r\n            // angular.merge(params, {query: query});\r\n            return vm.resource[vm.method](params).$promise.then(function (data) {\r\n                if (Array.isArray(data)) {\r\n                    return data;\r\n                } else {\r\n                    return data.content;\r\n                }\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Requiere: label-form\r\n\r\n    // id: Identificador del select.\r\n    // label: etiqueta\r\n    // model: Campo que se modificará.\r\n    // disabled\r\n    // required\r\n    // options: Opciones del select.\r\n    // base: Clave base para los enumerados.\r\n    // display: Propiedad del objeto que se usará para internacionalizar el contenido.\r\n\r\n    // FORMATEADO: Se acepta dar un formato especial a los selects. Para esto habrá que pasar listas de elementos, separadas por comas, en display y base, además del campo format.\r\n    // Este campo tendrá un _ en cada variable que se quiera rellenar (uno por cada display).\r\n\r\n    angular\r\n        .module('app')\r\n        .component('selectForm', {\r\n            templateUrl: 'app/components/form/select/select-form.html',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                id: '@',\r\n                label: '@',\r\n                tooltip: '@',\r\n                model: '=', // required\r\n                change: '=',\r\n                display: '@', // required\r\n                format: '@',\r\n                disabled: '=',\r\n                required: '=',\r\n                options: '=', // required\r\n                base: '@', // required\r\n                empty: '@'\r\n            },\r\n            /* @ngInject */\r\n            controller: function ($translate) {\r\n                var vm = this;\r\n\r\n                if (!vm.display) {\r\n                    vm.display = \"nombre\";\r\n                }\r\n                var list = vm.display.split(\",\");\r\n\r\n                if (!vm.base) {\r\n                    vm.base = \"\";\r\n                }\r\n                var base = vm.base.split(\",\");\r\n\r\n                if (!vm.format) {\r\n                    vm.format = \"_\";\r\n                }\r\n\r\n                // FIXME: Esta operación se llama cada vez que se interactúa con un select para recalcular el valor de TODOS los options de todos los selects.\r\n                vm.formatElement = function (element) {\r\n                    var formated = vm.format;\r\n                    angular.forEach(list, function (elementDisplay, index) {\r\n                        var baseText = base[index] ? base[index].trim() : \"\";\r\n                        var translated = $translate.instant(baseText + element[elementDisplay.trim()]);\r\n                        formated = formated.replace(\"_\", translated);\r\n                    });\r\n                    return formated;\r\n                }\r\n            }\r\n        });\r\n\r\n})();\r\n","/* globals $ */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('passwordStrengthBar', passwordStrengthBar);\r\n\r\n    function passwordStrengthBar() {\r\n        var directive = {\r\n            replace: true,\r\n            restrict: 'E',\r\n            template: '<div id=\"strength\">' +\r\n            '<small translate=\"admin.register.password.strength\">Password strength:</small>' +\r\n            '<ul id=\"strengthBar\">' +\r\n            '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\r\n            '</ul>' +\r\n            '</div>',\r\n            scope: {\r\n                passwordToCheck: '='\r\n            },\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        /* private helper methods*/\r\n\r\n        function linkFunc(scope, iElement) {\r\n            var strength = {\r\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\r\n                mesureStrength: function (p) {\r\n\r\n                    var _force = 0;\r\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\r\n\r\n                    var _lowerLetters = /[a-z]+/.test(p);\r\n                    var _upperLetters = /[A-Z]+/.test(p);\r\n                    var _numbers = /[0-9]+/.test(p);\r\n                    var _symbols = _regex.test(p);\r\n\r\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\r\n                    var _passedMatches = $.grep(_flags, function (el) {\r\n                        return el === true;\r\n                    }).length;\r\n\r\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\r\n                    _force += _passedMatches * 10;\r\n\r\n                    // penality (short password)\r\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\r\n\r\n                    // penality (poor variety of characters)\r\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\r\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\r\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\r\n\r\n                    return _force;\r\n\r\n                },\r\n                getColor: function (s) {\r\n\r\n                    var idx = 0;\r\n                    if (s <= 10) {\r\n                        idx = 0;\r\n                    }\r\n                    else if (s <= 20) {\r\n                        idx = 1;\r\n                    }\r\n                    else if (s <= 30) {\r\n                        idx = 2;\r\n                    }\r\n                    else if (s <= 40) {\r\n                        idx = 3;\r\n                    }\r\n                    else {\r\n                        idx = 4;\r\n                    }\r\n\r\n                    return {idx: idx + 1, col: this.colors[idx]};\r\n                }\r\n            };\r\n            scope.$watch('passwordToCheck', function (password) {\r\n                if (password) {\r\n                    var c = strength.getColor(strength.mesureStrength(password));\r\n                    iElement.removeClass('ng-hide');\r\n                    iElement.find('ul').children('li')\r\n                        .css({'background-color': '#DDD'})\r\n                        .slice(0, c.idx)\r\n                        .css({'background-color': c.col});\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // http://dotansimha.github.io/angularjs-dropdown-multiselect/docs\r\n    // Requiere: label-form, tooltip, ficheros de mensaje\r\n\r\n    // id: ID del elemento\r\n    // label: Etiqueta a mostrar\r\n    // tooltip: Tooltip que se añade a la etiqueta\r\n    // model: Objeto que se actualizará\r\n    // options: Lista de opciones\r\n    // display: Propiedad que se mostrará al seleccionar\r\n    // template: Información que se va a mostrar. Tiene que ir entre comillas. Ej: '{{option.nombre}} <span ng-if=\\'option.pais.nombre\\'>({{option.pais.nombre}})</span>'\r\n    // enum-base: Texto base del enumerado. Con este String se sabe si se está mostrando un enumerado o un objeto. Ej: enum.idiomas.\r\n    // extra: Propiedades para sobreescribir en formato json. Sobreescriben las indicadas anteriormente\r\n    // empty: Propiedad que sobreescribirá al valor por defecto del componente cuando ninguna opción está seleccionada\r\n\r\n    // Rendimiento:\r\n    // Hasta 50 no se nota ningún tiempo de espera. Sin embargo, a partir de 100 se nota que le cuesta abrir, pero es asumible.\r\n    // Con 1000 elementos ya tarda varios segundos.\r\n\r\n    var component = {\r\n        templateUrl: 'app/components/form/multiselect/multi-select.html',\r\n        bindings: {\r\n            id: '@',\r\n            label: '@',\r\n            tooltip: '@',\r\n            model: '=',\r\n            options: '<',\r\n            display: '@',\r\n            template: '<',\r\n            enum: '<',\r\n            enumBase: '@',\r\n            extra: '<',\r\n            empty: '@'\r\n        },\r\n        controller: Controller,\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    /* @ngInject */\r\n    function Controller($translate) {\r\n        var vm = this;\r\n\r\n        if (!vm.model) {\r\n            vm.model = [];\r\n        }\r\n\r\n        vm.extraSettings = {\r\n            smartButtonMaxItems: 4,\r\n\r\n            enableSearch: true,\r\n            clearSearchOnClose: true,\r\n\r\n            selectedToTop: true,\r\n            showUncheckAll: false,\r\n            showCheckAll: false\r\n        };\r\n\r\n        if (!vm.enumBase) {\r\n            angular.merge(vm.extraSettings, {\r\n                displayProp: vm.display ? vm.display : 'nombre',\r\n                searchField: vm.display ? vm.display : 'nombre',\r\n                idProperty: 'id'\r\n            });\r\n        } else {\r\n            // Enumerados\r\n            angular.merge(vm.extraSettings, {\r\n                // Función para personalizar el texto que se muestra en el botón\r\n                smartButtonTextProvider: function (selectionArray) {\r\n                    var text = \"\";\r\n                    selectionArray.forEach(function (element, index) {\r\n                        text += $translate.instant(vm.enumBase + element);\r\n                        if (index + 1 < selectionArray.length) {\r\n                            text += \", \";\r\n                        }\r\n                    });\r\n                    return text;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (vm.template) {\r\n            vm.extraSettings.template = vm.template;\r\n        }\r\n\r\n        if (vm.extra) {\r\n            angular.merge(vm.extraSettings, vm.extra);\r\n        }\r\n\r\n        // Traducciones de los textos\r\n        vm.translations = {\r\n            buttonDefaultText: $translate.instant(\"multiselect.default\"),\r\n            searchPlaceholder: $translate.instant(\"multiselect.search\"),\r\n            selectionCount: $translate.instant(\"multiselect.selectioncount\")\r\n        };\r\n        if (vm.empty != null && vm.empty.length) {\r\n            vm.translations.buttonDefaultText = $translate.instant(vm.empty);\r\n        }\r\n\r\n        // Elemento seleccionado\r\n        vm.onItemSelect = function (item) {\r\n\r\n        };\r\n\r\n    }\r\n\r\n    angular\r\n        .module('app')\r\n        .component('multiSelect', component);\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Lista de elementos dinámicos. Este componente incluye la gestión: añadir y eliminar.\r\n\r\n    // label: Texto para la etiqueta.\r\n    // tooltip: Texto para el tooltip.\r\n    // list: Lista de elementos que se modificará.\r\n    // resolve: Información del controller desde donde es invocado el componente. Ej: resolve=\"{agenteService: ctrl.agenteService, openAgenteModal: ctrl.openAgenteModal}\"\r\n    // templateUrl: Plantilla HTML que se mostrará, con los diferentes inputs.\r\n    // required: Boolean. Si es true, siempre habrá al menos un elemento en la lista.\r\n    // acordeon: Boolean. Indica si cada elemento se incluye en un acordeón. Se usa para ajustar el botón de eliminar.\r\n\r\n    // Ejemplo: original-form.admin.html\r\n    // Hay que trabajar sobre la variable element, ya que será así como se llame a cada objeto sobre el que se itere en el array.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('listForm', {\r\n            templateUrl: 'app/components/form/listform/list-form.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                label: '@',\r\n                tooltip: '@',\r\n                list: '=',\r\n                resolve: '<',\r\n                templateUrl: '@',\r\n                required: '<',\r\n                acordeon: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller() {\r\n        var vm = this;\r\n\r\n        function initList() {\r\n            if (!vm.list) {\r\n                vm.list = [];\r\n                if (vm.required) {\r\n                    vm.list.push({});\r\n                }\r\n            } else if (!vm.list.length && vm.required) {\r\n                vm.list.push({});\r\n            }\r\n        }\r\n\r\n        vm.addElement = function () {\r\n            vm.list.push({desplegado: true});\r\n        };\r\n\r\n        vm.removeElement = function (element) {\r\n            vm.list.splice(vm.list.indexOf(element), 1);\r\n            initList();\r\n        };\r\n\r\n        initList();\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Requiere: tooltip\r\n\r\n    // key: Clave del fichero de mensajes.\r\n    // for: ID del input asociado.\r\n    // tooltip: Mensaje mostrado como ayuda\r\n    // required: Muestra u oculta el * en función de si es obligatorio o no.\r\n\r\n    var labelForm = {\r\n        template: '<label ng-if=\"ctrl.key\" class=\"control-label\" ng-class=\"{\\'required\\' : ctrl.required}\" for=\"{{ctrl.for}}\">' +\r\n            '{{ctrl.key | translate}}{{ctrl.sufijo}}<span ng-if=\"ctrl.required\">*</span>' +\r\n            '</label><tooltip ng-if=\"ctrl.tooltip\" label=\"{{ctrl.tooltip}}\"></tooltip>',\r\n        bindings: {\r\n            key: '@', // required\r\n            for: '@',\r\n            tooltip: '@',\r\n            required: '=',\r\n            sufijo: '@'\r\n        },\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('labelForm', labelForm);\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var filter = {\r\n        templateUrl: 'app/components/form/filter/filter.input.template.html',\r\n        bindings: {\r\n            filter: '='\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('filter', filter);\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Componente que mete en una variable el día, mes y año de nacimiento/muerte/fecha genérica.\r\n    // Es importante que las variables en el modelo se llamen prefijoX para que se pueda utilizar este componente.\r\n\r\n    // model: Campo que se modificará.\r\n    // prefijo: String. nacimiento | muerte | fecha. Se concatena este prefijo con el campo. Ej: nacimientoDia.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('fecha', {\r\n            templateUrl: 'app/components/form/fecha/fecha.html',\r\n            bindings: {\r\n                model: '=',\r\n                prefijo: '@',\r\n                label: '@'\r\n            },\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // id: Identificador del select.\r\n    // label: etiqueta\r\n    // model: Campo que se modificará.\r\n    // disabled\r\n    // required\r\n    // options: Opciones del select.\r\n    // base: Clave base para los enumerados.\r\n    // display: Propiedad del objeto que se usará para internacionalizar el contenido.\r\n    // empty: Clave de mensaje para mostrar en la opción vacía\r\n\r\n    // Nota: Para utilizar como un campo booleano (Null/Sí/No), pasar como options: [true, false].\r\n\r\n    angular\r\n        .module('app')\r\n        .component('enumSelect', {\r\n            templateUrl: 'app/components/form/enum/enum-select.html',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                id: '@',\r\n                label: '@',\r\n                model: '=',\r\n                change: '=',\r\n                display: '@',\r\n                empty: '@',\r\n                disabled: '=',\r\n                required: '=',\r\n                options: '=',\r\n                base: '@'\r\n            }\r\n        });\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // id: Identificador del select.\r\n    // label: etiqueta\r\n    // model: Campo que se modificará.\r\n    // disabled\r\n    // required\r\n    // empty: Clave de mensaje para mostrar en la opción vacía\r\n\r\n    // Nota: Para utilizar como un campo booleano (Null/Sí/No), pasar como options: [true, false].\r\n\r\n    angular\r\n        .module('app')\r\n        .component('enumSelectBoolean', {\r\n            templateUrl: 'app/components/form/enum/enum-select-boolean.html',\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                id: '@',\r\n                label: '@',\r\n                model: '=',\r\n                change: '=',\r\n                empty: '@',\r\n                disabled: '=',\r\n                required: '='\r\n            }\r\n        });\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .controller('EntityDeleteModalController', Controller);\r\n\r\n    /* @ngInject */\r\n    function Controller(item, params, ModalService) {\r\n        var vm = this;\r\n\r\n        vm.dismiss = ModalService.dismiss;\r\n        vm.item = item;\r\n        vm.params = params;\r\n\r\n        vm.confirmRemove = function () {\r\n            vm.item.$remove({id: vm.item.id}).then(function () {\r\n                ModalService.close(vm.item);\r\n            });\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // id: Identificador del select.\r\n    // label: etiqueta\r\n    // model: Campo que se modificará.\r\n    // disabled\r\n    // required\r\n    // options: Opciones del select.\r\n    // format: Formato de la fecha\r\n    // change: Función que se llamará al cambiar el input.\r\n    // showBar: Booleano para mostrar u ocultar la barra inferior del DatePicker. (default: true)\r\n    // readonly: Booleano para deshabilitar el input (default: false)\r\n    // disabled: No permite modificar el input.\r\n\r\n    var datePicker = {\r\n        templateUrl: 'app/components/form/date/date-picker.html',\r\n        bindings: {\r\n            id: '@',\r\n            label: '@',\r\n            model: '=', // required\r\n            disabled: '<',\r\n            required: '<',\r\n            options: '<',\r\n            format: '@',\r\n            change: '<',\r\n            showBar: '<?', // opcional\r\n            readonly: '<?' // opcional\r\n        },\r\n        controller: Controller,\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('datePicker', datePicker);\r\n\r\n    /* @ngInject */\r\n    function Controller() {\r\n        var vm = this;\r\n\r\n        function init() {\r\n            // Si recibimos la fecha del servidor, convertimos segundos a milisegundos\r\n            if (angular.isNumber(vm.model)) {\r\n                vm.model = vm.model * 1000;\r\n            }\r\n        }\r\n\r\n        vm.opened = false;\r\n        if (!vm.format) {\r\n            vm.format = 'dd/MM/yyyy';\r\n        }\r\n\r\n        if (typeof(vm.showBar) === 'undefined') {\r\n            vm.showBar = true;\r\n        }\r\n\r\n        if (typeof(vm.readonly) === 'undefined') {\r\n            vm.readonly = false;\r\n        }\r\n\r\n        if (vm.options && vm.options.minDate === 'today') {\r\n            vm.options.minDate = new Date();\r\n        }\r\n\r\n        vm.dateOptions = {\r\n            datepickerMode: 'year',\r\n            formatYear: 'yyyy',\r\n            maxDate: new Date(),\r\n            startingDay: 1,\r\n            showWeeks: false\r\n        };\r\n        angular.merge(vm.dateOptions, vm.options);\r\n\r\n        vm.openDatePicker = function () {\r\n            vm.opened = true;\r\n        };\r\n\r\n        init();\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // base: Clave base para el fichero de mensajes.\r\n    // value: Valor.\r\n\r\n    var enumerado = {\r\n        template: '<span ng-if=\"ctrl.value\">{{ctrl.base + \".\" + ctrl.value | translate}}</span>',\r\n        controllerAs: 'ctrl',\r\n        bindings: {\r\n            value: '@',\r\n            base: '@'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('enumerado', enumerado);\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .controller('AdminFormController', AdminFormController);\r\n\r\n    /* @ngInject */\r\n    function AdminFormController($timeout, $state, AlertService, Auth) {\r\n        var vm = this;\r\n\r\n        vm.registerAccount = {};\r\n        vm.roles = [];\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input')[0].focus();\r\n        });\r\n\r\n        vm.register = function () {\r\n            if (vm.registerAccount.password !== vm.confirmPassword) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                //En caso de que más roles sean admin, añadir al enumerado Rol y obtenerlos\r\n                vm.registerAccount.rol = 'ROLE_ADMIN';\r\n                vm.registerAccount.email = vm.registerAccount.login;\r\n                Auth.createAccount(vm.registerAccount).then(function () {\r\n                    $state.go(\"admin/admin/list\");\r\n                });\r\n            }\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER) {\r\n        var base = \"admin/admin\";\r\n        var params = {\r\n            base: base,\r\n            parent: 'admin',\r\n            baseUrl: \"/admin\",\r\n            templateUrlBase: \"app/admin/user/admin/admin\",\r\n            controller: 'AdminAdminController',\r\n            controllerForm: 'AdminFormController',\r\n            translateBase: \"admin.admin.\"\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n\r\n        // Crear\r\n        angular.merge(state.create, {\r\n            resolve: {\r\n                /* @ngInject */\r\n                itemData: function (User) {\r\n                    return new User();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create);\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('AdminAdminController', AdminAdminController);\r\n\r\n    /* @ngInject */\r\n    function AdminAdminController($timeout, $stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                                  ModalService, User) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input').focus();\r\n        });\r\n\r\n        vm.item = User;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.filter = {\r\n            key: undefined,\r\n            rol: 'ROLE_ADMIN'\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {login: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Eliminar\r\n        vm.showRemoveConfirmation = function (user) {\r\n            ModalService.open({\r\n                templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                controller: 'ConfirmModalController',\r\n                controllerAs: 'ctrl',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (User) {\r\n                        return User.get({email: user.email}).$promise;\r\n                    },\r\n                    params: function () {\r\n                        return {\r\n                            title: 'admin.list-users.delete.title',\r\n                            body: 'admin.list-users.delete.confirmadmin',\r\n                            property: 'email'\r\n                        };\r\n                    },\r\n                    /* @ngInject */\r\n                    tipo: function (User) {\r\n                        return User;\r\n                    },\r\n                    funcion: function () {\r\n                        return \"eliminar\";\r\n                    },\r\n                    parametros: function () {\r\n                        return {id: user.id};\r\n                    }\r\n                }\r\n            }).result.then(function () {\r\n                vm.tableParams.reload();\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n        // Nuevo usuario\r\n            .state('social-register', {\r\n                parent: 'public',\r\n                url: '/social-register/:provider',\r\n                views: {\r\n                    'content@': {\r\n                        /* @ngInject */\r\n                        controller: function login(SocialService) {\r\n                            SocialService.loginWithToken(true);\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            // Login de un usuario ya existente\r\n            .state('social-auth', {\r\n                parent: 'public',\r\n                url: '/social-auth',\r\n                views: {\r\n                    'content@': {\r\n                        /* @ngInject */\r\n                        controller: function login(SocialService) {\r\n                            SocialService.loginWithToken(false);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('SocialService', SocialService);\r\n\r\n    /* @ngInject */\r\n    function SocialService($http, $cookies, $state, Auth, AlertService) {\r\n        var socialService = {\r\n            loginWithToken: loginWithToken,\r\n            getProviderSetting: getProviderSetting,\r\n            getProviderURL: getProviderURL,\r\n            getCSRF: getCSRF\r\n        };\r\n\r\n        return socialService;\r\n\r\n        function loginWithToken(registro) {\r\n            var token = $cookies.get('social-authentication');\r\n\r\n            Auth.loginWithToken(token, false).then(function () {\r\n                console.log(\"login con exito\");\r\n                if (registro) {\r\n                    AlertService.success(\"social.success.registro\");\r\n                }\r\n                $cookies.remove('social-authentication');\r\n                Auth.authorize(true);\r\n                $state.go(\"miespacio/miagenda\");\r\n            }, function () {\r\n                console.log(\"login sin exito\");\r\n                if (registro) {\r\n                    AlertService.error(\"social.error.registro\");\r\n                } else {\r\n                    AlertService.error(\"social.error.login\");\r\n                }\r\n                $state.go('registro/info');\r\n            });\r\n        }\r\n\r\n        function getProviderSetting(provider) {\r\n            switch (provider) {\r\n                case 'google':\r\n                    return 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email';\r\n                case 'facebook':\r\n                    return 'public_profile,email';\r\n                default:\r\n                    return 'Provider setting not defined';\r\n            }\r\n        }\r\n\r\n        function getProviderURL(provider) {\r\n            return 'signin/' + provider;\r\n        }\r\n\r\n        function getCSRF() {\r\n            return $cookies.get($http.defaults.xsrfCookieName);\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('Principal', Principal);\r\n\r\n    /* @ngInject */\r\n    function Principal($q, Account, $rootScope) {\r\n        var _identity,\r\n            _authenticated = false;\r\n\r\n        var service = {\r\n            authenticate: authenticate,\r\n            hasAnyAuthority: hasAnyAuthority,\r\n            hasAuthority: hasAuthority,\r\n            identity: identity,\r\n            isAuthenticated: isAuthenticated,\r\n            isIdentityResolved: isIdentityResolved\r\n        };\r\n\r\n        return service;\r\n\r\n        function authenticate(identity) {\r\n            _identity = identity;\r\n            _authenticated = identity !== null;\r\n            $rootScope.$broadcast('changedIdentity');\r\n        }\r\n\r\n        function hasAnyAuthority(authorities) {\r\n            if (authorities.indexOf(\"ROLE_ANONYMOUS\") >= 0 && !_authenticated && !_identity) {\r\n                return true;\r\n            }\r\n\r\n            if (!_authenticated || !_identity || !_identity.authorities) {\r\n                return false;\r\n            }\r\n\r\n            if (authorities.indexOf(\"ROLE_AUTHENTICATED\") >= 0\r\n                && _identity.authorities && _identity.authorities.length > 0) {\r\n                return true;\r\n            }\r\n\r\n            for (var i = 0; i < authorities.length; i++) {\r\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function hasAuthority(authority) {\r\n            if (!_authenticated) {\r\n                return $q.when(false);\r\n            }\r\n\r\n            return this.identity().then(function (_id) {\r\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\r\n            }, function () {\r\n                return false;\r\n            });\r\n        }\r\n\r\n        function identity(force, login) {\r\n            var deferred = $q.defer();\r\n\r\n            if (force === true) {\r\n                _identity = undefined;\r\n            }\r\n\r\n            // check and see if we have retrieved the identity data from the server.\r\n            // if we have, reuse it by immediately resolving\r\n            if (angular.isDefined(_identity)) {\r\n                deferred.resolve(_identity);\r\n\r\n                return deferred.promise;\r\n            }\r\n\r\n            // retrieve the identity data from the server, update the identity object, and then resolve.\r\n            Account.get({login: login}).$promise\r\n                .then(getAccountThen)\r\n                .catch(getAccountCatch);\r\n\r\n            return deferred.promise;\r\n\r\n            function getAccountThen(account) {\r\n                _identity = account.data;\r\n                _authenticated = true;\r\n                deferred.resolve(_identity);\r\n                $rootScope.$broadcast('changedIdentity');\r\n            }\r\n\r\n            function getAccountCatch() {\r\n                _identity = null;\r\n                _authenticated = false;\r\n                deferred.resolve(_identity);\r\n                $rootScope.$broadcast('changedIdentity');\r\n            }\r\n        }\r\n\r\n        function isAuthenticated() {\r\n            return _authenticated;\r\n        }\r\n\r\n        function isIdentityResolved() {\r\n            return angular.isDefined(_identity);\r\n        }\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Auth', Auth);\r\n\r\n    /* ngInject */\r\n    function Auth($rootScope, $state, $sessionStorage, $q, $http, AuthServerProvider, Principal, User, Perfil, Account, ADMIN_PRINCIPAL) {\r\n        return {\r\n            login: login,\r\n            loginWithToken: loginWithToken,\r\n            logout: logout,\r\n            authorize: authorize,\r\n            createAccount: createAccount,\r\n            validateAccount: validateAccount,\r\n            changePassword: changePassword,\r\n            resetPasswordInit: resetPasswordInit,\r\n            resetPasswordFinish: resetPasswordFinish\r\n        };\r\n\r\n        function validateAccount(key) {\r\n            return $http({\r\n                method: 'GET',\r\n                url: 'api/public/cuenta/validar',\r\n                params: {key: key}\r\n            });\r\n        }\r\n\r\n        function login(credentials, callback) {\r\n            /* jshint validthis:true */\r\n            var cb = callback || angular.noop;\r\n            var deferred = $q.defer();\r\n\r\n            var login = credentials.username;\r\n\r\n            AuthServerProvider.login(credentials).then(function (jwt) {\r\n                // retrieve the logged account information\r\n                Principal.identity(true, login).then(function (account) {\r\n                    // After the login the language will be changed to\r\n                    // the language selected by the user during his registration\r\n\r\n                    // $translate.use(account.langKey);\r\n\r\n                    if (account.empresa != null) {\r\n                        angular.element(\".menu [ui-sref='paquetecreditos']\").parent().hide();\r\n                    }\r\n                    if (account.rol === 'ROLE_PROFESOR') {\r\n                        angular.element(\".menu [ui-sref='paquetecreditos']\").parent().hide();\r\n                        angular.element(\".menu [ui-sref='profesor/list']\").parent().hide();\r\n                    }\r\n                    deferred.resolve(account);\r\n                });\r\n                return cb();\r\n            }).catch(function (err) {\r\n                this.logout();\r\n                deferred.reject(err);\r\n                return cb(err);\r\n            }.bind(this));\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function loginWithToken(jwt, rememberMe) {\r\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\r\n        }\r\n\r\n        function logout() {\r\n            AuthServerProvider.logout();\r\n            Principal.authenticate(null);\r\n            angular.element(\".menu [ui-sref='paquetecreditos']\").parent().show();\r\n            angular.element(\".menu [ui-sref='profesor/list']\").parent().show();\r\n        }\r\n\r\n        function authorize(force, authorities) {\r\n            var authReturn = Principal.identity(force).then(authThen);\r\n\r\n            return authReturn;\r\n\r\n            function authThen() {\r\n                var isAuthenticated = Principal.isAuthenticated();\r\n\r\n                // an authenticated user can't access to login and register pages\r\n                if (isAuthenticated && $rootScope.toState.parent === 'account'\r\n                    && ($rootScope.toState.name === 'login'\r\n                    || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth'\r\n                    || $rootScope.toState.name === 'recuperar/init' || $rootScope.toState.name === 'recuperar/finish')) {\r\n                    $state.go('home');\r\n                }\r\n\r\n                // recover and clear previousState after external login redirect (e.g. oauth2)\r\n                if (isAuthenticated && (!$rootScope.fromState || !$rootScope.fromState.name) && $sessionStorage.previousStateName) {\r\n                    var previousStateName = $sessionStorage.previousStateName;\r\n                    var previousStateParams = $sessionStorage.previousStateParams;\r\n                    delete $sessionStorage.previousStateName;\r\n                    delete $sessionStorage.previousStateParams;\r\n                    $state.go(previousStateName, previousStateParams);\r\n                }\r\n\r\n                // Si estamos autenticados y nos dirigimos a la pantalla de login/registro\r\n                if (isAuthenticated && $rootScope.toState.name === \"registro/info\") {\r\n\r\n                    // Obtenemos el usuario autenticado\r\n                    Account.get().$promise\r\n                        .then(getAccountThen);\r\n\r\n                    function getAccountThen(account) {\r\n                        // Teniendo en cuenta el rol del usuario autenticado,\r\n                        // nos dirigimos a un estado u otro\r\n                        if (account && account.data && account.data.rol) {\r\n                            switch (account.data.rol) {\r\n                                case 'ROLE_ADMIN':\r\n                                    $state.go(ADMIN_PRINCIPAL);\r\n                                    break;\r\n                                case 'ROLE_ALUMNO':\r\n                                case 'ROLE_PROFESOR':\r\n                                    $state.go('miespacio/info');\r\n                                    break;\r\n                                case 'ROLE_EMPRESA':\r\n                                    $state.go('miespacio/misalumnos');\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities))\r\n                    || (authorities && authorities.length > 0 && !Principal.hasAnyAuthority(authorities))) {\r\n                    if (isAuthenticated) {\r\n                        // user is signed in but not authorized for desired state\r\n                        $state.go('accessdenied');\r\n                    } else {\r\n                        // user is not authenticated. stow the state they wanted before you\r\n                        // send them to the login service, so you can return them when you're done\r\n                        $sessionStorage.previousStateName = $rootScope.toState.name;\r\n                        $sessionStorage.previousStateParams = $rootScope.toStateParams;\r\n\r\n                        if ($rootScope.toState.name.startsWith(\"admin/\")) {\r\n                            // now, send them to the signin state so they can log in\r\n                            $state.go('login');\r\n                        } else {\r\n                            $state.go('registro/info');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function createAccount(account, callback) {\r\n            /* jshint validthis:true */\r\n            var cb = callback || angular.noop;\r\n\r\n            return User.save(account,\r\n                function () {\r\n                    return cb(account);\r\n                },\r\n                function (err) {\r\n                    // this.logout();\r\n                    return cb(err);\r\n                }.bind(this)).$promise;\r\n        }\r\n\r\n        function changePassword(newPassword, callback) {\r\n            var cb = callback || angular.noop;\r\n\r\n            return Perfil.changePassword(newPassword, function () {\r\n                return cb();\r\n            }, function (err) {\r\n                return cb(err);\r\n            }).$promise;\r\n        }\r\n\r\n        function resetPasswordInit(email) {\r\n            return $http({\r\n                method: 'GET',\r\n                url: 'api/public/cuenta/reset-contrasena/init',\r\n                params: {email: email}\r\n            });\r\n        }\r\n\r\n        function resetPasswordFinish(keyAndPassword) {\r\n            return $http({\r\n                method: 'GET',\r\n                url: 'api/public/cuenta/reset-contrasena/finish',\r\n                params: {\r\n                    email: keyAndPassword.email,\r\n                    key: keyAndPassword.key,\r\n                    newPassword: keyAndPassword.newPassword\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('AuthServerProvider', AuthServerProvider);\r\n\r\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\r\n\r\n    function AuthServerProvider($http, $localStorage, $sessionStorage, $q) {\r\n        var service = {\r\n            getToken: getToken,\r\n            hasValidToken: hasValidToken,\r\n            login: login,\r\n            loginWithToken: loginWithToken,\r\n            storeAuthenticationToken: storeAuthenticationToken,\r\n            logout: logout\r\n        };\r\n\r\n        return service;\r\n\r\n        function getToken() {\r\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\r\n        }\r\n\r\n        function hasValidToken() {\r\n            var token = this.getToken();\r\n            return token && token.expires && token.expires > new Date().getTime();\r\n        }\r\n\r\n        function login(credentials) {\r\n            var data = {\r\n                username: credentials.username,\r\n                password: credentials.password,\r\n                rememberMe: credentials.rememberMe\r\n            };\r\n            return $http.post('api/account/authenticate', data).then(authenticateSuccess);\r\n\r\n            function authenticateSuccess(data) {\r\n                var status = data.status;\r\n                var headers = data.headers;\r\n                var bearerToken = headers('Authorization');\r\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\r\n                    var jwt = bearerToken.slice(7, bearerToken.length);\r\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\r\n                    return jwt;\r\n                }\r\n            }\r\n        }\r\n\r\n        function loginWithToken(jwt, rememberMe) {\r\n            var deferred = $q.defer();\r\n\r\n            if (angular.isDefined(jwt)) {\r\n                this.storeAuthenticationToken(jwt, rememberMe);\r\n                deferred.resolve(jwt);\r\n            } else {\r\n                deferred.reject();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function storeAuthenticationToken(jwt, rememberMe) {\r\n            if (true) {\r\n                $localStorage.authenticationToken = jwt;\r\n            } else {\r\n                $sessionStorage.authenticationToken = jwt;\r\n            }\r\n        }\r\n\r\n        function logout() {\r\n            delete $localStorage.authenticationToken;\r\n            delete $sessionStorage.authenticationToken;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Account', Account);\r\n\r\n    /* @ngInject */\r\n    function Account($resource) {\r\n        return $resource('api/account/account', {}, {\r\n            'get': {\r\n                method: 'GET',\r\n                params: {login: '@login'},\r\n                isArray: false,\r\n                interceptor: {\r\n                    response: function (response) {\r\n                        // expose response\r\n                        return response;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('profesor/list', {\r\n                parent: 'public',\r\n                url: '/busqueda-profesores',\r\n                data: {\r\n                    pageTitle: 'global.profesores'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/profesor/list/profesor.list.html',\r\n                        controller: 'ProfesorListController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    idiomas: function (Idioma) {\r\n                        return Idioma.findAll({sortProperty: 'nombre'}).$promise.then(function (data) {\r\n                            return data.content;\r\n                        });\r\n                    },\r\n                    /* @ngInject */\r\n                    niveles: function (Nivel) {\r\n                        return Nivel.query().$promise;\r\n                    },\r\n                    /* @ngInject */\r\n                    paises: function (Pais) {\r\n                        return Pais.getAllWithProfesores().$promise;\r\n                    },\r\n                    /* @ngInject */\r\n                    /*disponibilidades: function (EnumService) {\r\n                        return EnumService.get('disponibilidad');\r\n                    },*/\r\n                    /* @ngInject */\r\n                    capacidades: function (Capacidad) {\r\n                        return Capacidad.findAll({sortProperty: 'nombre'}).$promise.then(function (data) {\r\n                            return data.content;\r\n                        });\r\n                    },\r\n                    /* @ngInject */\r\n                    horadias: function (EnumService) {\r\n                        return EnumService.get('horadia');\r\n                    },\r\n                    /* @ngInject */\r\n                    dias: function (EnumService) {\r\n                        return EnumService.get('dia');\r\n                    }\r\n                 }\r\n\r\n            })\r\n            .state('profesor/info', {\r\n                parent: 'profesor/list',\r\n                url: '/:id',\r\n                data: {\r\n                    pageTitle: 'global.menu.profesor.info'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/public/profesor/info/profesor.details.html',\r\n                        controller: 'ProfesorDetailsController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    profesor: function (User, $stateParams) {\r\n                        return User.getProfesorById({id: $stateParams.id}).$promise;\r\n                    }\r\n                 }\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    function stateConfig($stateProvider) {\r\n    \t/*\r\n        $stateProvider.state('home', {\r\n            parent: 'public',\r\n            url: '/',\r\n            data: {\r\n                pageTitle: 'global.title'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/public/home/home.html',\r\n                    controller: 'HomeController',\r\n                    controllerAs: 'ctrl'\r\n                }\r\n            }\r\n        });\r\n        */\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('HomeController', HomeController);\r\n\r\n    /* @ngInject */\r\n    function HomeController() {\r\n        var vm = this;\r\n\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('compra', {\r\n            parent: 'public',\r\n            redirectTo: 'compra/get',\r\n            url: '/compra',\r\n            params: {\r\n                compra: null\r\n            },\r\n            data: {\r\n                authorities: ['ROLE_AUTHENTICATED'],\r\n                pageTitle: 'global.menu.compra'\r\n            }\r\n        }).state('compra/crear', {\r\n            parent: 'compra',\r\n            params: {\r\n                paquetecreditosId: null,\r\n                solicitarFactura: false,\r\n                usuario: null\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    controllerAs: 'ctrl',\r\n                    template: '<div class=\"text-center\">' +\r\n                        '<div class=\"lead\" translate=\"comun.cargando\"></div>' +\r\n                        '<loading is-loading=\"true\" class=\"text-center\"></divloading></div>'\r\n                }\r\n            },\r\n            resolve: {\r\n                /* @ngInject */\r\n                foo: function ($state, $stateParams, Compra, $window, AlertService) {\r\n                    console.log(\"Creando compra:\", $stateParams);\r\n                    Compra.crear({\r\n                        paquetecreditosId: $stateParams.paquetecreditosId,\r\n                        solicitarFactura: $stateParams.solicitarFactura\r\n                    }).$promise.then(function (result) {\r\n                        Compra.iniciarPaypal({compraId: result.id}).$promise.then(function (result) {\r\n                            if (!result.msg) {\r\n                                // Mensaje de error\r\n                                AlertService.error(\"compra.error.paypal\");\r\n                            } else {\r\n                                $window.location.href = result.msg;\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }).state('compra/paypal', {\r\n            parent: 'compra',\r\n            url: '/confirmar-paypal?compraId&paymentId&token',\r\n            data: {\r\n                authorities: []\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/public/compra/compra.success.html',\r\n                    /* @ngInject */\r\n                    controller: function ($state, $stateParams, Compra, Principal) {\r\n                        var vm = this;\r\n                        vm.loading = true;\r\n                        console.log(\"Finalizando compra\");\r\n\r\n                        Compra.confirmarPaypal({\r\n                            compraId: $stateParams.compraId,\r\n                            paymentId: $stateParams.paymentId,\r\n                            token: $stateParams.token\r\n                        }).$promise.then(function (result) {\r\n                            vm.loading = false;\r\n                            console.log(\"Compra terminada:\" + result);\r\n                            Principal.identity(true).then(function (data) {\r\n                                $state.go(\"miespacio/miscompras\");\r\n                            });\r\n                        }, function () {\r\n                            vm.loading = false;\r\n                            vm.error = true;\r\n                        });\r\n                    },\r\n                    controllerAs: 'ctrl'\r\n                }\r\n            }\r\n        }).state('compra/cancel', {\r\n            parent: 'compra',\r\n            url: '/cancelar?compraId&token',\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/public/compra/compra.success.html',\r\n                    /* @ngInject */\r\n                    controller: function ($state, $stateParams, Compra, AlertService) {\r\n                        console.log(\"Cancelando compra\");\r\n\r\n                        Compra.cancelar({compraId: $stateParams.compraId}).$promise.then(function (result) {\r\n                            console.log(\"Compra cancelada: \" + result);\r\n                            AlertService.warning(\"compra.cancel\");\r\n                            $state.go('paquetecreditos');\r\n                        });\r\n                    },\r\n                    controllerAs: 'ctrl'\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('HeaderController', Controller);\r\n\r\n    /* @ngInject */\r\n    function Controller($scope, Principal) {\r\n        var vm = this;\r\n\r\n        // Información de usuario\r\n\r\n        function updateUser() {\r\n            Principal.identity().then(function (data) {\r\n                vm.usuario = data;\r\n            });\r\n        }\r\n\r\n        updateUser();\r\n\r\n        $scope.$on('changedIdentity', function () {\r\n            updateUser();\r\n        });\r\n\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('error', {\r\n                parent: 'site',\r\n                url: '/error',\r\n                data: {\r\n                    authorities: [],\r\n                    pageTitle: 'error.error.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/layouts/error/error.html'\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    skip: true\r\n                }\r\n            })\r\n            .state('accessdenied', {\r\n                parent: 'public',\r\n                url: '/acceso-denegado',\r\n                data: {\r\n                    authorities: [],\r\n                    pageTitle: 'error.accessdenied.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/layouts/error/accessdenied.html'\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    skip: true\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('ResourceHelper', ResourceHelper);\r\n\r\n    // La ruta para las operaciones de crear, actualizar y eliminar es la de admin.\r\n\r\n    /* @ngInject */\r\n    function ResourceHelper($resource) {\r\n\r\n        return {\r\n            getResource: getResource\r\n        };\r\n\r\n        function getResource(entidad, params, newFunctions, publico) {\r\n            var functions = {\r\n                'query': {\r\n                    method: 'GET',\r\n                    url: 'api/public/' + entidad + '/query',\r\n                    isArray: true\r\n                },\r\n                'get': {\r\n                    method: 'GET',\r\n                    url: 'api/public/' + entidad + '/:id',\r\n                    isArray: false\r\n                },\r\n                'findAll': {\r\n                    method: 'GET',\r\n                    url: 'api/public/' + entidad + '/findAll',\r\n                    isArray: false\r\n                }\r\n            };\r\n            angular.extend(functions, newFunctions);\r\n\r\n            var baseUrl = 'admin';\r\n            if (publico) {\r\n                baseUrl = 'public';\r\n            }\r\n\r\n            return $resource('api/' + baseUrl + '/' + entidad + '/:id', params, functions);\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('DescargaUtil', Service);\r\n\r\n    /* @ngInject */\r\n    function Service($http) {\r\n        return {\r\n            descargar: descargar\r\n        };\r\n\r\n        function descargar(url, params, type) {\r\n            $http({\r\n                method: 'GET',\r\n                url: url,\r\n                params: params,\r\n                responseType: \"arraybuffer\"\r\n            }).then(function (result) {\r\n                var file = new Blob([result.data], {type: type});\r\n                var contentDisposition = result.headers(\"Content-Disposition\");\r\n                var filename = contentDisposition.split(\";\")[1].trim().split('=')[1].replace(/\"/g, '');\r\n                saveAs(file, filename);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('notificationInterceptor', notificationInterceptor);\r\n\r\n    notificationInterceptor.$inject = ['AlertService'];\r\n\r\n    function notificationInterceptor(AlertService) {\r\n        var service = {\r\n            response: response\r\n        };\r\n\r\n        return service;\r\n\r\n        function response(response) {\r\n            var alertKey = response.headers('X-app-alert');\r\n            if (angular.isString(alertKey)) {\r\n                AlertService.success(alertKey, {param: response.headers('X-app-params')});\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\r\n\r\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\r\n\r\n    function errorHandlerInterceptor($q, $rootScope) {\r\n        return {\r\n            responseError: responseError\r\n        };\r\n\r\n        function responseError(response) {\r\n            if (!(response.status === 401 && response.data &&\r\n                (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account/account') === 0 )))) {\r\n                $rootScope.$emit('app.httpError', response);\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('authInterceptor', authInterceptor);\r\n\r\n    authInterceptor.$inject = ['$localStorage', '$sessionStorage'];\r\n\r\n    function authInterceptor($localStorage, $sessionStorage) {\r\n        var service = {\r\n            request: request\r\n        };\r\n\r\n        return service;\r\n\r\n        function request(config) {\r\n            /*jshint camelcase: false */\r\n            config.headers = config.headers || {};\r\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\r\n\r\n            if (token) {\r\n                config.headers.Authorization = 'Bearer ' + token;\r\n            }\r\n\r\n            return config;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\r\n\r\n\r\n    authExpiredInterceptor.$inject = ['$q', '$injector', '$localStorage', '$sessionStorage'];\r\n\r\n    function authExpiredInterceptor($q, $injector, $localStorage, $sessionStorage) {\r\n        var service = {\r\n            responseError: responseError\r\n        };\r\n\r\n        return service;\r\n\r\n        function responseError(response) {\r\n            if (response.status === 401) {\r\n                delete $localStorage.authenticationToken;\r\n                delete $sessionStorage.authenticationToken;\r\n                var Principal = $injector.get('Principal');\r\n                if (Principal.isAuthenticated()) {\r\n                    var Auth = $injector.get('Auth');\r\n                    Auth.authorize(true);\r\n                }\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .service('ParseLinks', ParseLinks);\r\n\r\n    /* @ngInject */\r\n    function ParseLinks() {\r\n        this.parse = function (header) {\r\n            if (angular.isUndefinedOrNull(header)) {\r\n                return {};\r\n            }\r\n\r\n            if (header.length === 0) {\r\n                throw new Error('input must not be of zero length');\r\n            }\r\n\r\n            // Split parts by comma\r\n            var parts = header.split(',');\r\n            var links = {};\r\n            // Parse each part into a named link\r\n            angular.forEach(parts, function (p) {\r\n                var section = p.split(';');\r\n                if (section.length !== 2) {\r\n                    throw new Error('section could not be split on \";\"');\r\n                }\r\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\r\n                var queryString = {};\r\n                url.replace(\r\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\r\n                    function ($0, $1, $2, $3) {\r\n                        queryString[$1] = $3;\r\n                    }\r\n                );\r\n                var page = queryString.page;\r\n                if (angular.isString(page)) {\r\n                    page = parseInt(page);\r\n                }\r\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\r\n                links[name] = page;\r\n            });\r\n\r\n            return links;\r\n        };\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('compile', ['$compile', function ($compile) {\r\n            return function (scope, element, attrs) {\r\n                scope.$watch(\r\n                    function (scope) {\r\n                        // watch the 'compile' expression for changes\r\n                        return scope.$eval(attrs.compile);\r\n                    },\r\n                    function (value) {\r\n                        // when the 'compile' expression changes\r\n                        // assign it into the current DOM\r\n                        element.html(value);\r\n\r\n                        // compile the new DOM and link it to the current\r\n                        // scope.\r\n                        // NOTE: we only compile .childNodes so that\r\n                        // we don't get into infinite loop compiling ourselves\r\n                        $compile(element.contents())(scope);\r\n                    }\r\n                );\r\n            };\r\n        }])\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Añade un checkbox para mostrar/ocultar los usuarios eliminados.\r\n     */\r\n    angular\r\n        .module('app')\r\n        .component('usuarioGestionEliminados', {\r\n            bindings: {\r\n                filter: '<'\r\n            },\r\n            templateUrl: 'app/components/usuariogestion/usuario-gestion-eliminados.html',\r\n            controllerAs: 'ctrl',\r\n            /* @ngInject */\r\n            controller: function () {\r\n                var vm = this;\r\n\r\n                vm.onChangeEliminados = function () {\r\n                    if (vm.eliminados) {\r\n                        vm.filter.activos = null;\r\n                    } else {\r\n                        vm.filter.activos = true;\r\n                    }\r\n                };\r\n\r\n            }\r\n        });\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Añade los botones de editar, desactivar/activar y baja.\r\n     */\r\n    angular\r\n        .module('app')\r\n        .component('usuarioGestionColumna', {\r\n            bindings: {\r\n                tableParams: '<',\r\n                element: '<',\r\n                entidad: '@'\r\n            },\r\n            templateUrl: 'app/components/usuariogestion/usuario-gestion-columna.html',\r\n            controllerAs: 'ctrl',\r\n            /* @ngInject */\r\n            controller: function (ModalService) {\r\n                var vm = this;\r\n\r\n                // Desactivar, eliminar y recuperar\r\n\r\n                vm.showDesactivarConfirmation = function (usuario) {\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                        controller: 'ConfirmModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            item: function () {\r\n                                return usuario;\r\n                            },\r\n                            params: function () {\r\n                                var mensaje = 'admin.list-users.desactivar.confirm';\r\n                                if (usuario.rol === 'ROLE_EMPRESA') {\r\n                                    mensaje = 'admin.list-users.desactivar.confirmempresa';\r\n                                }\r\n                                return {\r\n                                    title: 'admin.list-users.desactivar.title',\r\n                                    body: mensaje,\r\n                                    property: 'email'\r\n                                };\r\n                            },\r\n                            /* @ngInject */\r\n                            tipo: function (User) {\r\n                                return User;\r\n                            },\r\n                            funcion: function () {\r\n                                return \"remove\";\r\n                            },\r\n                            parametros: function () {\r\n                                return {id: usuario.id};\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        vm.tableParams.reload();\r\n                    });\r\n                };\r\n\r\n                vm.showBajaConfirmation = function (usuario) {\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                        controller: 'ConfirmModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            item: function () {\r\n                                return usuario;\r\n                            },\r\n                            params: function () {\r\n                                var mensaje = 'admin.list-users.delete.confirm';\r\n                                if (usuario.rol === 'ROLE_EMPRESA') {\r\n                                    mensaje = 'admin.list-users.delete.confirmempresa';\r\n                                }\r\n                                return {\r\n                                    title: 'admin.list-users.delete.title',\r\n                                    body: mensaje,\r\n                                    property: 'email'\r\n                                };\r\n                            },\r\n                            /* @ngInject */\r\n                            tipo: function (User) {\r\n                                return User;\r\n                            },\r\n                            funcion: function () {\r\n                                return \"baja\";\r\n                            },\r\n                            parametros: function () {\r\n                                return {email: usuario.email};\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        vm.tableParams.reload();\r\n                    });\r\n                };\r\n\r\n                vm.showRestaurarConfirmation = function (usuario) {\r\n                    ModalService.open({\r\n                        templateUrl: 'app/components/form/confirm/confirm.modal.html',\r\n                        controller: 'ConfirmModalController',\r\n                        controllerAs: 'ctrl',\r\n                        resolve: {\r\n                            item: function () {\r\n                                return usuario;\r\n                            },\r\n                            params: function () {\r\n                                return {\r\n                                    title: 'admin.list-users.restaurar.title',\r\n                                    body: 'admin.list-users.restaurar.confirm',\r\n                                    property: 'email'\r\n                                };\r\n                            },\r\n                            /* @ngInject */\r\n                            tipo: function (User) {\r\n                                return User;\r\n                            },\r\n                            funcion: function () {\r\n                                return \"restaurar\";\r\n                            },\r\n                            parametros: function () {\r\n                                return {id: usuario.id};\r\n                            }\r\n                        }\r\n                    }).result.then(function () {\r\n                        vm.tableParams.reload();\r\n                    });\r\n                };\r\n\r\n            }\r\n        });\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app').config(config);\r\n\r\n    config.$inject = ['$stateProvider'];\r\n\r\n    function config($stateProvider) {\r\n        $stateProvider.state('static', {\r\n            parent: 'site',\r\n            url: '/estatica/:id',\r\n            params: {\r\n                language: ['Language',\r\n                    function (Language) {\r\n                        return Language.getCurrent();\r\n                    }\r\n                ]\r\n            },\r\n            data: {\r\n                authorities: []\r\n            },\r\n            // FIXME: Se puede comprobar si existe la página? En caso de que no exista, apuntar a una que sí. Si no, la página se queda en blanco sin dar error.\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: function (params) {\r\n                        return 'statics/' + params.id + '/' + params.id + '.' + params.language + '.html';\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .service('StaticModal', StaticModal);\r\n\r\n    // Mejora: Se podría refactorizar haciendo que la plantilla fuese el header y footer del modal y el contenido un include de la página en concreto.\r\n\r\n    /* @ngInject */\r\n    function StaticModal(ModalService, Language) {\r\n        return {\r\n            open: open\r\n        };\r\n\r\n        /**\r\n         * @param id nombre del archivo\r\n         */\r\n        function open(id) {\r\n            ModalService.open({\r\n                    templateUrl: function () {\r\n                        return 'statics/' + id + '/' + id + '.' + Language.getCurrent() + '.html';\r\n                    },\r\n                    controller: 'StaticModalController',\r\n                    controllerAs: 'ctrl',\r\n                    resolve: {\r\n                        title: function () {\r\n                            return 'static.' + id + \".title\"\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('StaticModalController', StaticModalController);\r\n\r\n    /* @ngInject */\r\n    function StaticModalController(ModalService, title) {\r\n        var vm = this;\r\n\r\n        vm.title = title;\r\n\r\n        vm.close = function () {\r\n            ModalService.dismiss();\r\n        };\r\n\r\n    }\r\n})\r\n(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    // id: Identificador de la página estática. (Nombre del archivo o identificador de BD).\r\n    // carpeta: Ruta a la página en caso de que haya alguna carpeta intermedia.\r\n    // bd: Boolean. Si se obtiene de BD, se carga el archivo static.html y se muestra el contenido.\r\n\r\n    // FIXME: Recargar página estática cuando se cambia de idioma.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('static', {\r\n            bindings: {\r\n                id: '@', // required\r\n                carpeta: '@',\r\n                bd: '<'\r\n            },\r\n            /* @ngInject */\r\n            templateUrl: function ($element, $attrs, Language) {\r\n                if ($attrs.bd === \"true\") {\r\n                    return 'app/components/statics/static.html';\r\n                } else {\r\n                    var carpeta = \"\";\r\n                    if ($attrs.carpeta) {\r\n                        carpeta = $attrs.carpeta + \"/\";\r\n                    }\r\n                    return 'statics/' + carpeta + $attrs.id + '/' + $attrs.id + '.' + Language.getCurrent() + '.html';\r\n                }\r\n            },\r\n            /* @ngInject */\r\n            controller: function (Estatica, Language, $attrs) {\r\n                var vm = this;\r\n                Estatica.getByNombreIdioma({\r\n                    'nombre': $attrs.id,\r\n                    'idioma': Language.getCurrent()\r\n                }).$promise.then(function (data) {\r\n                    vm.estaticai18n = data;\r\n                });\r\n            },\r\n            controllerAs: 'ctrl'\r\n        });\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('social', social);\r\n\r\n    /* @ngInject */\r\n    function social($filter, SocialService) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            scope: {\r\n                provider: '@',\r\n                mini: '@'\r\n            },\r\n            templateUrl: 'app/components/social/social.html',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope) {\r\n            scope.label = $filter('capitalize')(scope.provider);\r\n            scope.providerSetting = SocialService.getProviderSetting(scope.provider);\r\n            scope.providerURL = SocialService.getProviderURL(scope.provider);\r\n            scope.csrf = SocialService.getCSRF();\r\n        }\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('hasNoAuthority', hasNoAuthority);\r\n\r\n    function hasNoAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            var authority = attrs.hasNoAuthority.replace(/\\s+/g, '');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    Principal.hasAuthority(authority)\r\n                        .then(function (result) {\r\n                            console.log(\"Result: \" + result);\r\n                            if (result) {\r\n                                setHidden();\r\n                            } else {\r\n                                setVisible();\r\n                            }\r\n                        });\r\n                };\r\n\r\n            if (authority.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function () {\r\n                    return Principal.isAuthenticated();\r\n                }, function () {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('hasAuthority', hasAuthority);\r\n\r\n    function hasAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    Principal.hasAuthority(authority)\r\n                        .then(function (result) {\r\n                            if (result) {\r\n                                setVisible();\r\n                            } else {\r\n                                setHidden();\r\n                            }\r\n                        });\r\n                };\r\n\r\n            if (authority.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function () {\r\n                    return Principal.isAuthenticated();\r\n                }, function () {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('hasAnyAuthority', hasAnyAuthority);\r\n\r\n    function hasAnyAuthority(Principal) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element, attrs) {\r\n            if (attrs.hasAnyAuthority === \"\") {\r\n                return;\r\n            }\r\n\r\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\r\n\r\n            var setVisible = function () {\r\n                    element.removeClass('hidden');\r\n                },\r\n                setHidden = function () {\r\n                    element.addClass('hidden');\r\n                },\r\n                defineVisibility = function (reset) {\r\n                    var result;\r\n                    if (reset) {\r\n                        setVisible();\r\n                    }\r\n\r\n                    result = Principal.hasAnyAuthority(authorities);\r\n                    if (result) {\r\n                        setVisible();\r\n                    } else {\r\n                        setHidden();\r\n                    }\r\n                };\r\n\r\n            if (authorities.length > 0) {\r\n                defineVisibility(true);\r\n\r\n                scope.$watch(function () {\r\n                    return Principal.isAuthenticated();\r\n                }, function () {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('hasAnyAuthorityOrState', hasAnyAuthorityOrState);\r\n\r\n    function hasAnyAuthorityOrState(Principal, $state) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            link: linkFunc,\r\n            replace: false,\r\n            scope: {\r\n                authorities: \"=\",\r\n                states: \"=\"\r\n            }\r\n        };\r\n        return directive;\r\n\r\n        function linkFunc(scope, element) {\r\n\r\n            var setVisible = function () {\r\n                element.removeClass('hidden');\r\n            };\r\n            var setHidden = function () {\r\n                element.addClass('hidden');\r\n            };\r\n\r\n            var defineVisibility = function (reset) {\r\n                var result = true;\r\n\r\n                if (reset) {\r\n                    setVisible();\r\n                }\r\n\r\n                if (scope.authorities) {\r\n                    var authorities = scope.authorities.replace(/\\s+/g, '').split(',');\r\n                    result = result && Principal.hasAnyAuthority(authorities);\r\n\r\n                }\r\n                if (scope.states) {\r\n                    var states = scope.states.replace(/\\s+/g, '').split(',');\r\n                    var results = states.filter(function (state) {\r\n                        return $state.includes(state);\r\n                    });\r\n                    result = result && results.length;\r\n                }\r\n\r\n                if (result) {\r\n                    setVisible();\r\n                } else {\r\n                    setHidden();\r\n                }\r\n            };\r\n\r\n            if (scope.authorities) {\r\n                scope.$watch(function () {\r\n                    return Principal.isAuthenticated();\r\n                }, function () {\r\n                    defineVisibility(true);\r\n                });\r\n            }\r\n\r\n            if (scope.states) {\r\n                scope.$on('$stateChangeSuccess',\r\n                    function () {\r\n                        defineVisibility(true);\r\n                    }\r\n                );\r\n            }\r\n\r\n            if (scope.authorities || scope.states) {\r\n                defineVisibility(true);\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Todos los elementos del resolve son necesarios.\r\n\r\n    angular.module('app')\r\n        .controller('ReservaModalController', Controller);\r\n\r\n    /* @ngInject */\r\n    function Controller(item, parametros, ModalService, Reserva, usuarioModal, configuracion) {\r\n        var vm = this;\r\n\r\n        vm.dismiss = ModalService.dismiss;\r\n        vm.item = item;\r\n        vm.parametros = parametros;\r\n        vm.usuarioModal = usuarioModal;\r\n        vm.configuracion = configuracion;\r\n        vm.ahora = new Date();\r\n\r\n        vm.comienzoMenosHoras = angular.copy(vm.item.start.toDate());\r\n        vm.comienzoMenosHoras.setHours(vm.comienzoMenosHoras.getHours() - vm.configuracion.tiempoAntesInicioCancelar);\r\n\r\n        // Tipos de ventanas\r\n        vm.tipos = {\r\n            SIN_CONTESTAR: 1,\r\n            CANCELAR_PROFESOR: 2,\r\n            CANCELAR_ALUMNO: 3,\r\n            RESPONDER_PROFESOR: 4,\r\n            RESPONDER_ALUMNO: 5,\r\n            RESPONDER_ALUMNO_PENDIENTE: 6\r\n        };\r\n        vm.tipo = null;\r\n\r\n        if (vm.parametros.rolbd === 'ROLE_PROFESOR'\r\n            && vm.parametros.estadobd === 'SIN_CONTESTAR' && vm.item.start.toDate() > vm.ahora) {\r\n            vm.tipo = vm.tipos.SIN_CONTESTAR;\r\n        } else if (vm.parametros.rolbd === 'ROLE_PROFESOR'\r\n            && vm.parametros.estadobd === 'CONFIRMADA' && vm.comienzoMenosHoras > vm.ahora) {\r\n            vm.tipo = vm.tipos.CANCELAR_PROFESOR;\r\n        } else if (vm.parametros.rolbd === 'ROLE_ALUMNO'\r\n            && (vm.parametros.estadobd === 'SIN_CONTESTAR' || vm.parametros.estadobd === 'CONFIRMADA') && vm.comienzoMenosHoras > vm.ahora) {\r\n            vm.tipo = vm.tipos.CANCELAR_ALUMNO;\r\n        } else if (vm.parametros.rolbd === 'ROLE_PROFESOR'\r\n            && vm.parametros.estadobd === 'PENDIENTE') {\r\n            vm.tipo = vm.tipos.RESPONDER_PROFESOR;\r\n        } else if (vm.parametros.rolbd === 'ROLE_ALUMNO'\r\n            && (vm.parametros.estadobd === 'REALIZADA' || vm.parametros.estadobd === 'INCIDENCIA')) {\r\n            vm.tipo = vm.tipos.RESPONDER_ALUMNO;\r\n        } else if (vm.parametros.rolbd === 'ROLE_ALUMNO'\r\n            && vm.parametros.estadobd === 'PENDIENTE') {\r\n            vm.tipo = vm.tipos.RESPONDER_ALUMNO_PENDIENTE;\r\n        }\r\n\r\n        vm.mostrarFooter = (vm.parametros.estadobd !== 'RECHAZADA' && vm.parametros.estadobd !== 'CANCELADA_POR_ALUMNO'\r\n            && vm.parametros.estadobd !== 'CANCELADA_POR_PROFESOR' && vm.parametros.estadobd !== 'NO_CONTESTADA'\r\n            && vm.tipo !== vm.tipos.RESPONDER_ALUMNO_PENDIENTE);\r\n\r\n        vm.confirm = function () {\r\n            if (vm.parametros.rolbd === 'ROLE_ALUMNO' && vm.parametros.estado == null) {\r\n                Reserva.save({\r\n                    alumnoId: vm.parametros.alumnoId,\r\n                    profesorId: vm.usuarioModal.id,\r\n                    claseLibreId: vm.parametros.id\r\n                }).$promise.then(function () {\r\n                    ModalService.close(vm.item);\r\n                });\r\n            } else {\r\n                vm.parametros.fecha = vm.parametros.fechaPrimeraClase;\r\n                Reserva.update(vm.parametros).$promise.then(function () {\r\n                    ModalService.close(vm.item);\r\n                });\r\n            }\r\n        };\r\n\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    // Componente para la paginación. Se modifica el parámetro :page del estado.\r\n    // El nº de elementos por página va en una constante.\r\n\r\n    // currentPage: Página activa.\r\n    // totalElements: Número de elementos totales.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('pagination', {\r\n            bindings: {\r\n                currentPage: \"<\",\r\n                totalElements: \"<\"\r\n            },\r\n            templateUrl: 'app/components/pagination/pagination.html',\r\n            /* @ngInject */\r\n            controller: function ($state, NG_LIST_DEFAULT_PARAMS_PUBLIC) {\r\n                var vm = this;\r\n\r\n                vm.itemsPerPage = NG_LIST_DEFAULT_PARAMS_PUBLIC.size;\r\n\r\n                vm.pageChanged = function () {\r\n                    var params = angular.copy($state.params);\r\n                    params.page = vm.currentPage;\r\n                    $state.go($state.current, params);\r\n                };\r\n\r\n            },\r\n            controllerAs: 'ctrl'\r\n        });\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('NgTableHelper', NgTableHelper);\r\n\r\n    /* @ngInject */\r\n    function NgTableHelper($state) {\r\n        return {\r\n            settings: settings\r\n        };\r\n\r\n        function settings(vm) {\r\n            var firstLoad = true;\r\n\r\n            if (!vm.function) {\r\n                vm.function = \"findAll\";\r\n            }\r\n\r\n            return {\r\n                defaultSort: 'asc',\r\n                counts: [],\r\n                getData: function (params) {\r\n                    if (firstLoad || vm.reload) {\r\n                        vm.loading = true;\r\n                    }\r\n                    firstLoad = false;\r\n\r\n                    var sortProperty = null;\r\n                    var sortDir = null;\r\n                    if (params.orderBy()[0]) {\r\n                        sortProperty = params.orderBy()[0].replace(\"-\", \"\").replace(\"+\", \"\");\r\n                        sortDir = params.sorting()[sortProperty].toUpperCase();\r\n                    }\r\n\r\n                    var request = {\r\n                        size: vm.elementosPorPagina,\r\n                        page: params.page() - 1,\r\n                        sortProperty: sortProperty,\r\n                        sortDirection: sortDir,\r\n                        genericFilter: vm.filter.key\r\n                    };\r\n\r\n                    angular.extend(request, vm.filter);\r\n\r\n                    // Modificamos la URL con el nuevo número de página\r\n                    $state.go('.', {page: params.page()}, {notify: false});\r\n\r\n                    return vm.item[vm.function](request).$promise.then(function (data) {\r\n                        vm.loading = false;\r\n                        if (Array.isArray(data)) {\r\n                            params.total(data.length);\r\n                            params.count(data.length);\r\n                            vm.empty = !data || data.length == 0;\r\n                            return data;\r\n                        } else {\r\n                            params.total(data.totalElements);\r\n                            vm.empty = !data.content || data.content.length == 0;\r\n                            return data.content;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    // Gestión de ventanas modales.\r\n    // Permite tener varias abiertas e ir cerrándolas por orden inverso de apertura.\r\n\r\n    angular.module('app')\r\n        .service('ModalService', ModalService);\r\n\r\n    /* @ngInject */\r\n    function ModalService($state, $uibModal, AlertService) {\r\n        var opened = 0;\r\n        var modals = [];\r\n\r\n        return {\r\n            isOpen: function () {\r\n                return opened;\r\n            },\r\n            open: open,\r\n            openComponent: openComponent,\r\n            closeComponent: closeComponent,\r\n            close: close,\r\n            dismiss: dismiss\r\n        };\r\n\r\n        function open(params) {\r\n            opened = opened + 1;\r\n            var modal = $uibModal.open(params);\r\n            modals.push(modal);\r\n\r\n            // En caso de que se pulse fuera de la modal, hacemos un dismiss\r\n            modal.result.catch(function (data) {\r\n                if (data === 'backdrop click') {\r\n                    dismiss(data);\r\n                }\r\n            });\r\n\r\n            AlertService.clear();\r\n            return modal;\r\n        }\r\n\r\n        /**\r\n         * Abrir componente en una ventana modal.\r\n         * @param title Título de la ventana modal.\r\n         * @param configEntity Constante de donde se obtendrá el component y el resolve. (Ej: AGENTE_FORM_ADMIN)\r\n         * @param params Parámetros adicionales (Ej: {size: 'lg'})\r\n         */\r\n        function openComponent(title, configEntity, params) {\r\n            if (!params) params = {};\r\n\r\n            var config = configEntity(true);\r\n            params.resolve = config.resolve;\r\n            params.resolve.component = function () {\r\n                return config.component;\r\n            };\r\n\r\n            angular.merge(params, {\r\n                backdrop: 'static',\r\n                component: 'entityModal',\r\n                resolve: {\r\n                    title: function () {\r\n                        return title;\r\n                    }\r\n                }\r\n            });\r\n            return open(params);\r\n        }\r\n\r\n        // Submit del componente. Se cierra la ventana modal o se cambia de estado.\r\n        function closeComponent(result, state, params) {\r\n            if (opened) {\r\n                AlertService.clear();\r\n                close(result);\r\n            } else {\r\n                $state.go(state, params);\r\n            }\r\n        }\r\n\r\n        function close(data) {\r\n            subOpened();\r\n            modals[modals.length - 1].close(data);\r\n            modals.pop();\r\n        }\r\n\r\n        function dismiss(data) {\r\n            subOpened();\r\n            modals[modals.length - 1].dismiss(data);\r\n            modals.pop();\r\n        }\r\n\r\n        function subOpened() {\r\n            opened = opened - 1;\r\n            if (opened < 0) {\r\n                opened = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Este componente permite establecer una estructura básica para abrir un formulario o cualquier otro componente dentro de una ventana modal.\r\n\r\n    // resolve.component: String que se convertirá en el componente (Ej: <pais-form-admin item=\\'ctrl.resolve.item\\'></pais-form-admin>)\r\n    // resolve: Información que tiene que recibir el componente. En el componente se accederá a través de ctrl.resolve.\r\n    // resolve.title: Título de la ventana modal\r\n\r\n    // Ejemplo de uso: ciudad-form.admin.component.js\r\n\r\n    angular\r\n        .module('app')\r\n        .component('entityModal', {\r\n            templateUrl: 'app/components/modal/entity.modal.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                resolve: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller(ModalService) {\r\n        var vm = this;\r\n\r\n        vm.dismiss = function () {\r\n            ModalService.dismiss();\r\n        }\r\n    }\r\n\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('submenu', submenuDirective);\r\n\r\n    submenuDirective.$inject = [];\r\n\r\n    function submenuDirective() {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                menu: '='\r\n            },\r\n            templateUrl: 'app/components/menu/submenu.html'\r\n        };\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('Menu', Menu);\r\n\r\n    Menu.$inject = ['$q', '$http'];\r\n\r\n    function Menu($q, $http) {\r\n        return {\r\n            getMenu: getMenu\r\n        };\r\n\r\n        function getMenu(position) {\r\n            var deferred = $q.defer();\r\n            $http.get('menu/' + position + '.json').then(function (response) {\r\n                deferred.resolve(response.data);\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Requires directives:\r\n     *   * has-any-authority-or-state\r\n     *   * uib-dropdown-toggle\r\n     */\r\n    angular\r\n        .module('app')\r\n        .component('miMenu', {\r\n            bindings: {\r\n                menu: '<',\r\n                navCollapsed: '<',\r\n                modal: '&',\r\n                lateral: '<'\r\n            },\r\n            templateUrl: 'app/components/menu/menu.html',\r\n            /* @ngInject */\r\n            controller: function ($window, $state, StaticModal) {\r\n                var vm = this;\r\n\r\n                vm.checkActiveStates = function (activeStates) {\r\n                    var active = false;\r\n                    if (activeStates) {\r\n                        var states = activeStates.replace(/\\s+/g, '').split(',');\r\n                        states.forEach(function (state) {\r\n                            if ($state.includes(state)) {\r\n                                active = true;\r\n                            }\r\n                        });\r\n                    }\r\n                    return active;\r\n                };\r\n\r\n                vm.modal = function (id) {\r\n                    StaticModal.open(id);\r\n                };\r\n\r\n                vm.collapse = function () {\r\n                    if ($window.innerWidth < 768) {\r\n                        vm.navCollapsed = !vm.navCollapsed;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})(angular);\r\n","/**\r\n * Based on:\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2015 Eugenio Lentini\r\n * https://github.com/blackat/ui-navbar\r\n */\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('menuItem', menuItemDirective);\r\n\r\n    menuItemDirective.$inject = ['$compile'];\r\n\r\n    function menuItemDirective($compile) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            templateUrl: 'app/components/menu/menu-item.html',\r\n            link: function (scope, element, attrs) {\r\n                if (angular.isArray(scope.leaf.subtree)) {\r\n                    element.append('<submenu menu=\"leaf.subtree\"></submenu>');\r\n\r\n                    // find the parent of the element\r\n                    var parent = element.parent();\r\n                    var classFound = false;\r\n\r\n                    // check if in the hierarchy of the element exists a dropdown with class navbar-right\r\n                    while (parent.length > 0 && !classFound) {\r\n                        // check if the dropdown has been push to right\r\n                        if (parent.hasClass('navbar-right')) {\r\n                            classFound = true;\r\n                        }\r\n                        parent = parent.parent();\r\n                    }\r\n\r\n                    // add a different class according to the position of the dropdown\r\n                    if (classFound) {\r\n                        element.addClass('dropdown-submenu-right');\r\n                    } else {\r\n                        element.addClass('dropdown-submenu');\r\n                    }\r\n\r\n                    $compile(element.contents())(scope);\r\n                }\r\n            },\r\n            scope: {\r\n                leaf: '='\r\n            }\r\n        };\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Campos:\r\n    // isLoading: Campo para saber si está oculto o no.\r\n    // class: Clase a mayores de la de por defecto.\r\n    // img: Ruta al icono de carga. Por defecto loading.svg\r\n\r\n    var loading = {\r\n        template: '<img ng-show=\"$ctrl.isLoading\" ' +\r\n        'ng-src=\"{{$ctrl.img || \\'assets/images/loading.svg\\'}}\" ' +\r\n        'class=\"loading {{$ctrl.class}}\"/>',\r\n        bindings: {\r\n            isLoading: '<',\r\n            class: '@',\r\n            img: '@'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('loading', loading);\r\n\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    // Componente para la selección del idioma de la aplicación (Español e inglés).\r\n    // Métodos relacionados: app.module.js y app.config.js\r\n\r\n    // TODO: Mejorar haciendo que obtenga los idiomas de un enumerado del servidor.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('idiomas', {\r\n            templateUrl: 'app/components/idiomas/idiomas.html',\r\n            /* @ngInject */\r\n            controller: function ($rootScope, $localStorage) {\r\n                var vm = this;\r\n\r\n                vm.changeLanguage = function (lang) {\r\n                    if (lang) {\r\n                        $rootScope.changeLanguage(lang);\r\n                    }\r\n                    vm.lang = $localStorage.lang;\r\n                };\r\n\r\n                vm.changeLanguage();\r\n\r\n            },\r\n            controllerAs: 'ctrl'\r\n        });\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .directive('showValidation', showValidation);\r\n\r\n    function showValidation() {\r\n        var directive = {\r\n            require: 'form',\r\n            restrict: 'A',\r\n            link: linkFunc\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFunc(scope, element) {\r\n            element.find('.form-group').each(function () {\r\n                var $formGroup = angular.element(this);\r\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\r\n\r\n                if ($inputs.length > 0) {\r\n                    $inputs.each(function () {\r\n                        var $input = angular.element(this);\r\n                        scope.$watch(function () {\r\n                            return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');\r\n                        }, function (isInvalid) {\r\n                            $formGroup.toggleClass('has-error', isInvalid);\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n","/* globals $ */\r\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .directive('radio', radio);\r\n\r\n    function radio() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                id: '@',\r\n                name: '@',\r\n                model: '=',\r\n                change: '=',\r\n                value: '=',\r\n                disabled: '=',\r\n                label: '@',\r\n                text: '='\r\n            },\r\n            template: '' +\r\n            '<label ng-click=\"disabled || (model=value)\" for=\"{{id}}\">' +\r\n            '<input type=\"radio\" id=\"{{id}}\" name=\"{{name}}\" ng-model=\"model\" ng-value=\"value\"' +\r\n            ' ng-checked=\"model==value\" ng-click=\"model=value\" ng-change=\"change(model)\" ng-disabled=\"disabled\"/>' +\r\n            '<span class=\"texto\" ng-if=\"label\">{{label | translate}}</span>' +\r\n            '<span class=\"texto\" ng-if=\"text\" ng-bind-html=\"text\"></span>' +\r\n            '</label>',\r\n\r\n            compile: function (tElt) {\r\n                // tElt.addClass('sm-radio');\r\n            }\r\n        };\r\n    }\r\n\r\n})();\r\n","/**\r\n * Filters out all duplicate items from an array by checking the specified key\r\n * @param [key] {string} the name of the attribute of each object to compare for uniqueness\r\n if the key is empty, the entire object will be compared\r\n if the key === false then no filtering will be performed\r\n * @return {array}\r\n */\r\n// Acepta dos niveles de filtrado. Ejemplo en fuentes.form.modal.html\r\nangular.module('app').filter('unique', function () {\r\n\r\n    return function (items, filterOn, filterOnSecondLevel) {\r\n\r\n        if (filterOn === false) {\r\n            return items;\r\n        }\r\n\r\n        if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {\r\n            var hashCheck = {}, newItems = [];\r\n\r\n            var extractValueToCompare = function (item) {\r\n                if (angular.isObject(item) && angular.isString(filterOn)) {\r\n                    if (filterOnSecondLevel && angular.isString(filterOnSecondLevel)) {\r\n                        if (item[filterOn]) {\r\n                            return item[filterOn][filterOnSecondLevel];\r\n                        } else {\r\n                            return item[filterOn];\r\n                        }\r\n                        // FIXME: Creo que está añadiendo los elementos vacíos también\r\n                    } else {\r\n                        return item[filterOn];\r\n                    }\r\n                } else {\r\n                    return item;\r\n                }\r\n            };\r\n\r\n            angular.forEach(items, function (item) {\r\n                var valueToCheck, isDuplicate = false;\r\n\r\n                for (var i = 0; i < newItems.length; i++) {\r\n                    if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {\r\n                        isDuplicate = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isDuplicate) {\r\n                    newItems.push(item);\r\n                }\r\n\r\n            });\r\n            items = newItems;\r\n        }\r\n        return items;\r\n    };\r\n});\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    // String to Int\r\n    angular.module('app').filter('num', function () {\r\n        return function (input) {\r\n            return parseInt(input, 10);\r\n        }\r\n    });\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Filtro para convertir minutos a: Xh Ym\r\n\r\n    // Podría ser interesante utilizar Moment para que sea más genérico... https://github.com/jsmreese/moment-duration-format\r\n\r\n    angular\r\n        .module('app')\r\n        .filter('minutos', minutos);\r\n\r\n    function minutos() {\r\n        return calcular;\r\n\r\n        function calcular(time) {\r\n            time = Math.floor(time);\r\n            if (time < 60) {\r\n                return (time) + 'm';\r\n            } else if (time % 60 == 0) {\r\n                return (time - time % 60) / 60 + 'h';\r\n            } else {\r\n                return ((time - time % 60) / 60 + 'h' + ' ' + time % 60 + 'm');\r\n            }\r\n        }\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .filter('capitalize', capitalize);\r\n\r\n    function capitalize() {\r\n        return capitalizeFilter;\r\n\r\n        function capitalizeFilter(input) {\r\n            if (input && input !== null) {\r\n                input = input.toLowerCase();\r\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\r\n            }\r\n            return input;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    //\r\n\r\n    var date = {\r\n        template: '{{ctrl.result | date:ctrl.format}}',\r\n        bindings: {\r\n            model: '<', // required\r\n            format: '@',\r\n            fecha: '<',\r\n            hora: '<'\r\n        },\r\n        /* @ngInject */\r\n        controller: function ($scope) {\r\n            var vm = this;\r\n            if (!vm.format) {\r\n                if (vm.fecha) {\r\n                    vm.format = 'dd/MM/yyyy';\r\n                } else {\r\n                    if (vm.hora) {\r\n                        vm.format = 'HH:mm';\r\n                    } else {\r\n                        vm.format = 'dd/MM/yyyy, HH:mm';\r\n                    }\r\n                }\r\n            }\r\n\r\n            function init() {\r\n                // Si recibimos la fecha del servidor, convertimos segundos a milisegundos\r\n                if (angular.isNumber(vm.model)) {\r\n                    vm.result = vm.model * 1000;\r\n                }\r\n            }\r\n\r\n            $scope.$watch(function () {\r\n                return vm.model;\r\n            }, function () {\r\n                init();\r\n            });\r\n        },\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('date', date);\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var buttonTop = {\r\n        template: '<button id=\"button-top\" ng-click=\"ctrl.topFunction()\"><span class=\"glyphicon glyphicon-arrow-up\"></span></button>',\r\n        bindings: {\r\n            mote: '@'\r\n        },\r\n        controller: Controller,\r\n        controllerAs: 'ctrl'\r\n    };\r\n\r\n    /* @ngInject */\r\n    function Controller($window) {\r\n        var vm = this;\r\n\r\n        // Botón ir arriba\r\n        $window.onscroll = function () {\r\n            scrollFunction();\r\n        };\r\n\r\n        function scrollFunction() {\r\n            if (document.getElementById(\"button-top\") != undefined) {\r\n                if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {\r\n                    document.getElementById(\"button-top\").style.display = \"block\";\r\n                } else {\r\n                    document.getElementById(\"button-top\").style.display = \"none\";\r\n                }\r\n            }\r\n        }\r\n\r\n        vm.topFunction = function () {\r\n            $(\"html, body\").animate({scrollTop: \"0px\"}, 1000);\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module('app')\r\n        .component('buttonTop', buttonTop);\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // value: Valor booleano (true/false -> Sí/No).\r\n\r\n    var booleano = {\r\n        template: '{{\"enum.boolean.\" + ctrl.value | translate}}',\r\n        controllerAs: 'ctrl',\r\n        bindings: {\r\n            value: '@'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('booleano', booleano);\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .provider('AlertService', AlertService);\r\n\r\n    function AlertService() {\r\n        this.toast = false;\r\n        /*jshint validthis: true */\r\n        this.$get = getService;\r\n\r\n        this.showAsToast = function (isToast) {\r\n            this.toast = isToast;\r\n        };\r\n\r\n        getService.$inject = ['$timeout', '$sce', '$translate'];\r\n\r\n        function getService($timeout, $sce, $translate) {\r\n            var toast = this.toast,\r\n                alertId = 0, // unique id for each alert. Starts from 0.\r\n                alerts = [],\r\n                timeout = 5000; // default timeout\r\n\r\n            return {\r\n                factory: factory,\r\n                isToast: isToast,\r\n                add: addAlert,\r\n                closeAlert: closeAlert,\r\n                closeAlertByIndex: closeAlertByIndex,\r\n                clear: clear,\r\n                clearPermanent: clearPermanent,\r\n                get: get,\r\n                success: success,\r\n                error: error,\r\n                info: info,\r\n                warning: warning\r\n            };\r\n\r\n            function isToast() {\r\n                return toast;\r\n            }\r\n\r\n            function getTimeout(time) {\r\n                if (time == null) return timeout;\r\n                return time;\r\n            }\r\n\r\n            function clear() {\r\n                alerts.splice(0, alerts.length);\r\n            }\r\n\r\n            function clearPermanent() {\r\n                // Ocultamos alertas permanentes y las de error también\r\n                alerts.forEach(function (alert, index) {\r\n                    if (alert.timeout == 0) {\r\n                        alerts.splice(index, 1);\r\n                    }\r\n                    if (alert.type === 'danger') {\r\n                        alerts.splice(index, 1);\r\n                    }\r\n                });\r\n            }\r\n\r\n            function get() {\r\n                return alerts;\r\n            }\r\n\r\n            /**\r\n             * Añadir un nuevo mensaje de éxito. La documentación es igual para el resto de tipos de alert.\r\n             *\r\n             * @param msg Clave del mensaje.\r\n             * @param params Objeto json con las propiedades que se incluirán en el mensaje. Ej: {id: 16}.\r\n             * En el mensaje tendrá que ir {{id}} donde se quiera hacer la sustitución.\r\n             * @param time Tiempo que se mostrará el mensaje. Por defecto 5 segundos. Si se pone 0, el mensaje será permanente.\r\n             * @param position Posición del mensaje. Sólo funciona cuando está en modo toast.\r\n             */\r\n            function success(msg, params, time, position) {\r\n                return this.add({\r\n                    type: 'success',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: getTimeout(time),\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function error(msg, params, time, position) {\r\n                return this.add({\r\n                    type: 'danger',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: getTimeout(time),\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function warning(msg, params, time, position) {\r\n                return this.add({\r\n                    type: 'warning',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: getTimeout(time),\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function info(msg, params, time, position) {\r\n                return this.add({\r\n                    type: 'info',\r\n                    msg: msg,\r\n                    params: params,\r\n                    timeout: getTimeout(time),\r\n                    toast: toast,\r\n                    position: position\r\n                });\r\n            }\r\n\r\n            function factory(alertOptions) {\r\n                if (!alertOptions.params) {\r\n                    alertOptions.params = {};\r\n                }\r\n                var alert = {\r\n                    type: alertOptions.type,\r\n                    msg: $sce.trustAsHtml(alertOptions.msg),\r\n                    id: alertOptions.alertId,\r\n                    timeout: alertOptions.timeout,\r\n                    toast: alertOptions.params.toast ? alertOptions.params.toast : alertOptions.toast,\r\n                    position: alertOptions.params.position ? alertOptions.params.position : 'top right',\r\n                    scoped: alertOptions.scoped,\r\n                    close: function (alerts) {\r\n                        return closeAlert(this.id, alerts);\r\n                    }\r\n                };\r\n                if (!alert.scoped) {\r\n                    alerts.push(alert);\r\n                }\r\n                return alert;\r\n            }\r\n\r\n            function addAlert(alertOptions, extAlerts) {\r\n                alertOptions.alertId = alertId++;\r\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\r\n                var that = this;\r\n                var alert = this.factory(alertOptions);\r\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\r\n                    $timeout(function () {\r\n                        that.closeAlert(alertOptions.alertId, extAlerts);\r\n                    }, alertOptions.timeout);\r\n                }\r\n                return alert;\r\n            }\r\n\r\n            function closeAlert(id, extAlerts) {\r\n                var thisAlerts = extAlerts ? extAlerts : alerts;\r\n                return closeAlertByIndex(thisAlerts.map(function (e) {\r\n                    return e.id;\r\n                }).indexOf(id), thisAlerts);\r\n            }\r\n\r\n            function closeAlertByIndex(index, thisAlerts) {\r\n                return thisAlerts.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(alertServiceConfig);\r\n\r\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\r\n\r\n    function alertServiceConfig(AlertServiceProvider) {\r\n        // set below to true to make alerts look like toast\r\n        AlertServiceProvider.showAsToast(false);\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    var alert = {\r\n        template: '<div class=\"alerts\" ng-cloak=\"\" ng-show=\"!$ctrl.modalService() || ($ctrl.modal && $ctrl.modalService())\">' +\r\n        '<div ng-repeat=\"alert in $ctrl.alerts track by alert.id\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\r\n        '<div uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" ng-class=\"\\'alert-\\' + alert.type\" close=\"alert.close($ctrl.alerts)\">' +\r\n        '<span ng-bind-html=\"alert.msg\"></span></div>' +\r\n        '</div>' +\r\n        '</div>',\r\n        controller: alertController,\r\n        bindings: {\r\n            modal: '<'\r\n        }\r\n    };\r\n\r\n    angular\r\n        .module('app')\r\n        .component('alert', alert);\r\n\r\n    /* @ngInject */\r\n    function alertController($scope, AlertService, ModalService, $rootScope, $translate) {\r\n        var vm = this;\r\n\r\n        vm.alerts = AlertService.get();\r\n        vm.modalService = ModalService.isOpen;\r\n\r\n        function addErrorAlert(message, key, data) {\r\n            key = key && key !== null ? key : message;\r\n            vm.alerts.push(\r\n                AlertService.add(\r\n                    {\r\n                        type: 'danger',\r\n                        msg: key,\r\n                        params: data,\r\n                        timeout: 5000,\r\n                        toast: AlertService.isToast(),\r\n                        scoped: true\r\n                    },\r\n                    vm.alerts\r\n                )\r\n            );\r\n            // Si se produce un error se sube al principio de la página para ver el alert\r\n            angular.element(\"html, body\").animate({scrollTop: 0}, \"slow\");\r\n        }\r\n\r\n        var cleanHttpErrorListener = $rootScope.$on('app.httpError', function (event, httpResponse) {\r\n\r\n            if (!!vm.modalService() !== vm.modal) {\r\n                return;\r\n            }\r\n            var i;\r\n            event.stopPropagation();\r\n\r\n            switch (httpResponse.status) {\r\n                // connection refused, server not reachable\r\n                case 0:\r\n                    addErrorAlert('Server not reachable', 'error.servernotreachable');\r\n                    break;\r\n\r\n                case 400:\r\n                    var errorHeader = httpResponse.headers('X-app-error');\r\n                    var entityKey = httpResponse.headers('X-app-params');\r\n\r\n                    if (errorHeader) {\r\n                        var entityName = $translate.instant('global.menu.entities.' + entityKey);\r\n                        addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\r\n\r\n                    } else if (httpResponse.data && httpResponse.data.fieldErrors) {\r\n                        for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\r\n                            var fieldError = httpResponse.data.fieldErrors[i];\r\n                            // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\r\n                            var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\r\n                            var fieldName = $translate.instant('jhipsterJwtApp.' + fieldError.objectName + '.' + convertedField);\r\n                            addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\r\n                        }\r\n\r\n                    } else if (httpResponse.data && httpResponse.data.message) {\r\n                        if (httpResponse.data.errors) {\r\n                            // Estos errores nunca deberían llegar a mostrarse a no ser que se salten las restricciones del cliente\r\n                            if (httpResponse.data.errors[0].code === 'NotNull') {\r\n                                addErrorAlert(\"error.notnulls\", null, null);\r\n                            } else if (httpResponse.data.errors[0].code === 'Size') {\r\n                                addErrorAlert(\"error.size\", null, null);\r\n                            }\r\n                        } else {\r\n                            addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\r\n                        }\r\n                    }\r\n                    break;\r\n                case 401:\r\n                    break;\r\n\r\n                case 403:\r\n                    addErrorAlert('Access is denied', 'error.accessdenied.title');\r\n                    break;\r\n\r\n                case 404:\r\n                    addErrorAlert('Not found', 'error.notfound');\r\n                    break;\r\n\r\n                default:\r\n                    if (httpResponse.data && httpResponse.data.message) {\r\n                        if (httpResponse.data.error === 'Internal Server Error') {\r\n                            addErrorAlert('Internal server error', 'error.internalservererror');\r\n                        } else {\r\n                            addErrorAlert(httpResponse.data.message);\r\n                        }\r\n                    }\r\n            }\r\n        });\r\n\r\n        $scope.$on('$destroy', function () {\r\n            if (angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null) {\r\n                cleanHttpErrorListener();\r\n                vm.alerts = [];\r\n            }\r\n            vm.alerts = [];\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('contrasena', {\r\n            parent: 'admin',\r\n            url: '/admin/modificar-contrasena',\r\n            data: {\r\n                authorities: ['ROLE_ADMIN'],\r\n                pageTitle: 'admin.register.title'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    template: '<div class=\"row\"><div class=\"col-md-8 col-md-offset-2\">' +\r\n                    '<h1 translate=\"admin.changepassword.title\"></h1><change-password></change-password>' +\r\n                    '</div></div>'\r\n                }\r\n            },\r\n            ncyBreadcrumb: {\r\n                skip: true\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER) {\r\n        var base = \"admin/reserva\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.reserva.\",\r\n            templateList: '<reserva-list estados=\"$resolve.estados\"></reserva-list>',\r\n            parent: 'admin'\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            params: {\r\n                revisadas: null\r\n            },\r\n            resolve: {\r\n                /* @ngInject */\r\n                estados: function (EnumService) {\r\n                    return EnumService.get('estado');\r\n                }\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list);\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n//TODO: Mover a componentes\r\n    angular\r\n        .module('app')\r\n        .component('reservaList', {\r\n            templateUrl: 'app/admin/reserva/reserva-list.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                estados: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, Reserva, Principal, $state) {\r\n        var vm = this;\r\n\r\n        vm.item = Reserva;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.revisadas = $stateParams.revisadas;\r\n        vm.filter = {\r\n            key: undefined,\r\n            estado: undefined,\r\n            revisadas: $stateParams.revisadas\r\n        };\r\n        vm.function = 'filterByAdmin';\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {fecha: 'desc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Acciones\r\n\r\n        vm.devolver = function (id) {\r\n            Reserva.devolverCreditos({id: id}).$promise.then(function () {\r\n                $state.go('admin/reserva/list', {revisadas: false}, {reload: true});\r\n            });\r\n        };\r\n\r\n        vm.rechazar = function (id) {\r\n            Reserva.rechazarCreditos({id: id}).$promise.then(function () {\r\n                $state.go('admin/reserva/list', {revisadas: false}, {reload: true});\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, PROFESOR_FORM_ADMIN) {\r\n        var config = PROFESOR_FORM_ADMIN();\r\n        var base = \"admin/profesor\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.profesor.\",\r\n            templateList: '<profesor-list-admin></profesor-list-admin>',\r\n            templateForm: config.component\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, {resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (User, $stateParams) {\r\n                    return User.getById({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('profesorListAdmin', {\r\n            templateUrl: 'app/admin/profesor/profesor-list.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, User, DescargaUtil) {\r\n        var vm = this;\r\n\r\n        vm.item = User;\r\n        vm.function = 'findProfesoresAdmin';\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.filter = {\r\n            key: undefined,\r\n            rol: 'ROLE_PROFESOR',\r\n            activos: true\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {nombre: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Descarga\r\n\r\n        vm.profesoresExcel = function () {\r\n            DescargaUtil.descargar('api/admin/user/profesorExcel', {\r\n                    activos: vm.filter.activos,\r\n                    mes: vm.filter.mes,\r\n                    ano: vm.filter.ano\r\n                },\r\n                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8');\r\n        };\r\n\r\n        // Lista de años\r\n        vm.years = [];\r\n        for (var i = 2017; i <= (new Date()).getFullYear(); i++) {\r\n            vm.years.push(i);\r\n        }\r\n\r\n        // Lista de meses\r\n        vm.months = [];\r\n        for (var j = 1; j <= 12; j++) {\r\n            vm.months.push(j);\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('PROFESOR_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<profesor-form-admin' +\r\n                ' item=\"' + resolve + 'item\"' +\r\n                ' previous-params=\"' + resolve + 'previousParams\"' +\r\n                '\"></profesor-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (User) {\r\n                        return new User();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('profesorFormAdmin', {\r\n            templateUrl: 'app/admin/profesor/profesor-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, EnumService, Capacidad, Idioma, Pais, Nivel, Usuario, User, AlertService, ModalService, CAPACIDAD_FORM_ADMIN) {\r\n        var vm = this;\r\n\r\n        if (!vm.item.imagen) {\r\n            vm.item.imagen = {};\r\n        }\r\n        if (vm.item.foto) {\r\n            vm.item.imagen.path = vm.item.foto;\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        vm.openCapacidadModal = function () {\r\n            ModalService.openComponent('admin.capacidad.create.title', CAPACIDAD_FORM_ADMIN, {size: 'lg'}).result.then(function (result) {\r\n                // Añadimos el nuevo elemento al select\r\n                vm.capacidades.push(result);\r\n                // Asociamos el nuevo elemento a la entidad\r\n                vm.item.capacidades.push(result);\r\n            });\r\n        };\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            vm.item.type = \"profesor\";\r\n            if (vm.item.imagen) {\r\n                vm.item.foto = vm.item.imagen.path;\r\n            }\r\n            // FIXME: Apaño temporal para la edición de fechas...\r\n            if (angular.isNumber(vm.item.fechaNacimiento)) {\r\n                vm.item.fechaNacimiento = vm.item.fechaNacimiento / 1000;\r\n            }\r\n            if ((vm.item.contrasenaClaro) && (vm.item.contrasenaClaro !== vm.confirmPassword)) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                if (vm.item.id) {\r\n                    Usuario.edit(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/profesor/list');\r\n                    });\r\n                } else {\r\n                    Usuario.register(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/profesor/list');\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        Capacidad.findAll({sortProperty: 'nombre'}).$promise.then(function (data) {\r\n            vm.capacidades = data.content;\r\n        });\r\n\r\n        /*EnumService.get(\"disponibilidad\").then(function(data) {\r\n            vm.disponibilidades = data;\r\n        });*/\r\n\r\n        Nivel.query().$promise.then(function(data) {\r\n            vm.niveles = data;\r\n        });\r\n\r\n        vm.idiomaService = Idioma;\r\n        vm.nivelService = Nivel;\r\n        vm.paisService = Pais;\r\n\r\n        User.zonasHorarias().$promise.then(function(data) {\r\n            vm.zonasHorarias = data;\r\n        });\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, PAQUETECREDITOS_FORM_ADMIN) {\r\n        var config = PAQUETECREDITOS_FORM_ADMIN();\r\n        var base = \"admin/paquetecreditos\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.paquetecreditos.\",\r\n            templateList: '<paquetecreditos-list></paquetecreditos-list>',\r\n            templateForm: config.component,\r\n            parent: 'admin'\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, { resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (Paquetecreditos, $stateParams) {\r\n                    return Paquetecreditos.get({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('PAQUETECREDITOS_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<paquetecreditos-form-admin' +\r\n                ' item=\"' + resolve + 'item\"' +\r\n                ' previous-params=\"' + resolve + 'previousParams\"' +\r\n                '\"></paquetecreditos-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (Paquetecreditos) {\r\n                        return new Paquetecreditos();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('paquetecreditosFormAdmin', {\r\n            templateUrl: 'app/admin/paquetecreditos/paquetecreditos-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, Paquetecreditos, ModalService, $stateParams) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            if ($stateParams.paquetecreditosId) {\r\n                vm.item.paquetecreditos = {};\r\n                vm.item.paquetecreditos.id = $stateParams.empresaId;\r\n            }\r\n            Paquetecreditos.save(vm.item).$promise.then(function(data) {\r\n                $state.go('admin/paquetecreditos/list');\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('login', {\r\n            parent: 'admin',\r\n            url: '/login',\r\n            data: {\r\n                authorities: [],\r\n                pageTitle: 'login.title'\r\n            },\r\n            views: {\r\n                'content@': {\r\n                    templateUrl: 'app/admin/login/login.html',\r\n                    controller: 'LoginController',\r\n                    controllerAs: 'loginCtrl'\r\n                }\r\n            },\r\n            ncyBreadcrumb: {\r\n                skip: true\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('LoginController', LoginController);\r\n\r\n    /* @ngInject */\r\n    function LoginController($state, $timeout, Auth, Principal, AlertService, ADMIN_PRINCIPAL) {\r\n        var vm = this;\r\n\r\n        vm.user = {};\r\n        vm.rememberMe = false;\r\n\r\n        Principal.identity().then(function () {\r\n            $state.go(ADMIN_PRINCIPAL);\r\n        });\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0)>input').focus();\r\n        });\r\n\r\n        vm.login = function () {\r\n            Auth.login({\r\n                username: vm.username,\r\n                password: vm.password,\r\n                rememberMe: vm.rememberMe\r\n            }).then(function () {\r\n                vm.authenticationError = false;\r\n                $state.go(ADMIN_PRINCIPAL);\r\n            }).catch(function () {\r\n                AlertService.error(\"login.form.error.authentication\");\r\n            });\r\n        }\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('admin/estaticas', {\r\n                parent: 'admin',\r\n                url: '/admin/estaticas/:nombre',\r\n                data: {\r\n                    authorities: ['ROLE_ADMIN'],\r\n                    pageTitle: 'estaticas.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        template: '<estatica-form estatica=\"$resolve.estatica\" idiomas=\"$resolve.idiomas\"></estatica-form>',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    estatica: function (Estatica, $stateParams) {\r\n                        return Estatica.getByNombre({nombre: $stateParams.nombre}).$promise.then(function (data) {\r\n                            return data;\r\n                        });\r\n                    },\r\n                    /* @ngInject */\r\n                    idiomas: function (EnumService) {\r\n                        return EnumService.get('estaticas-idioma');\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    label: 'estaticas.title'\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Estatica', Service);\r\n\r\n    /* @ngInject */\r\n    function Service($resource) {\r\n        return $resource('api/admin/estaticas/:id', {}, {\r\n            'get': {\r\n                method: 'GET',\r\n                url: 'api/public/estaticas/:id'\r\n            },\r\n            'getByNombre': {\r\n                method: 'GET',\r\n                url: 'api/public/estaticas/nombre/:nombre'\r\n            },\r\n            'getByNombreIdioma': {\r\n                method: 'GET',\r\n                url: 'api/public/estaticas/getByNombreIdioma'\r\n            },\r\n            'findAll': {\r\n                method: 'GET',\r\n                isArray: true,\r\n                url: 'api/public/estaticas/findAll'\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('EstaticaIdiomaService', EstaticaIdiomaService);\r\n\r\n    /* @ngInject */\r\n    function EstaticaIdiomaService($resource) {\r\n        return $resource('api/public/estaticas/idioma', {}, {\r\n            'get': {\r\n                method: 'GET',\r\n                isArray: true\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    // estatica: Objeto a modificar.\r\n    // idiomas: Idiomas en los que pueden estar las páginas estáticas.\r\n\r\n    angular\r\n        .module('app')\r\n        .component('estaticaForm', {\r\n            bindings: {\r\n                estatica: '<',\r\n                idiomas: '<'\r\n            },\r\n            templateUrl: 'app/admin/estaticas/estatica-form.admin.html',\r\n            controllerAs: 'ctrl',\r\n            controller: function (Estatica) {\r\n                var vm = this;\r\n\r\n                vm.mode = 'edit';\r\n                vm.canSave = true;\r\n\r\n                vm.init = function (estatica, index, idioma) {\r\n                    if (!estatica.estaticasI18n[index]) estatica.estaticasI18n[index] = {};\r\n\r\n                    if (!estatica.estaticasI18n[index].idioma) {\r\n                        estatica.estaticasI18n[index].idioma = idioma;\r\n                    }\r\n                };\r\n\r\n                vm.save = function () {\r\n                    // FIXME: La validación dejó de funcionar al utilizar el required. Intentar utilizar la librería de validación para cambiar la pestaña activa\r\n                    var hayPrimeraEstaticaSinTitulo = false;\r\n\r\n                    vm.idiomas.forEach(function (idioma, index) {\r\n                        vm.estatica.estaticasI18n.forEach(function (estaticaI18n) {\r\n                            if (estaticaI18n.idioma === idioma && estaticaI18n.titulo === undefined && !hayPrimeraEstaticaSinTitulo) {\r\n                                vm.active = index;\r\n                                hayPrimeraEstaticaSinTitulo = true;\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    if (!hayPrimeraEstaticaSinTitulo) {\r\n                        Estatica.save(vm.estatica).$promise.then(function (data) {\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n        });\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, ALUMNO_FORM_ADMIN) {\r\n        var config = ALUMNO_FORM_ADMIN();\r\n        var base = \"admin/empresa/alumno\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/:empresaId/alumno\",\r\n            translateBase: \"admin.alumno.\",\r\n            templateList: '<alumno-list-admin empresa=\"$resolve.empresa\"></alumno-list-admin>',\r\n            templateForm: config.component,\r\n            parent: 'admin/empresa'\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            },\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                empresa: function (User, $stateParams) {\r\n                    return User.getEmpresaDTO({id: $stateParams.empresaId}).$promise.then(function(data) {\r\n                        return data;\r\n                    });\r\n                }\r\n            }),\r\n            ncyBreadcrumb: {\r\n                parent: 'admin/empresa/list'\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {\r\n\r\n        });\r\n        // Crear\r\n        angular.merge(state.create, { resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (User, $stateParams) {\r\n                    return User.getById({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, EMPRESA_FORM_ADMIN) {\r\n        var config = EMPRESA_FORM_ADMIN();\r\n        var base = \"admin/empresa\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.empresa.\",\r\n            templateList: '<empresa-list-admin></empresa-list-admin>',\r\n            templateForm: config.component\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, {resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (User, $stateParams) {\r\n                    return User.getById({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('empresaListAdmin', {\r\n            templateUrl: 'app/admin/empresa/empresa-list.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, User, DescargaUtil) {\r\n        var vm = this;\r\n\r\n        vm.item = User;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.filter = {\r\n            key: undefined,\r\n            rol: 'ROLE_EMPRESA',\r\n            activos: true\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {email: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Descargar\r\n\r\n        vm.empresasExcel = function () {\r\n            DescargaUtil.descargar('api/admin/user/empresasExcel', null,\r\n                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8');\r\n        };\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('EMPRESA_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<empresa-form-admin' +\r\n                ' item=\"' + resolve + 'item\"' +\r\n                ' previous-params=\"' + resolve + 'previousParams\"' +\r\n                '\"></empresa-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (User) {\r\n                        return new User();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('empresaFormAdmin', {\r\n            templateUrl: 'app/admin/empresa/empresa-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, EnumService, Capacidad, Idioma, Pais, Nivel, Usuario, AlertService, ModalService, CAPACIDAD_FORM_ADMIN) {\r\n        var vm = this;\r\n\r\n        if (!vm.item.imagen) {\r\n            vm.item.imagen = {};\r\n        }\r\n        if (vm.item.foto) {\r\n            vm.item.imagen.path = vm.item.foto;\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            vm.item.type = \"empresa\";\r\n            if (vm.item.imagen) {\r\n                vm.item.foto = vm.item.imagen.path;\r\n            }\r\n            if ((vm.item.contrasenaClaro) && (vm.item.contrasenaClaro !== vm.confirmPassword)) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                if (vm.item.id) {\r\n                    Usuario.edit(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/empresa/list');\r\n                    });\r\n                } else {\r\n                    Usuario.register(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/empresa/list');\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, CAPACIDAD_FORM_ADMIN) {\r\n        var config = CAPACIDAD_FORM_ADMIN();\r\n        var base = \"admin/capacidad\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.capacidad.\",\r\n            templateList: '<capacidad-list-admin></capacidad-list-admin>',\r\n            templateForm: config.component\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, {resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (Capacidad, $stateParams) {\r\n                    return Capacidad.get({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit);\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('CAPACIDAD_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<capacidad-form-admin ' +\r\n                'item=\"' + resolve + 'item\" ' +\r\n                'previous-params=\"' + resolve + 'previousParams\"></capacidad-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (Capacidad) {\r\n                        return new Capacidad();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('capacidadFormAdmin', {\r\n            templateUrl: 'app/admin/capacidad/capacidad-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, ModalService) {\r\n        var vm = this;\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            vm.item.$save().then(function () {\r\n                ModalService.closeComponent(vm.item, 'admin/profesor/create', vm.previousParams);\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('ConfiguracionController', ConfiguracionController);\r\n\r\n    /* @ngInject */\r\n    function ConfiguracionController(configuracion, Configuracion, AlertService) {\r\n        var vm = this;\r\n        vm.configuracion = configuracion;\r\n\r\n        vm.save = function() {\r\n            Configuracion.save(vm.configuracion).$promise;\r\n        }\r\n\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('admin/configuracion', {\r\n                parent: 'admin',\r\n                url: '/admin/configuracion',\r\n                data: {\r\n                    authorities: ['ROLE_ADMIN'],\r\n                    pageTitle: 'admin.configuracion.title'\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        templateUrl: 'app/admin/configuracion/configuracion.html',\r\n                        controller: 'ConfiguracionController',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    configuracion: function (Configuracion) {\r\n                        return Configuracion.get({id: '0'}).$promise.then(function (data) {\r\n                            return data;\r\n                        });\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    label: 'admin.configuracion.title'\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider, STATE_HELPER, ALUMNO_FORM_ADMIN) {\r\n        var config = ALUMNO_FORM_ADMIN();\r\n        var base = \"admin/alumno\";\r\n        var params = {\r\n            base: base,\r\n            baseUrl: \"/\" + base,\r\n            translateBase: \"admin.alumno.\",\r\n            templateList: '<alumno-list-admin></alumno-list-admin>',\r\n            templateForm: config.component\r\n        };\r\n\r\n        var state = STATE_HELPER(params);\r\n        // Estado Padre\r\n        angular.merge(state.parent, {\r\n            data: {\r\n                authorities: ['ROLE_ADMIN']\r\n            }\r\n        });\r\n        // Listar\r\n        angular.merge(state.list, {});\r\n        // Crear\r\n        angular.merge(state.create, {resolve: config.resolve});\r\n        // Editar\r\n        angular.merge(state.edit, {\r\n            resolve: angular.merge(config.resolve, {\r\n                /* @ngInject */\r\n                item: function (User, $stateParams) {\r\n                    return User.getById({id: $stateParams.id}).$promise;\r\n                }\r\n            })\r\n        });\r\n\r\n        // Se definen los estados\r\n        $stateProvider\r\n            .state(params.base, state.parent)\r\n            .state(state.list.name, state.list)\r\n            .state(state.create.name, state.create)\r\n            .state(state.edit.name, state.edit)\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('alumnoListAdmin', {\r\n            templateUrl: 'app/admin/alumno/alumno-list.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                empresa: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($stateParams, NG_TABLE_DEFAULT_PARAMS, NgTableParams, NgTableHelper,\r\n                        ModalService, User, DescargaUtil) {\r\n        var vm = this;\r\n\r\n        vm.estadoEditar = vm.empresa != null ? 'empresa/alumno' : 'alumno';\r\n\r\n        vm.item = User;\r\n        vm.pagina = $stateParams.page ? $stateParams.page : 1;\r\n        vm.elementosPorPagina = NG_TABLE_DEFAULT_PARAMS.size;\r\n        vm.empresaId = $stateParams.empresaId;\r\n\r\n        vm.filter = {\r\n            key: undefined,\r\n            rol: 'ROLE_ALUMNO',\r\n            activos: true,\r\n            empresa: vm.empresaId\r\n        };\r\n        vm.tableParams = new NgTableParams({\r\n            count: vm.elementosPorPagina,\r\n            page: vm.pagina,\r\n            filter: vm.filter,\r\n            sorting: {nombre: 'asc'}\r\n        }, NgTableHelper.settings(vm));\r\n\r\n        // Descargar\r\n\r\n        vm.empresaAlumnosExcel = function (id) {\r\n            DescargaUtil.descargar('api/admin/user/empresaAlumnosExcel', {id: id},\r\n                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8');\r\n        };\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n\r\n        /* @ngInject */\r\n        .constant('ALUMNO_FORM_ADMIN', function (modal) {\r\n            var resolve = \"$resolve.\";\r\n            if (modal) {\r\n                resolve = \"ctrl.resolve.\"\r\n            }\r\n            return {\r\n                component: '<alumno-form-admin' +\r\n                ' item=\"' + resolve + 'item\"' +\r\n                ' previous-params=\"' + resolve + 'previousParams\"' +\r\n                ' empresa=\"' + resolve + 'empresa\"' +\r\n                '></alumno-form-admin>',\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    item: function (User) {\r\n                        return new User();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .component('alumnoFormAdmin', {\r\n            templateUrl: 'app/admin/alumno/alumno-form.admin.html',\r\n            controller: Controller,\r\n            controllerAs: 'ctrl',\r\n            bindings: {\r\n                item: '<',\r\n                previousParams: '<',\r\n                empresa: '<'\r\n            }\r\n        });\r\n\r\n    /* @ngInject */\r\n    function Controller($timeout, $state, EnumService, Usuario, AlertService, ModalService, $stateParams) {\r\n        var vm = this;\r\n\r\n        if (!vm.item.imagen) {\r\n            vm.item.imagen = {};\r\n        }\r\n        if (vm.item.foto) {\r\n            vm.item.imagen.path = vm.item.foto;\r\n        }\r\n\r\n        vm.onRemoveImage = function () {\r\n            vm.item.imagen = {eliminar: true};\r\n        };\r\n\r\n        $timeout(function () {\r\n            angular.element('.form-group:eq(0) input').focus();\r\n        });\r\n\r\n        vm.mode = $state.current.data.mode;\r\n        vm.canSave = vm.mode === 'create' || vm.mode === 'edit';\r\n\r\n        if (vm.empresa != null) {\r\n            var creditosIniciales = vm.item.creditosDisponibles;\r\n            vm.creditosMaximos = creditosIniciales + vm.empresa.creditosDisponibles;\r\n        }\r\n\r\n        // Guardar formulario\r\n        vm.save = function () {\r\n            vm.item.type = \"alumno\";\r\n            if (vm.item.imagen) {\r\n                vm.item.foto = vm.item.imagen.path;\r\n            }\r\n            if ($stateParams.empresaId) {\r\n                vm.item.empresa = {};\r\n                vm.item.empresa.id = $stateParams.empresaId;\r\n                vm.item.empresa.type = 'empresa';\r\n            }\r\n            if ((vm.item.contrasenaClaro) && (vm.item.contrasenaClaro !== vm.confirmPassword)) {\r\n                AlertService.error(\"admin.register.error.dontmatch\");\r\n            } else {\r\n                if (vm.item.id) {\r\n                    Usuario.edit(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/empresa/alumno', {empresaId: vm.item.empresa.id});\r\n                    });\r\n                } else {\r\n                    Usuario.register(vm.item).$promise.then(function(data) {\r\n                        $state.go('admin/empresa/alumno', {empresaId: vm.item.empresa.id});\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('admin/profesor/agenda', {\r\n                parent: 'admin/profesor',\r\n                url: '/agenda/:usuarioId?:mes&:ano',\r\n                data: {\r\n                    authorities: ['ROLE_ADMIN']\r\n                },\r\n                params: {\r\n                    // canceladasRechazadas: 'false'\r\n                    usuarioId: null,\r\n                    mes: null,\r\n                    ano: null\r\n                },\r\n                views: {\r\n                    'content@': {\r\n                        template: '<h1>{{$resolve.usuario.nombre}} {{$resolve.usuario.apellidos}} <small>({{$resolve.usuario.email}})</small></h1>' +\r\n                            '<mi-agenda usuario-autenticado=\"$resolve.usuario\" admin=\"true\"' +\r\n                            ' init-month=\"$resolve.mes\" init-year=\"$resolve.ano\"></mi-agenda>',\r\n                        controllerAs: 'ctrl'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    usuario: function ($stateParams, User) {\r\n                        return User.getById({id: $stateParams.usuarioId}).$promise;\r\n                    },\r\n                    /* @ngInject */\r\n                    mes: function ($stateParams) {\r\n                        return $stateParams.mes;\r\n                    },\r\n                    /* @ngInject */\r\n                    ano: function ($stateParams) {\r\n                        return $stateParams.ano;\r\n                    }\r\n                },\r\n                ncyBreadcrumb: {\r\n                    label: \"admin.profesor.agenda.title\",\r\n                    parent: 'admin/profesor/list'\r\n                }\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('RutasService', RutasService);\r\n\r\n    /* @ngInject */\r\n    function RutasService($location, DEBUG_INFO_ENABLED) {\r\n        var cacheUrl = \"\";\r\n\r\n        return {\r\n            getBaseUrl: getBaseUrl,\r\n            getAgenteCvUrl: getAgenteCvUrl,\r\n            getAgenteImagenUrl: getAgenteImagenUrl\r\n        };\r\n\r\n        function getBaseUrl() {\r\n            // En desarrollo utilizamos la de pre porque si no hay problemas al compartir con Facebook\r\n            if (!cacheUrl) {\r\n                if (DEBUG_INFO_ENABLED) {\r\n                    cacheUrl = \"http://localhost:8080\";\r\n                } else {\r\n                    cacheUrl = $location.protocol() + \"://\" + $location.host();\r\n                    if ($location.port() !== 80) {\r\n                        cacheUrl = cacheUrl + \":\" + $location.port();\r\n                    }\r\n                }\r\n            }\r\n            return cacheUrl;\r\n        }\r\n\r\n        function getAgenteCvUrl(id) {\r\n            return '/upload/agentes/' + id + '/cv/';\r\n        }\r\n\r\n        function getAgenteImagenUrl(id) {\r\n            return '/upload/agentes/' + id + '/imagen/';\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app').factory('Language', factory);\r\n\r\n    /* @ngInject */\r\n    function factory($translate) {\r\n        return {\r\n            getCurrent: getCurrent\r\n        };\r\n\r\n        function getCurrent() {\r\n            if ($translate.use()) return $translate.use();\r\n            return $translate.preferredLanguage();\r\n        }\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('EnumService', EnumService);\r\n\r\n    /* @ngInject */\r\n    function EnumService($http, $q) {\r\n        var cache = {};\r\n\r\n        return {\r\n            get: get\r\n        };\r\n\r\n        function get(tipo) {\r\n            if (cache[tipo]) {\r\n                var defered = $q.defer();\r\n                var promise = defered.promise;\r\n                defered.resolve(cache[tipo]);\r\n                return promise;\r\n            }\r\n\r\n            // FIXME: Así sea cachea durante la sesión. Una vez se recarga la página la caché se pierde. Se puede también cachear la petición cambiando la URL base (lo que está en /api no se cachea)\r\n            return $http.get('api/public/enum/' + tipo, {cache: true}).then(function (result) {\r\n                cache[tipo] = result.data;\r\n                return result.data;\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('public', {\r\n            abstract: true,\r\n            parent: 'site',\r\n            views: {\r\n                'header@': {\r\n                    templateUrl: 'app/layouts/header/header.html',\r\n                    controller: \"HeaderController\",\r\n                    controllerAs: 'ctrl'\r\n                },\r\n                'navbar@': {\r\n                    template: '<mi-menu menu=\"$ctrl.menu\" nav-collapsed=\"$ctrl.navCollapsed\" modal=\"$ctrl.modal(id)\"></mi-menu>',\r\n                    /* @ngInject */\r\n                    controller: function (menuData, $timeout, $window, Principal) {\r\n                        this.menu = menuData;\r\n                        this.navCollapsed = $window.innerWidth < 992;\r\n\r\n                        $timeout(function () {\r\n                            Principal.identity().then(function (data) {\r\n                                // Si es un alumno con empresa asociada, eliminamos la sección Mis compras\r\n                                if (data && data.rol === 'ROLE_ALUMNO' && data.empresa != null) {\r\n                                    angular.element(\".menu [ui-sref='paquetecreditos']\").parent().remove();\r\n                                    angular.element(\".menu [ui-sref='miespacio/miscompras']\").parent().remove();\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    controllerAs: '$ctrl',\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        menuData: function (Menu) {\r\n                            return Menu.getMenu('menu-main');\r\n                        }\r\n                    }\r\n                },\r\n                'footer@': {\r\n                    templateUrl: 'app/layouts/footer/footer.html'\r\n                }\r\n            },\r\n            resolve: {\r\n                /* @ngInject */\r\n                isAdmin: function ($rootScope) {\r\n                    $rootScope.isAdmin = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n    angular\r\n        .module('app')\r\n        // Nº de elementos por página en las tablas\r\n        .constant('NG_TABLE_DEFAULT_PARAMS_PUBLIC', {size: 20})\r\n        .constant('NG_LIST_DEFAULT_PARAMS_PUBLIC', {size: 20})\r\n        // Facebook ID (clientID). Coincide con la que se indique en application-prod.yml\r\n        .constant('FACEBOOK_ID', '294397101020791')\r\n\r\n    ;\r\n})();\r\n ","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Usuario', Usuario);\r\n\r\n    /* @ngInject */\r\n    function Usuario(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"usuario\", {}, {\r\n            'register': {\r\n                method: 'POST',\r\n                url: 'api/public/perfil/register',\r\n                isArray: false\r\n            },\r\n            'edit': {\r\n                method: 'POST',\r\n                url: 'api/public/perfil/edit',\r\n                isArray: false\r\n            },\r\n            'queryByEmail': {\r\n                method: 'GET',\r\n                url: 'api/public/perfil/queryByEmail',\r\n                isArray: true\r\n            },\r\n            'queryByLogin': {\r\n                method: 'GET',\r\n                url: 'api/public/perfil/queryByLogin',\r\n                isArray: true\r\n            },\r\n            'queryCentro': {\r\n                method: 'GET',\r\n                url: 'api/public/perfil/centro/query',\r\n                isArray: true\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('User', User);\r\n\r\n    /* @ngInject */\r\n    function User($resource, ParseLinks) {\r\n        var urlAdmin = 'api/admin/user';\r\n        var urlPublic = 'api/public/user';\r\n        return $resource(urlAdmin, {email: '@account.email'}, {\r\n            'query': {\r\n                method: 'GET',\r\n                isArray: false,\r\n                transformResponse: function (data, headers) {\r\n                    return {\r\n                        links: ParseLinks.parse(headers('link')),\r\n                        list: angular.fromJson(data)\r\n                    };\r\n                }\r\n            },\r\n            'get': {\r\n                method: 'GET',\r\n                params: {\r\n                    email: '@email'\r\n                }\r\n            },\r\n            'getById': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/id',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'getEmpresaDTO': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/getEmpresaDTO/id',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'getProfesorById': {\r\n                method: 'GET',\r\n                url: urlPublic + '/profesor/id',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'findAll': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/findAll'\r\n            },\r\n            'findProfesoresAdmin': {\r\n                method: 'POST',\r\n                url: urlAdmin + '/findProfesoresAdmin'\r\n            },\r\n            'findAllProfesor': {\r\n                method: 'POST',\r\n                url: urlPublic + '/findAllProfesor'\r\n            },\r\n            'findAlumnosByCentro': {\r\n                method: 'GET',\r\n                url: urlPublic + '/findAlumnosByCentro'\r\n            },\r\n            'getUsuarioPorReserva': {\r\n                method: 'GET',\r\n                url: urlPublic + '/getUsuarioPorReserva'\r\n            },\r\n            'getProfesorPorClaseLibre': {\r\n                method: 'GET',\r\n                url: urlPublic + '/getProfesorPorClaseLibre'\r\n            },\r\n            'email': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/email',\r\n                params: {\r\n                    email: '@email'\r\n                }\r\n            },\r\n            'activar': {\r\n                method: 'POST',\r\n                url: urlAdmin + '/activar',\r\n                params: {\r\n                    email: '@email',\r\n                    activar: '@activar'\r\n                }\r\n            },\r\n            'restaurar': {\r\n                method: 'POST',\r\n                url: urlAdmin + '/restaurar',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'eliminar': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/eliminar',\r\n                params: {\r\n                    id: '@id'\r\n                }\r\n            },\r\n            'baja': {\r\n                method: 'GET',\r\n                url: urlAdmin + '/baja',\r\n                params: {\r\n                    email: '@email'\r\n                }\r\n            },\r\n            'zonasHorarias': {\r\n                method: 'GET',\r\n                url: urlPublic + '/zonasHorarias',\r\n                isArray: true\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Perfil', service);\r\n\r\n    /* @ngInject */\r\n    function service($resource) {\r\n        var url = 'api/public/perfil';\r\n        return $resource(url, {}, {\r\n            'changePassword': {\r\n                method: 'POST',\r\n                url: url + '/change_password'\r\n            },\r\n            'baja': {\r\n                method: 'GET',\r\n                url: url + '/baja'\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Paquetecreditos', Paquetecreditos);\r\n\r\n    /* @ngInject */\r\n    function Paquetecreditos(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"paquetecreditos\", {}, {\r\n        });\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Pais', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"pais\", {}, {\r\n            'getAllWithProfesores': {\r\n                method: 'GET',\r\n                url: 'api/public/pais/getAllWithProfesores',\r\n                isArray: true\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Nivel', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"nivel\");\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Idioma', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"idioma\");\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('DatosFacturacion', Service);\r\n\r\n    /* @ngInject */\r\n    function Service($resource) {\r\n        var url = 'api/public/datosfacturacion';\r\n        return $resource(url, {}, {\r\n            'getDatosFacturacionDeUsuario': {\r\n                method: 'GET',\r\n                url: url + '/getDatosFacturacionDeUsuario'\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Configuracion', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"configuracion\");\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Compra', Compra);\r\n\r\n    /* @ngInject */\r\n    function Compra(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"compra\", {}, {\r\n            'findAllByUsuarioActivo': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/findAllByUsuarioActivo',\r\n                isArray: false\r\n            },\r\n/*            'findAllByUsuario': {\r\n                method: 'GET',\r\n                url: 'api/admin/compra/findAllByUsuario',\r\n                isArray: false\r\n            },*/\r\n            'crear': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/crear',\r\n                isArray: false\r\n            },\r\n            'iniciarPaypal': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/iniciar-paypal',\r\n                isArray: false\r\n            },\r\n            'confirmarPaypal': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/confirmar-paypal',\r\n                isArray: false\r\n            },\r\n            'iniciarPaypalAlumno': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/iniciar-paypal-alumno',\r\n                isArray: false\r\n            },\r\n            'cancelar': {\r\n                method: 'GET',\r\n                url: 'api/public/compra/cancelar',\r\n                isArray: false\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .factory('Capacidad', Service);\r\n\r\n    /* @ngInject */\r\n    function Service(ResourceHelper) {\r\n        return ResourceHelper.getResource(\"capacidad\");\r\n    }\r\n\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app').factory('stateHandler', factory);\r\n\r\n    /* @ngInject */\r\n    function factory($state, $window, $timeout, $rootScope, $translate, Principal, Auth, AlertService, $location) {\r\n        var _states;\r\n\r\n        return {\r\n            stateExists: stateExists,\r\n            initialize: initialize\r\n        };\r\n\r\n        function initialize() {\r\n            $timeout(function () {\r\n                _states = $state.get().map(function (item) {\r\n                    return item.name;\r\n                });\r\n            }, 0);\r\n            // in every HTML view we can check for a feature/state and prevent\r\n            // showing a link if it's not enabled\r\n            $rootScope.stateExists = stateExists;\r\n\r\n            var deregistrationStateChangeStart = $rootScope.$on('$stateChangeStart',\r\n                function (event, toState, toStateParams) {\r\n                    AlertService.clearPermanent();\r\n\r\n                    if (toState.redirectTo) {\r\n                        event.preventDefault();\r\n                        $state.go(toState.redirectTo, toStateParams)\r\n                    }\r\n\r\n                    $rootScope.toState = toState;\r\n                    $rootScope.toStateParams = toStateParams;\r\n\r\n                    if (Principal.isIdentityResolved()) {\r\n                        Auth.authorize();\r\n                    }\r\n                }\r\n            );\r\n            $rootScope.$on('$destroy', deregistrationStateChangeStart);\r\n\r\n            var deregistrationStateChangeSuccess = $rootScope.$on('$stateChangeSuccess',\r\n                function (event, toState, toParams, fromState, fromParams) {\r\n                    if ($window.ga) {\r\n                        console.log(\"GoogleAnalytics. Sending: \" + $location.path());\r\n                        $window.ga('set', 'page', $location.path());\r\n                        $window.ga('send', 'pageview');\r\n                    }\r\n\r\n                    var titleKey = 'global.title';\r\n\r\n                    if (!$rootScope.redirected && fromState.name !== 'logout' && fromState.name !== 'login') {\r\n                        $rootScope.previousStateName = fromState.name;\r\n                        $rootScope.previousStateParams = fromParams;\r\n                    }\r\n\r\n                    // Set the page title key to the one configured in state or use default one\r\n                    if (toState.data.pageTitle) {\r\n                        titleKey = toState.data.pageTitle;\r\n                    }\r\n                    $translate(titleKey).then(function (title) {\r\n                        // Change window title with translated one\r\n                        $window.document.title = $translate.instant('global.title') + \" - \" + title;\r\n                    });\r\n\r\n                }\r\n            );\r\n            $rootScope.$on('$destroy', deregistrationStateChangeSuccess);\r\n\r\n            function back() {\r\n                // If previous state is 'activate' or do not exist go to 'home'\r\n                if ($rootScope.previousStateName === 'activate' || $state.get($rootScope.previousStateName) === null) {\r\n                    $state.go('home');\r\n                } else {\r\n                    $state.go($rootScope.previousStateName, $rootScope.previousStateParams);\r\n                }\r\n            }\r\n\r\n            $rootScope.back = back;\r\n        }\r\n\r\n        function stateExists(state) {\r\n            return _states.indexOf(state) !== -1;\r\n        }\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name app.object:ieFix\r\n     *\r\n     * @description\r\n     * Definición de las operaciones que no soporta Internet Explorer y que el resto de navegadores sí:\r\n     *\r\n     * - `String.prototype.startsWith`\r\n     * - `String.prototype.endsWith`\r\n     * - `String.prototype.inclues`\r\n     * - `Array.prototype.startsWith`\r\n     *\r\n     */\r\n    angular\r\n        .module('app')\r\n        .config(ieFix);\r\n\r\n    /* @ngInject */\r\n    function ieFix() {\r\n\r\n        // *** Strings ***\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\r\n        if (!String.prototype.startsWith) {\r\n            String.prototype.startsWith = function (search, pos) {\r\n                return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\r\n            };\r\n        }\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\r\n        if (!String.prototype.endsWith) {\r\n            String.prototype.endsWith = function (search, this_len) {\r\n                if (this_len === undefined || this_len > this.length) {\r\n                    this_len = this.length;\r\n                }\r\n                return this.substring(this_len - search.length, this_len) === search;\r\n            };\r\n        }\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\r\n        if (!String.prototype.includes) {\r\n            String.prototype.includes = function (search, start) {\r\n                'use strict';\r\n                if (typeof start !== 'number') {\r\n                    start = 0;\r\n                }\r\n\r\n                if (start + search.length > this.length) {\r\n                    return false;\r\n                } else {\r\n                    return this.indexOf(search, start) !== -1;\r\n                }\r\n            };\r\n        }\r\n\r\n        // *** Arrays ***\r\n\r\n        // https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/includes\r\n        if (!Array.prototype.includes) {\r\n            Array.prototype.includes = function (searchElement /*, fromIndex*/) {\r\n                'use strict';\r\n                var O = Object(this);\r\n                var len = parseInt(O.length) || 0;\r\n                if (len === 0) {\r\n                    return false;\r\n                }\r\n                var n = parseInt(arguments[1]) || 0;\r\n                var k;\r\n                if (n >= 0) {\r\n                    k = n;\r\n                } else {\r\n                    k = len + n;\r\n                    if (k < 0) {\r\n                        k = 0;\r\n                    }\r\n                }\r\n                var currentElement;\r\n                while (k < len) {\r\n                    currentElement = O[k];\r\n                    if (searchElement === currentElement ||\r\n                        (searchElement !== searchElement && currentElement !== currentElement)) {\r\n                        return true;\r\n                    }\r\n                    k++;\r\n                }\r\n                return false;\r\n            };\r\n        }\r\n\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(httpConfig);\r\n\r\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', '$locationProvider', 'DEBUG_INFO_ENABLED', 'httpRequestInterceptorCacheBusterProvider'];\r\n\r\n    function httpConfig($urlRouterProvider, $httpProvider, $locationProvider, DEBUG_INFO_ENABLED, httpRequestInterceptorCacheBusterProvider) {\r\n        //Cache everything except rest api requests\r\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\r\n\r\n        $urlRouterProvider.otherwise('/entrar');\r\n\r\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\r\n        $httpProvider.interceptors.push('authExpiredInterceptor');\r\n        $httpProvider.interceptors.push('authInterceptor');\r\n        $httpProvider.interceptors.push('notificationInterceptor');\r\n\r\n        // Elimina el ! de las URLs\r\n        $locationProvider.hashPrefix('');\r\n\r\n        // Elimina el # de las URLs de producción.\r\n        if (!DEBUG_INFO_ENABLED) {\r\n            $locationProvider.html5Mode(true);\r\n        }\r\n    }\r\n\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(appConfig);\r\n\r\n    /* @ngInject */\r\n    function appConfig($translateProvider, DEBUG_INFO_ENABLED, cfpLoadingBarProvider, $compileProvider, $breadcrumbProvider, $qProvider) {\r\n        console.log(\"Configurando aplicación\");\r\n\r\n        $translateProvider.useSanitizeValueStrategy('escapeParameters');\r\n\r\n        // Configuración del idioma\r\n        $translateProvider.useStaticFilesLoader({\r\n            files: [{\r\n                prefix: 'i18n/',\r\n                suffix: '/admin.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/error.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/public.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/miespacio.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/componentes.json'\r\n            }, {\r\n                prefix: 'i18n/',\r\n                suffix: '/enum.json'\r\n            }]\r\n        });\r\n        // TODO: Almacenar en localstorage el último idioma seleccionado (app.module->changeLanguage) y leerlo de ahí\r\n        $translateProvider.preferredLanguage('es');\r\n\r\n        // Configuración de la barra de carga\r\n        cfpLoadingBarProvider.latencyThreshold = 150;\r\n        cfpLoadingBarProvider.includeSpinner = false;\r\n\r\n        // Configuración Breadcrumb\r\n        $breadcrumbProvider.setOptions({\r\n            templateUrl: 'app/components/breadcrumb/breadcrumb.html'\r\n        });\r\n\r\n        // disable debug data on prod profile to improve performance. Por ahora siempre en modo debug\r\n        console.log(\"Angular debug:\" + DEBUG_INFO_ENABLED);\r\n        $compileProvider.debugInfoEnabled(true);\r\n\r\n        $compileProvider.preAssignBindingsEnabled(true);\r\n        $qProvider.errorOnUnhandledRejections(false);\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .config(stateConfig);\r\n\r\n    /* @ngInject */\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('admin', {\r\n                abstract: true,\r\n                parent: 'site',\r\n                views: {\r\n                    'navbar@': {\r\n                        template: '<mi-menu menu=\"$ctrl.menu\" nav-collapsed=\"$ctrl.navCollapsed\" modal=\"$ctrl.modal(id)\"></mi-menu>',\r\n                        controller: ['menuData', '$window', 'StaticModal', function (menuData, $window) {\r\n                            this.menu = menuData;\r\n                            this.navCollapsed = $window.innerWidth < 992;\r\n                        }],\r\n                        controllerAs: '$ctrl',\r\n                        resolve: {\r\n                            menuData: ['Menu',\r\n                                function (Menu) {\r\n                                    return Menu.getMenu('menu-admin');\r\n                                }\r\n                            ]\r\n                        }\r\n                    },\r\n                    'footer@': {\r\n                        templateUrl: 'app/layouts/footer/footer.admin.html'\r\n                    }\r\n                },\r\n                resolve: {\r\n                    /* @ngInject */\r\n                    isAdmin: function ($rootScope) {\r\n                        $rootScope.isAdmin = true;\r\n                    }\r\n                }\r\n            })\r\n            .state('admin/login', {\r\n                url: '/admin',\r\n                parent: 'admin',\r\n                redirectTo: 'login'\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    // Operaciones CRUD para la gestión de elementos en la administración.\r\n\r\n    // PARÁMETROS DE CONFIGURACIÓN:\r\n\r\n    // base: Estado base (Ej: 'admin/entity')\r\n    // baseUrl: URL base que se va a mostrar en el navegador (Ej: '/admin/entity')\r\n    // translateBase: Raíz de los ficheros de mensaje (Ej: 'admin.entity.')\r\n    // parent: Indica si los nuevos estados van englobados dentro de otro. Útil para el breadcrumb.(Opcional)\r\n\r\n    // v2: Formularios como componentes\r\n    // templateList: Contiene un componente para los listados (Ej: '<entity-list></entity-list>')\r\n    // templateForm: Contiene un componente para los formularios (Ej: '<entity-form></entity-form>')\r\n    // Nota: A los componentes habrá que pasarle (con bindings) toda la información que se obtenga en el 'resolve' del estado.\r\n\r\n    // v1: Formularios sin componentes (controladores y htmls)\r\n    // controller: Controlador para el listado\r\n    // controllerForm: Controlador para el formulario\r\n    // templateUrlBase: Añade un prefijo a los archivos: .list.html o .form.html.\r\n\r\n    // Ejemplo de uso: FILO1701. Organismos (/app/admin/organismo)\r\n\r\n    angular.module('app')\r\n        .constant('STATE_HELPER', function (params) {\r\n            var states = {\r\n                parent: {\r\n                    name: params.base,\r\n                    parent: params.parent ? params.parent : 'admin',\r\n                    url: params.baseUrl,\r\n                    redirectTo: params.base + '/list',\r\n                    ncyBreadcrumb: {\r\n                        skip: true\r\n                    }\r\n                    // Extend: data {authorities}\r\n                },\r\n                list: {\r\n                    name: params.base + \"/list\",\r\n                    parent: params.base,\r\n                    url: '/listar/:page',\r\n                    params: {\r\n                        page: {value: '1', dynamic: true}\r\n                    },\r\n                    views: {},\r\n                    data: {\r\n                        pageTitle: params.translateBase + \"list.title\"\r\n                    },\r\n                    ncyBreadcrumb: {\r\n                        label: params.translateBase + \"list.title\"\r\n                    }\r\n                },\r\n                create: {\r\n                    name: params.base + \"/create\",\r\n                    parent: params.base,\r\n                    url: '/crear',\r\n                    data: {\r\n                        pageTitle: params.translateBase + 'create.title',\r\n                        mode: 'create'\r\n                    },\r\n                    views: {},\r\n                    ncyBreadcrumb: {\r\n                        label: params.translateBase + \"create.title\",\r\n                        parent: params.base + \"/list\"\r\n                    },\r\n                    // Extend: resolve\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        previousParams: function ($state) {\r\n                            return $state.params;\r\n                        }\r\n                    }\r\n                },\r\n                edit: {\r\n                    name: params.base + \"/edit\",\r\n                    parent: params.base,\r\n                    url: '/:id/editar',\r\n                    data: {\r\n                        pageTitle: params.translateBase + 'edit.title',\r\n                        mode: 'edit'\r\n                    },\r\n                    views: {},\r\n                    ncyBreadcrumb: {\r\n                        label: params.translateBase + \"edit.title\",\r\n                        parent: params.onlyEdit ? null : params.base + \"/list\"\r\n                    },\r\n                    // Extend: resolve\r\n                    resolve: {\r\n                        /* @ngInject */\r\n                        previousParams: function ($state) {\r\n                            return $state.params;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (!params.view) {\r\n                params.view = 'content@';\r\n            }\r\n\r\n            // Listar\r\n            states.list.views[params.view] = {\r\n                templateUrl: params.templateUrlBase + '.list.html',\r\n                controller: params.controller,\r\n                template: params.templateList ? params.templateList : undefined,\r\n                controllerAs: 'ctrl'\r\n            };\r\n            // Crear y editar\r\n            states.create.views[params.view] = states.edit.views[params.view] = {\r\n                templateUrl: params.templateUrlBase + '.form.html',\r\n                controller: params.controllerForm,\r\n                template: params.templateForm ? params.templateForm : undefined,\r\n                controllerAs: 'ctrl'\r\n            };\r\n\r\n            return states;\r\n        });\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app')\r\n        .constant('ADMIN_PRINCIPAL', \"admin/reserva/list\")\r\n        // Nº de elementos por página en las tablas\r\n        .constant('NG_TABLE_DEFAULT_PARAMS', {size: 20});\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(stateConfig);\r\n\r\n    stateConfig.$inject = ['$stateProvider'];\r\n\r\n    function stateConfig($stateProvider) {\r\n        $stateProvider.state('site', {\r\n            abstract: true,\r\n            data: {\r\n                authorities: []\r\n            },\r\n            resolve: {\r\n                authorize: ['Auth', function (Auth) {\r\n                    return Auth.authorize();\r\n                }]\r\n            }\r\n        });\r\n    }\r\n})();\r\n","(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('app')\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n"],"sourceRoot":"/source/"}